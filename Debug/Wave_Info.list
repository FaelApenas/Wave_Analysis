
Wave_Info.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b378  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  0800b548  0800b548  0000c548  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb98  0800bb98  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb98  0800bb98  0000cb98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bba0  0800bba0  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bba0  0800bba0  0000cba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bba4  0800bba4  0000cba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800bba8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  200001d4  0800bd7c  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000534  0800bd7c  0000d534  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ad7  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002acb  00000000  00000000  0001ecdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  000217a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c96  00000000  00000000  000227e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025856  00000000  00000000  00023476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013cf1  00000000  00000000  00048ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2819  00000000  00000000  0005c9bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013f1d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b28  00000000  00000000  0013f21c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00144d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b530 	.word	0x0800b530

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	0800b530 	.word	0x0800b530

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	0000      	movs	r0, r0
	...

08001028 <set_sinoid>:
#define SQUARE_ROOT_2   1.414213



void set_sinoid(uint32_t *sine_value, int size)
{
 8001028:	b5b0      	push	{r4, r5, r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
	for(int i=0;i<size;i++)
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	e03f      	b.n	80010b8 <set_sinoid+0x90>
	{
		sine_value[i]=((sin(i*2*PI/size)+1)*((0xFFF +1)/2));
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fa91 	bl	8000564 <__aeabi_i2d>
 8001042:	a325      	add	r3, pc, #148	@ (adr r3, 80010d8 <set_sinoid+0xb0>)
 8001044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001048:	f7ff faf6 	bl	8000638 <__aeabi_dmul>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	4614      	mov	r4, r2
 8001052:	461d      	mov	r5, r3
 8001054:	6838      	ldr	r0, [r7, #0]
 8001056:	f7ff fa85 	bl	8000564 <__aeabi_i2d>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	4620      	mov	r0, r4
 8001060:	4629      	mov	r1, r5
 8001062:	f7ff fc13 	bl	800088c <__aeabi_ddiv>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	ec43 2b17 	vmov	d7, r2, r3
 800106e:	eeb0 0a47 	vmov.f32	s0, s14
 8001072:	eef0 0a67 	vmov.f32	s1, s15
 8001076:	f009 fa2b 	bl	800a4d0 <sin>
 800107a:	ec51 0b10 	vmov	r0, r1, d0
 800107e:	f04f 0200 	mov.w	r2, #0
 8001082:	4b13      	ldr	r3, [pc, #76]	@ (80010d0 <set_sinoid+0xa8>)
 8001084:	f7ff f922 	bl	80002cc <__adddf3>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4610      	mov	r0, r2
 800108e:	4619      	mov	r1, r3
 8001090:	f04f 0200 	mov.w	r2, #0
 8001094:	4b0f      	ldr	r3, [pc, #60]	@ (80010d4 <set_sinoid+0xac>)
 8001096:	f7ff facf 	bl	8000638 <__aeabi_dmul>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4610      	mov	r0, r2
 80010a0:	4619      	mov	r1, r3
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	18d4      	adds	r4, r2, r3
 80010aa:	f7ff fd9d 	bl	8000be8 <__aeabi_d2uiz>
 80010ae:	4603      	mov	r3, r0
 80010b0:	6023      	str	r3, [r4, #0]
	for(int i=0;i<size;i++)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	3301      	adds	r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fa      	ldr	r2, [r7, #12]
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	dbbb      	blt.n	8001038 <set_sinoid+0x10>
	}
}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bdb0      	pop	{r4, r5, r7, pc}
 80010ca:	bf00      	nop
 80010cc:	f3af 8000 	nop.w
 80010d0:	3ff00000 	.word	0x3ff00000
 80010d4:	40a00000 	.word	0x40a00000
 80010d8:	f01b866e 	.word	0xf01b866e
 80010dc:	400921f9 	.word	0x400921f9

080010e0 <get_sinoid>:
float get_sinoid(uint32_t *buffer,float * convValue, ADC_HandleTypeDef *hadc, int samples)
{
 80010e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010e4:	b089      	sub	sp, #36	@ 0x24
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	60f8      	str	r0, [r7, #12]
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	607a      	str	r2, [r7, #4]
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	466b      	mov	r3, sp
 80010f2:	461e      	mov	r6, r3
	float teste[samples];
 80010f4:	6839      	ldr	r1, [r7, #0]
 80010f6:	1e4b      	subs	r3, r1, #1
 80010f8:	61bb      	str	r3, [r7, #24]
 80010fa:	460a      	mov	r2, r1
 80010fc:	2300      	movs	r3, #0
 80010fe:	4690      	mov	r8, r2
 8001100:	4699      	mov	r9, r3
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	f04f 0300 	mov.w	r3, #0
 800110a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800110e:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001112:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001116:	460a      	mov	r2, r1
 8001118:	2300      	movs	r3, #0
 800111a:	4614      	mov	r4, r2
 800111c:	461d      	mov	r5, r3
 800111e:	f04f 0200 	mov.w	r2, #0
 8001122:	f04f 0300 	mov.w	r3, #0
 8001126:	016b      	lsls	r3, r5, #5
 8001128:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800112c:	0162      	lsls	r2, r4, #5
 800112e:	460b      	mov	r3, r1
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	3307      	adds	r3, #7
 8001134:	08db      	lsrs	r3, r3, #3
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	ebad 0d03 	sub.w	sp, sp, r3
 800113c:	466b      	mov	r3, sp
 800113e:	3303      	adds	r3, #3
 8001140:	089b      	lsrs	r3, r3, #2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	617b      	str	r3, [r7, #20]
	memset(teste,0,sizeof(teste));
 8001146:	460b      	mov	r3, r1
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	461a      	mov	r2, r3
 800114c:	2100      	movs	r1, #0
 800114e:	6978      	ldr	r0, [r7, #20]
 8001150:	f005 fde1 	bl	8006d16 <memset>
	 for (int i = 0; i < samples; i++) {
 8001154:	2300      	movs	r3, #0
 8001156:	61fb      	str	r3, [r7, #28]
 8001158:	e047      	b.n	80011ea <get_sinoid+0x10a>
	        HAL_ADC_Start(hadc);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f001 f876 	bl	800224c <HAL_ADC_Start>
	        HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8001160:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f001 f943 	bl	80023f0 <HAL_ADC_PollForConversion>
	        buffer[i] = HAL_ADC_GetValue(hadc);
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	18d4      	adds	r4, r2, r3
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f001 f9c7 	bl	8002506 <HAL_ADC_GetValue>
 8001178:	4603      	mov	r3, r0
 800117a:	6023      	str	r3, [r4, #0]
	        teste[i] = ((float)buffer[i] * 3.3 / 0xFFF);
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	4413      	add	r3, r2
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	ee07 3a90 	vmov	s15, r3
 800118a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800118e:	ee17 0a90 	vmov	r0, s15
 8001192:	f7ff f9f9 	bl	8000588 <__aeabi_f2d>
 8001196:	a320      	add	r3, pc, #128	@ (adr r3, 8001218 <get_sinoid+0x138>)
 8001198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119c:	f7ff fa4c 	bl	8000638 <__aeabi_dmul>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4610      	mov	r0, r2
 80011a6:	4619      	mov	r1, r3
 80011a8:	a31d      	add	r3, pc, #116	@ (adr r3, 8001220 <get_sinoid+0x140>)
 80011aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ae:	f7ff fb6d 	bl	800088c <__aeabi_ddiv>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	4610      	mov	r0, r2
 80011b8:	4619      	mov	r1, r3
 80011ba:	f7ff fd35 	bl	8000c28 <__aeabi_d2f>
 80011be:	4601      	mov	r1, r0
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	6019      	str	r1, [r3, #0]
	        convValue[i]=teste[i];
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	4413      	add	r3, r2
 80011d2:	6979      	ldr	r1, [r7, #20]
 80011d4:	69fa      	ldr	r2, [r7, #28]
 80011d6:	0092      	lsls	r2, r2, #2
 80011d8:	440a      	add	r2, r1
 80011da:	6812      	ldr	r2, [r2, #0]
 80011dc:	601a      	str	r2, [r3, #0]
	        delay_us(50);
 80011de:	2032      	movs	r0, #50	@ 0x32
 80011e0:	f000 f872 	bl	80012c8 <delay_us>
	 for (int i = 0; i < samples; i++) {
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	3301      	adds	r3, #1
 80011e8:	61fb      	str	r3, [r7, #28]
 80011ea:	69fa      	ldr	r2, [r7, #28]
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	dbb3      	blt.n	800115a <get_sinoid+0x7a>
	 }

	 return convValue[samples - 1]; // Retorna o último valor convertido
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80011f8:	3b01      	subs	r3, #1
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	68ba      	ldr	r2, [r7, #8]
 80011fe:	4413      	add	r3, r2
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	46b5      	mov	sp, r6
 8001204:	ee07 3a90 	vmov	s15, r3
}
 8001208:	eeb0 0a67 	vmov.f32	s0, s15
 800120c:	3724      	adds	r7, #36	@ 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001214:	f3af 8000 	nop.w
 8001218:	66666666 	.word	0x66666666
 800121c:	400a6666 	.word	0x400a6666
 8001220:	00000000 	.word	0x00000000
 8001224:	40affe00 	.word	0x40affe00

08001228 <find_amp>:




float find_amp(float *convValue, int samples)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
	float max=0;
 8001232:	f04f 0300 	mov.w	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < samples; i++) {
 8001238:	2300      	movs	r3, #0
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	e015      	b.n	800126a <find_amp+0x42>
    	if(convValue[i]>max) {max= convValue[i];}
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	4413      	add	r3, r2
 8001246:	edd3 7a00 	vldr	s15, [r3]
 800124a:	ed97 7a03 	vldr	s14, [r7, #12]
 800124e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	d505      	bpl.n	8001264 <find_amp+0x3c>
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	4413      	add	r3, r2
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < samples; i++) {
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	3301      	adds	r3, #1
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	429a      	cmp	r2, r3
 8001270:	dbe5      	blt.n	800123e <find_amp+0x16>

    }
    return max;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	ee07 3a90 	vmov	s15, r3
}
 8001278:	eeb0 0a67 	vmov.f32	s0, s15
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <get_rms>:
    }
}


float get_rms(float peak)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	ed87 0a01 	vstr	s0, [r7, #4]
	return peak/SQUARE_ROOT_2;
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff f978 	bl	8000588 <__aeabi_f2d>
 8001298:	a309      	add	r3, pc, #36	@ (adr r3, 80012c0 <get_rms+0x38>)
 800129a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129e:	f7ff faf5 	bl	800088c <__aeabi_ddiv>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4610      	mov	r0, r2
 80012a8:	4619      	mov	r1, r3
 80012aa:	f7ff fcbd 	bl	8000c28 <__aeabi_d2f>
 80012ae:	4603      	mov	r3, r0
 80012b0:	ee07 3a90 	vmov	s15, r3
}
 80012b4:	eeb0 0a67 	vmov.f32	s0, s15
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	cf893faf 	.word	0xcf893faf
 80012c4:	3ff6a09d 	.word	0x3ff6a09d

080012c8 <delay_us>:
#include "delay.h"

void delay_us (uint16_t us)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 80012d2:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <delay_us+0x30>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2200      	movs	r2, #0
 80012d8:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 80012da:	bf00      	nop
 80012dc:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <delay_us+0x30>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012e2:	88fb      	ldrh	r3, [r7, #6]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d3f9      	bcc.n	80012dc <delay_us+0x14>
}
 80012e8:	bf00      	nop
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	200002c0 	.word	0x200002c0

080012fc <HAL_TIM_IC_CaptureCallback>:
uint8_t is_Fist=0;
float frequency=0;
unsigned short counts[2];
unsigned char index_test=0;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]



	frequency=0;
 8001304:	4b2a      	ldr	r3, [pc, #168]	@ (80013b0 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	7f1b      	ldrb	r3, [r3, #28]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d149      	bne.n	80013a8 <HAL_TIM_IC_CaptureCallback+0xac>
	{
		if(is_Fist== 0)
 8001314:	4b27      	ldr	r3, [pc, #156]	@ (80013b4 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d10a      	bne.n	8001332 <HAL_TIM_IC_CaptureCallback+0x36>
		{
			IC_VAL1= HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800131c:	2100      	movs	r1, #0
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f003 fdb8 	bl	8004e94 <HAL_TIM_ReadCapturedValue>
 8001324:	4603      	mov	r3, r0
 8001326:	4a24      	ldr	r2, [pc, #144]	@ (80013b8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001328:	6013      	str	r3, [r2, #0]
			is_Fist=1;
 800132a:	4b22      	ldr	r3, [pc, #136]	@ (80013b4 <HAL_TIM_IC_CaptureCallback+0xb8>)
 800132c:	2201      	movs	r2, #1
 800132e:	701a      	strb	r2, [r3, #0]
			is_Fist=0;
		}
	}


}
 8001330:	e03a      	b.n	80013a8 <HAL_TIM_IC_CaptureCallback+0xac>
			IC_VAL2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001332:	2100      	movs	r1, #0
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f003 fdad 	bl	8004e94 <HAL_TIM_ReadCapturedValue>
 800133a:	4603      	mov	r3, r0
 800133c:	4a1f      	ldr	r2, [pc, #124]	@ (80013bc <HAL_TIM_IC_CaptureCallback+0xc0>)
 800133e:	6013      	str	r3, [r2, #0]
			if(IC_VAL2> IC_VAL1)
 8001340:	4b1e      	ldr	r3, [pc, #120]	@ (80013bc <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4b1c      	ldr	r3, [pc, #112]	@ (80013b8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	429a      	cmp	r2, r3
 800134a:	d907      	bls.n	800135c <HAL_TIM_IC_CaptureCallback+0x60>
				diff  = IC_VAL2-IC_VAL1;
 800134c:	4b1b      	ldr	r3, [pc, #108]	@ (80013bc <HAL_TIM_IC_CaptureCallback+0xc0>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b19      	ldr	r3, [pc, #100]	@ (80013b8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	4a1a      	ldr	r2, [pc, #104]	@ (80013c0 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	e00f      	b.n	800137c <HAL_TIM_IC_CaptureCallback+0x80>
			}else if(IC_VAL1>IC_VAL2)
 800135c:	4b16      	ldr	r3, [pc, #88]	@ (80013b8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b16      	ldr	r3, [pc, #88]	@ (80013bc <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	429a      	cmp	r2, r3
 8001366:	d909      	bls.n	800137c <HAL_TIM_IC_CaptureCallback+0x80>
				diff = (0xffff-IC_VAL1)+ IC_VAL2;
 8001368:	4b14      	ldr	r3, [pc, #80]	@ (80013bc <HAL_TIM_IC_CaptureCallback+0xc0>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4b12      	ldr	r3, [pc, #72]	@ (80013b8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001376:	33ff      	adds	r3, #255	@ 0xff
 8001378:	4a11      	ldr	r2, [pc, #68]	@ (80013c0 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800137a:	6013      	str	r3, [r2, #0]
			float refClock = TIMCLOCK/(PRESCALAR);
 800137c:	4b11      	ldr	r3, [pc, #68]	@ (80013c4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800137e:	60fb      	str	r3, [r7, #12]
			frequency = refClock/diff;
 8001380:	4b0f      	ldr	r3, [pc, #60]	@ (80013c0 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	ee07 3a90 	vmov	s15, r3
 8001388:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800138c:	edd7 6a03 	vldr	s13, [r7, #12]
 8001390:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001396:	edc3 7a00 	vstr	s15, [r3]
			__HAL_TIM_SET_COUNTER(htim,0);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2200      	movs	r2, #0
 80013a0:	625a      	str	r2, [r3, #36]	@ 0x24
			is_Fist=0;
 80013a2:	4b04      	ldr	r3, [pc, #16]	@ (80013b4 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
}
 80013a8:	bf00      	nop
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000200 	.word	0x20000200
 80013b4:	200001fc 	.word	0x200001fc
 80013b8:	200001f0 	.word	0x200001f0
 80013bc:	200001f4 	.word	0x200001f4
 80013c0:	200001f8 	.word	0x200001f8
 80013c4:	49742400 	.word	0x49742400

080013c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	f5ad 5d0a 	sub.w	sp, sp, #8832	@ 0x2280
 80013ce:	b08c      	sub	sp, #48	@ 0x30
 80013d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d2:	f000 fe61 	bl	8002098 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d6:	f000 f8b1 	bl	800153c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013da:	f000 faef 	bl	80019bc <MX_GPIO_Init>
  MX_DMA_Init();
 80013de:	f000 facd 	bl	800197c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80013e2:	f000 faa1 	bl	8001928 <MX_USART2_UART_Init>
  MX_DAC_Init();
 80013e6:	f000 f969 	bl	80016bc <MX_DAC_Init>
  MX_TIM2_Init();
 80013ea:	f000 f9e1 	bl	80017b0 <MX_TIM2_Init>
  MX_TIM1_Init();
 80013ee:	f000 f98f 	bl	8001710 <MX_TIM1_Init>
  MX_ADC1_Init();
 80013f2:	f000 f911 	bl	8001618 <MX_ADC1_Init>
  MX_TIM3_Init();
 80013f6:	f000 fa27 	bl	8001848 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  uint32_t sine_value[SINOID_SIZE];
  set_sinoid(sine_value,SINOID_SIZE);
 80013fa:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80013fe:	f103 0310 	add.w	r3, r3, #16
 8001402:	21a6      	movs	r1, #166	@ 0xa6
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fe0f 	bl	8001028 <set_sinoid>
  HAL_TIM_Base_Start(&htim1);
 800140a:	4843      	ldr	r0, [pc, #268]	@ (8001518 <main+0x150>)
 800140c:	f003 f904 	bl	8004618 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 8001410:	4842      	ldr	r0, [pc, #264]	@ (800151c <main+0x154>)
 8001412:	f003 f901 	bl	8004618 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim3,TIM_CHANNEL_1);
 8001416:	2100      	movs	r1, #0
 8001418:	4841      	ldr	r0, [pc, #260]	@ (8001520 <main+0x158>)
 800141a:	f003 f9bf 	bl	800479c <HAL_TIM_IC_Start_IT>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, sine_value,SINOID_SIZE, DAC_ALIGN_12B_R);
 800141e:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8001422:	f102 0210 	add.w	r2, r2, #16
 8001426:	2300      	movs	r3, #0
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	23a6      	movs	r3, #166	@ 0xa6
 800142c:	2100      	movs	r1, #0
 800142e:	483d      	ldr	r0, [pc, #244]	@ (8001524 <main+0x15c>)
 8001430:	f001 fbd8 	bl	8002be4 <HAL_DAC_Start_DMA>
  HAL_ADC_Init(&hadc1);
 8001434:	483c      	ldr	r0, [pc, #240]	@ (8001528 <main+0x160>)
 8001436:	f000 fec5 	bl	80021c4 <HAL_ADC_Init>

    /* USER CODE BEGIN 3 */
	  	uint32_t buffer[SAMPLES];
	  	float convValue[SAMPLES];
	  	signal F_Signal;
	  F_Signal.frequency=  frequency;
 800143a:	4b3c      	ldr	r3, [pc, #240]	@ (800152c <main+0x164>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	f507 530a 	add.w	r3, r7, #8832	@ 0x2280
 8001442:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001446:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800144a:	609a      	str	r2, [r3, #8]
	  get_sinoid(buffer, convValue,&hadc1, SAMPLES);
 800144c:	f507 5180 	add.w	r1, r7, #4096	@ 0x1000
 8001450:	f101 0108 	add.w	r1, r1, #8
 8001454:	3908      	subs	r1, #8
 8001456:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800145a:	3828      	subs	r0, #40	@ 0x28
 800145c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001460:	4a31      	ldr	r2, [pc, #196]	@ (8001528 <main+0x160>)
 8001462:	f7ff fe3d 	bl	80010e0 <get_sinoid>
	  F_Signal.peak=find_amp(convValue, SAMPLES);
 8001466:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800146a:	f103 0308 	add.w	r3, r3, #8
 800146e:	3b08      	subs	r3, #8
 8001470:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fed7 	bl	8001228 <find_amp>
 800147a:	eef0 7a40 	vmov.f32	s15, s0
 800147e:	f507 530a 	add.w	r3, r7, #8832	@ 0x2280
 8001482:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001486:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800148a:	edc3 7a00 	vstr	s15, [r3]
	  //print_F32_arr(convValue, SAMPLES);
	  F_Signal.rms= get_rms(F_Signal.peak);
 800148e:	f507 530a 	add.w	r3, r7, #8832	@ 0x2280
 8001492:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001496:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800149a:	edd3 7a00 	vldr	s15, [r3]
 800149e:	eeb0 0a67 	vmov.f32	s0, s15
 80014a2:	f7ff fef1 	bl	8001288 <get_rms>
 80014a6:	eef0 7a40 	vmov.f32	s15, s0
 80014aa:	f507 530a 	add.w	r3, r7, #8832	@ 0x2280
 80014ae:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80014b2:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 80014b6:	edc3 7a01 	vstr	s15, [r3, #4]

	  printf("Peak: %.2f\n\r",F_Signal.peak);
 80014ba:	f507 530a 	add.w	r3, r7, #8832	@ 0x2280
 80014be:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80014c2:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff f85d 	bl	8000588 <__aeabi_f2d>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4817      	ldr	r0, [pc, #92]	@ (8001530 <main+0x168>)
 80014d4:	f005 fbaa 	bl	8006c2c <iprintf>
	  printf("RMS: %.2f\n\r",F_Signal.rms);
 80014d8:	f507 530a 	add.w	r3, r7, #8832	@ 0x2280
 80014dc:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80014e0:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff f84e 	bl	8000588 <__aeabi_f2d>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4810      	ldr	r0, [pc, #64]	@ (8001534 <main+0x16c>)
 80014f2:	f005 fb9b 	bl	8006c2c <iprintf>
	  printf("Freq: %.2f\n\r",frequency);
 80014f6:	4b0d      	ldr	r3, [pc, #52]	@ (800152c <main+0x164>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff f844 	bl	8000588 <__aeabi_f2d>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	480c      	ldr	r0, [pc, #48]	@ (8001538 <main+0x170>)
 8001506:	f005 fb91 	bl	8006c2c <iprintf>

	  HAL_Delay(2000);
 800150a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800150e:	f000 fe35 	bl	800217c <HAL_Delay>
  {
 8001512:	bf00      	nop
 8001514:	e791      	b.n	800143a <main+0x72>
 8001516:	bf00      	nop
 8001518:	200002c0 	.word	0x200002c0
 800151c:	20000308 	.word	0x20000308
 8001520:	20000350 	.word	0x20000350
 8001524:	2000024c 	.word	0x2000024c
 8001528:	20000204 	.word	0x20000204
 800152c:	20000200 	.word	0x20000200
 8001530:	0800b548 	.word	0x0800b548
 8001534:	0800b558 	.word	0x0800b558
 8001538:	0800b564 	.word	0x0800b564

0800153c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b094      	sub	sp, #80	@ 0x50
 8001540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001542:	f107 031c 	add.w	r3, r7, #28
 8001546:	2234      	movs	r2, #52	@ 0x34
 8001548:	2100      	movs	r1, #0
 800154a:	4618      	mov	r0, r3
 800154c:	f005 fbe3 	bl	8006d16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001550:	f107 0308 	add.w	r3, r7, #8
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001560:	2300      	movs	r3, #0
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	4b2a      	ldr	r3, [pc, #168]	@ (8001610 <SystemClock_Config+0xd4>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001568:	4a29      	ldr	r2, [pc, #164]	@ (8001610 <SystemClock_Config+0xd4>)
 800156a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800156e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001570:	4b27      	ldr	r3, [pc, #156]	@ (8001610 <SystemClock_Config+0xd4>)
 8001572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001574:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800157c:	2300      	movs	r3, #0
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	4b24      	ldr	r3, [pc, #144]	@ (8001614 <SystemClock_Config+0xd8>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001588:	4a22      	ldr	r2, [pc, #136]	@ (8001614 <SystemClock_Config+0xd8>)
 800158a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	4b20      	ldr	r3, [pc, #128]	@ (8001614 <SystemClock_Config+0xd8>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001598:	603b      	str	r3, [r7, #0]
 800159a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800159c:	2302      	movs	r3, #2
 800159e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015a0:	2301      	movs	r3, #1
 80015a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015a4:	2310      	movs	r3, #16
 80015a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a8:	2302      	movs	r3, #2
 80015aa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015ac:	2300      	movs	r3, #0
 80015ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80015b0:	2310      	movs	r3, #16
 80015b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015b4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80015b8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80015ba:	2304      	movs	r3, #4
 80015bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80015be:	2302      	movs	r3, #2
 80015c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015c2:	2302      	movs	r3, #2
 80015c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c6:	f107 031c 	add.w	r3, r7, #28
 80015ca:	4618      	mov	r0, r3
 80015cc:	f002 fd36 	bl	800403c <HAL_RCC_OscConfig>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80015d6:	f000 fa89 	bl	8001aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015da:	230f      	movs	r3, #15
 80015dc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015de:	2302      	movs	r3, #2
 80015e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015f0:	f107 0308 	add.w	r3, r7, #8
 80015f4:	2102      	movs	r1, #2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f002 f9d6 	bl	80039a8 <HAL_RCC_ClockConfig>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001602:	f000 fa73 	bl	8001aec <Error_Handler>
  }
}
 8001606:	bf00      	nop
 8001608:	3750      	adds	r7, #80	@ 0x50
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40023800 	.word	0x40023800
 8001614:	40007000 	.word	0x40007000

08001618 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800161e:	463b      	mov	r3, r7
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800162a:	4b21      	ldr	r3, [pc, #132]	@ (80016b0 <MX_ADC1_Init+0x98>)
 800162c:	4a21      	ldr	r2, [pc, #132]	@ (80016b4 <MX_ADC1_Init+0x9c>)
 800162e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001630:	4b1f      	ldr	r3, [pc, #124]	@ (80016b0 <MX_ADC1_Init+0x98>)
 8001632:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001636:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001638:	4b1d      	ldr	r3, [pc, #116]	@ (80016b0 <MX_ADC1_Init+0x98>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800163e:	4b1c      	ldr	r3, [pc, #112]	@ (80016b0 <MX_ADC1_Init+0x98>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001644:	4b1a      	ldr	r3, [pc, #104]	@ (80016b0 <MX_ADC1_Init+0x98>)
 8001646:	2200      	movs	r2, #0
 8001648:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800164a:	4b19      	ldr	r3, [pc, #100]	@ (80016b0 <MX_ADC1_Init+0x98>)
 800164c:	2200      	movs	r2, #0
 800164e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001652:	4b17      	ldr	r3, [pc, #92]	@ (80016b0 <MX_ADC1_Init+0x98>)
 8001654:	2200      	movs	r2, #0
 8001656:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001658:	4b15      	ldr	r3, [pc, #84]	@ (80016b0 <MX_ADC1_Init+0x98>)
 800165a:	4a17      	ldr	r2, [pc, #92]	@ (80016b8 <MX_ADC1_Init+0xa0>)
 800165c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800165e:	4b14      	ldr	r3, [pc, #80]	@ (80016b0 <MX_ADC1_Init+0x98>)
 8001660:	2200      	movs	r2, #0
 8001662:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001664:	4b12      	ldr	r3, [pc, #72]	@ (80016b0 <MX_ADC1_Init+0x98>)
 8001666:	2201      	movs	r2, #1
 8001668:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800166a:	4b11      	ldr	r3, [pc, #68]	@ (80016b0 <MX_ADC1_Init+0x98>)
 800166c:	2200      	movs	r2, #0
 800166e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001672:	4b0f      	ldr	r3, [pc, #60]	@ (80016b0 <MX_ADC1_Init+0x98>)
 8001674:	2201      	movs	r2, #1
 8001676:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001678:	480d      	ldr	r0, [pc, #52]	@ (80016b0 <MX_ADC1_Init+0x98>)
 800167a:	f000 fda3 	bl	80021c4 <HAL_ADC_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001684:	f000 fa32 	bl	8001aec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001688:	2301      	movs	r3, #1
 800168a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800168c:	2301      	movs	r3, #1
 800168e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001690:	2300      	movs	r3, #0
 8001692:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001694:	463b      	mov	r3, r7
 8001696:	4619      	mov	r1, r3
 8001698:	4805      	ldr	r0, [pc, #20]	@ (80016b0 <MX_ADC1_Init+0x98>)
 800169a:	f000 ff41 	bl	8002520 <HAL_ADC_ConfigChannel>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80016a4:	f000 fa22 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016a8:	bf00      	nop
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000204 	.word	0x20000204
 80016b4:	40012000 	.word	0x40012000
 80016b8:	0f000001 	.word	0x0f000001

080016bc <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80016c2:	463b      	mov	r3, r7
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80016ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001708 <MX_DAC_Init+0x4c>)
 80016cc:	4a0f      	ldr	r2, [pc, #60]	@ (800170c <MX_DAC_Init+0x50>)
 80016ce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80016d0:	480d      	ldr	r0, [pc, #52]	@ (8001708 <MX_DAC_Init+0x4c>)
 80016d2:	f001 fa64 	bl	8002b9e <HAL_DAC_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80016dc:	f000 fa06 	bl	8001aec <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80016e0:	2324      	movs	r3, #36	@ 0x24
 80016e2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80016e4:	2300      	movs	r3, #0
 80016e6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80016e8:	463b      	mov	r3, r7
 80016ea:	2200      	movs	r2, #0
 80016ec:	4619      	mov	r1, r3
 80016ee:	4806      	ldr	r0, [pc, #24]	@ (8001708 <MX_DAC_Init+0x4c>)
 80016f0:	f001 fb58 	bl	8002da4 <HAL_DAC_ConfigChannel>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80016fa:	f000 f9f7 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	2000024c 	.word	0x2000024c
 800170c:	40007400 	.word	0x40007400

08001710 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001716:	f107 0308 	add.w	r3, r7, #8
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001724:	463b      	mov	r3, r7
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800172c:	4b1e      	ldr	r3, [pc, #120]	@ (80017a8 <MX_TIM1_Init+0x98>)
 800172e:	4a1f      	ldr	r2, [pc, #124]	@ (80017ac <MX_TIM1_Init+0x9c>)
 8001730:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001732:	4b1d      	ldr	r3, [pc, #116]	@ (80017a8 <MX_TIM1_Init+0x98>)
 8001734:	2253      	movs	r2, #83	@ 0x53
 8001736:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001738:	4b1b      	ldr	r3, [pc, #108]	@ (80017a8 <MX_TIM1_Init+0x98>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800173e:	4b1a      	ldr	r3, [pc, #104]	@ (80017a8 <MX_TIM1_Init+0x98>)
 8001740:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001744:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001746:	4b18      	ldr	r3, [pc, #96]	@ (80017a8 <MX_TIM1_Init+0x98>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800174c:	4b16      	ldr	r3, [pc, #88]	@ (80017a8 <MX_TIM1_Init+0x98>)
 800174e:	2200      	movs	r2, #0
 8001750:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001752:	4b15      	ldr	r3, [pc, #84]	@ (80017a8 <MX_TIM1_Init+0x98>)
 8001754:	2200      	movs	r2, #0
 8001756:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001758:	4813      	ldr	r0, [pc, #76]	@ (80017a8 <MX_TIM1_Init+0x98>)
 800175a:	f002 ff0d 	bl	8004578 <HAL_TIM_Base_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001764:	f000 f9c2 	bl	8001aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001768:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800176c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800176e:	f107 0308 	add.w	r3, r7, #8
 8001772:	4619      	mov	r1, r3
 8001774:	480c      	ldr	r0, [pc, #48]	@ (80017a8 <MX_TIM1_Init+0x98>)
 8001776:	f003 fac5 	bl	8004d04 <HAL_TIM_ConfigClockSource>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001780:	f000 f9b4 	bl	8001aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001784:	2300      	movs	r3, #0
 8001786:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001788:	2300      	movs	r3, #0
 800178a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800178c:	463b      	mov	r3, r7
 800178e:	4619      	mov	r1, r3
 8001790:	4805      	ldr	r0, [pc, #20]	@ (80017a8 <MX_TIM1_Init+0x98>)
 8001792:	f003 fe81 	bl	8005498 <HAL_TIMEx_MasterConfigSynchronization>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800179c:	f000 f9a6 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80017a0:	bf00      	nop
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	200002c0 	.word	0x200002c0
 80017ac:	40010000 	.word	0x40010000

080017b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017b6:	f107 0308 	add.w	r3, r7, #8
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c4:	463b      	mov	r3, r7
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001844 <MX_TIM2_Init+0x94>)
 80017ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80017d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001844 <MX_TIM2_Init+0x94>)
 80017d6:	2253      	movs	r2, #83	@ 0x53
 80017d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017da:	4b1a      	ldr	r3, [pc, #104]	@ (8001844 <MX_TIM2_Init+0x94>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80017e0:	4b18      	ldr	r3, [pc, #96]	@ (8001844 <MX_TIM2_Init+0x94>)
 80017e2:	2263      	movs	r2, #99	@ 0x63
 80017e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e6:	4b17      	ldr	r3, [pc, #92]	@ (8001844 <MX_TIM2_Init+0x94>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ec:	4b15      	ldr	r3, [pc, #84]	@ (8001844 <MX_TIM2_Init+0x94>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017f2:	4814      	ldr	r0, [pc, #80]	@ (8001844 <MX_TIM2_Init+0x94>)
 80017f4:	f002 fec0 	bl	8004578 <HAL_TIM_Base_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80017fe:	f000 f975 	bl	8001aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001802:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001806:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001808:	f107 0308 	add.w	r3, r7, #8
 800180c:	4619      	mov	r1, r3
 800180e:	480d      	ldr	r0, [pc, #52]	@ (8001844 <MX_TIM2_Init+0x94>)
 8001810:	f003 fa78 	bl	8004d04 <HAL_TIM_ConfigClockSource>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800181a:	f000 f967 	bl	8001aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800181e:	2320      	movs	r3, #32
 8001820:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001822:	2300      	movs	r3, #0
 8001824:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001826:	463b      	mov	r3, r7
 8001828:	4619      	mov	r1, r3
 800182a:	4806      	ldr	r0, [pc, #24]	@ (8001844 <MX_TIM2_Init+0x94>)
 800182c:	f003 fe34 	bl	8005498 <HAL_TIMEx_MasterConfigSynchronization>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001836:	f000 f959 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800183a:	bf00      	nop
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000308 	.word	0x20000308

08001848 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08a      	sub	sp, #40	@ 0x28
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800184e:	f107 0318 	add.w	r3, r7, #24
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800185c:	f107 0310 	add.w	r3, r7, #16
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001866:	463b      	mov	r3, r7
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001872:	4b2b      	ldr	r3, [pc, #172]	@ (8001920 <MX_TIM3_Init+0xd8>)
 8001874:	4a2b      	ldr	r2, [pc, #172]	@ (8001924 <MX_TIM3_Init+0xdc>)
 8001876:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001878:	4b29      	ldr	r3, [pc, #164]	@ (8001920 <MX_TIM3_Init+0xd8>)
 800187a:	2200      	movs	r2, #0
 800187c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187e:	4b28      	ldr	r3, [pc, #160]	@ (8001920 <MX_TIM3_Init+0xd8>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001884:	4b26      	ldr	r3, [pc, #152]	@ (8001920 <MX_TIM3_Init+0xd8>)
 8001886:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800188a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800188c:	4b24      	ldr	r3, [pc, #144]	@ (8001920 <MX_TIM3_Init+0xd8>)
 800188e:	2200      	movs	r2, #0
 8001890:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001892:	4b23      	ldr	r3, [pc, #140]	@ (8001920 <MX_TIM3_Init+0xd8>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001898:	4821      	ldr	r0, [pc, #132]	@ (8001920 <MX_TIM3_Init+0xd8>)
 800189a:	f002 fe6d 	bl	8004578 <HAL_TIM_Base_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80018a4:	f000 f922 	bl	8001aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018ac:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018ae:	f107 0318 	add.w	r3, r7, #24
 80018b2:	4619      	mov	r1, r3
 80018b4:	481a      	ldr	r0, [pc, #104]	@ (8001920 <MX_TIM3_Init+0xd8>)
 80018b6:	f003 fa25 	bl	8004d04 <HAL_TIM_ConfigClockSource>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80018c0:	f000 f914 	bl	8001aec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80018c4:	4816      	ldr	r0, [pc, #88]	@ (8001920 <MX_TIM3_Init+0xd8>)
 80018c6:	f002 ff0f 	bl	80046e8 <HAL_TIM_IC_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80018d0:	f000 f90c 	bl	8001aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d4:	2300      	movs	r3, #0
 80018d6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018dc:	f107 0310 	add.w	r3, r7, #16
 80018e0:	4619      	mov	r1, r3
 80018e2:	480f      	ldr	r0, [pc, #60]	@ (8001920 <MX_TIM3_Init+0xd8>)
 80018e4:	f003 fdd8 	bl	8005498 <HAL_TIMEx_MasterConfigSynchronization>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80018ee:	f000 f8fd 	bl	8001aec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80018f2:	2300      	movs	r3, #0
 80018f4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80018f6:	2301      	movs	r3, #1
 80018f8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80018fa:	2300      	movs	r3, #0
 80018fc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001902:	463b      	mov	r3, r7
 8001904:	2200      	movs	r2, #0
 8001906:	4619      	mov	r1, r3
 8001908:	4805      	ldr	r0, [pc, #20]	@ (8001920 <MX_TIM3_Init+0xd8>)
 800190a:	f003 f95f 	bl	8004bcc <HAL_TIM_IC_ConfigChannel>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001914:	f000 f8ea 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001918:	bf00      	nop
 800191a:	3728      	adds	r7, #40	@ 0x28
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000350 	.word	0x20000350
 8001924:	40000400 	.word	0x40000400

08001928 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800192c:	4b11      	ldr	r3, [pc, #68]	@ (8001974 <MX_USART2_UART_Init+0x4c>)
 800192e:	4a12      	ldr	r2, [pc, #72]	@ (8001978 <MX_USART2_UART_Init+0x50>)
 8001930:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001932:	4b10      	ldr	r3, [pc, #64]	@ (8001974 <MX_USART2_UART_Init+0x4c>)
 8001934:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001938:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800193a:	4b0e      	ldr	r3, [pc, #56]	@ (8001974 <MX_USART2_UART_Init+0x4c>)
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001940:	4b0c      	ldr	r3, [pc, #48]	@ (8001974 <MX_USART2_UART_Init+0x4c>)
 8001942:	2200      	movs	r2, #0
 8001944:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001946:	4b0b      	ldr	r3, [pc, #44]	@ (8001974 <MX_USART2_UART_Init+0x4c>)
 8001948:	2200      	movs	r2, #0
 800194a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800194c:	4b09      	ldr	r3, [pc, #36]	@ (8001974 <MX_USART2_UART_Init+0x4c>)
 800194e:	220c      	movs	r2, #12
 8001950:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001952:	4b08      	ldr	r3, [pc, #32]	@ (8001974 <MX_USART2_UART_Init+0x4c>)
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001958:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <MX_USART2_UART_Init+0x4c>)
 800195a:	2200      	movs	r2, #0
 800195c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800195e:	4805      	ldr	r0, [pc, #20]	@ (8001974 <MX_USART2_UART_Init+0x4c>)
 8001960:	f003 fe2a 	bl	80055b8 <HAL_UART_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800196a:	f000 f8bf 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000398 	.word	0x20000398
 8001978:	40004400 	.word	0x40004400

0800197c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	607b      	str	r3, [r7, #4]
 8001986:	4b0c      	ldr	r3, [pc, #48]	@ (80019b8 <MX_DMA_Init+0x3c>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	4a0b      	ldr	r2, [pc, #44]	@ (80019b8 <MX_DMA_Init+0x3c>)
 800198c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001990:	6313      	str	r3, [r2, #48]	@ 0x30
 8001992:	4b09      	ldr	r3, [pc, #36]	@ (80019b8 <MX_DMA_Init+0x3c>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	2100      	movs	r1, #0
 80019a2:	2010      	movs	r0, #16
 80019a4:	f001 f8c5 	bl	8002b32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80019a8:	2010      	movs	r0, #16
 80019aa:	f001 f8de 	bl	8002b6a <HAL_NVIC_EnableIRQ>

}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40023800 	.word	0x40023800

080019bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08a      	sub	sp, #40	@ 0x28
 80019c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c2:	f107 0314 	add.w	r3, r7, #20
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	60da      	str	r2, [r3, #12]
 80019d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	4b37      	ldr	r3, [pc, #220]	@ (8001ab4 <MX_GPIO_Init+0xf8>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019da:	4a36      	ldr	r2, [pc, #216]	@ (8001ab4 <MX_GPIO_Init+0xf8>)
 80019dc:	f043 0304 	orr.w	r3, r3, #4
 80019e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e2:	4b34      	ldr	r3, [pc, #208]	@ (8001ab4 <MX_GPIO_Init+0xf8>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e6:	f003 0304 	and.w	r3, r3, #4
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	4b30      	ldr	r3, [pc, #192]	@ (8001ab4 <MX_GPIO_Init+0xf8>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f6:	4a2f      	ldr	r2, [pc, #188]	@ (8001ab4 <MX_GPIO_Init+0xf8>)
 80019f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fe:	4b2d      	ldr	r3, [pc, #180]	@ (8001ab4 <MX_GPIO_Init+0xf8>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	4b29      	ldr	r3, [pc, #164]	@ (8001ab4 <MX_GPIO_Init+0xf8>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a12:	4a28      	ldr	r2, [pc, #160]	@ (8001ab4 <MX_GPIO_Init+0xf8>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a1a:	4b26      	ldr	r3, [pc, #152]	@ (8001ab4 <MX_GPIO_Init+0xf8>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	607b      	str	r3, [r7, #4]
 8001a2a:	4b22      	ldr	r3, [pc, #136]	@ (8001ab4 <MX_GPIO_Init+0xf8>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	4a21      	ldr	r2, [pc, #132]	@ (8001ab4 <MX_GPIO_Init+0xf8>)
 8001a30:	f043 0302 	orr.w	r3, r3, #2
 8001a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a36:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab4 <MX_GPIO_Init+0xf8>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2101      	movs	r1, #1
 8001a46:	481c      	ldr	r0, [pc, #112]	@ (8001ab8 <MX_GPIO_Init+0xfc>)
 8001a48:	f001 ff94 	bl	8003974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	21c0      	movs	r1, #192	@ 0xc0
 8001a50:	481a      	ldr	r0, [pc, #104]	@ (8001abc <MX_GPIO_Init+0x100>)
 8001a52:	f001 ff8f 	bl	8003974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a56:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a5c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001a60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4812      	ldr	r0, [pc, #72]	@ (8001ab8 <MX_GPIO_Init+0xfc>)
 8001a6e:	f001 fded 	bl	800364c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a72:	2301      	movs	r3, #1
 8001a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a76:	2301      	movs	r3, #1
 8001a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a82:	f107 0314 	add.w	r3, r7, #20
 8001a86:	4619      	mov	r1, r3
 8001a88:	480b      	ldr	r0, [pc, #44]	@ (8001ab8 <MX_GPIO_Init+0xfc>)
 8001a8a:	f001 fddf 	bl	800364c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a8e:	23c0      	movs	r3, #192	@ 0xc0
 8001a90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a92:	2301      	movs	r3, #1
 8001a94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9e:	f107 0314 	add.w	r3, r7, #20
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4805      	ldr	r0, [pc, #20]	@ (8001abc <MX_GPIO_Init+0x100>)
 8001aa6:	f001 fdd1 	bl	800364c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001aaa:	bf00      	nop
 8001aac:	3728      	adds	r7, #40	@ 0x28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40020800 	.word	0x40020800
 8001abc:	40020000 	.word	0x40020000

08001ac0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *data, int len)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ad4:	68b9      	ldr	r1, [r7, #8]
 8001ad6:	4804      	ldr	r0, [pc, #16]	@ (8001ae8 <_write+0x28>)
 8001ad8:	f003 fdbe 	bl	8005658 <HAL_UART_Transmit>
    return len;
 8001adc:	687b      	ldr	r3, [r7, #4]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000398 	.word	0x20000398

08001aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af0:	b672      	cpsid	i
}
 8001af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001af4:	bf00      	nop
 8001af6:	e7fd      	b.n	8001af4 <Error_Handler+0x8>

08001af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	4b10      	ldr	r3, [pc, #64]	@ (8001b44 <HAL_MspInit+0x4c>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b06:	4a0f      	ldr	r2, [pc, #60]	@ (8001b44 <HAL_MspInit+0x4c>)
 8001b08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b44 <HAL_MspInit+0x4c>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	603b      	str	r3, [r7, #0]
 8001b1e:	4b09      	ldr	r3, [pc, #36]	@ (8001b44 <HAL_MspInit+0x4c>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	4a08      	ldr	r2, [pc, #32]	@ (8001b44 <HAL_MspInit+0x4c>)
 8001b24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b2a:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <HAL_MspInit+0x4c>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b32:	603b      	str	r3, [r7, #0]
 8001b34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b36:	2007      	movs	r0, #7
 8001b38:	f000 fff0 	bl	8002b1c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b3c:	bf00      	nop
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40023800 	.word	0x40023800

08001b48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	@ 0x28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a17      	ldr	r2, [pc, #92]	@ (8001bc4 <HAL_ADC_MspInit+0x7c>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d127      	bne.n	8001bba <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	4b16      	ldr	r3, [pc, #88]	@ (8001bc8 <HAL_ADC_MspInit+0x80>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b72:	4a15      	ldr	r2, [pc, #84]	@ (8001bc8 <HAL_ADC_MspInit+0x80>)
 8001b74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b78:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b7a:	4b13      	ldr	r3, [pc, #76]	@ (8001bc8 <HAL_ADC_MspInit+0x80>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc8 <HAL_ADC_MspInit+0x80>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8e:	4a0e      	ldr	r2, [pc, #56]	@ (8001bc8 <HAL_ADC_MspInit+0x80>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b96:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc8 <HAL_ADC_MspInit+0x80>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bae:	f107 0314 	add.w	r3, r7, #20
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4805      	ldr	r0, [pc, #20]	@ (8001bcc <HAL_ADC_MspInit+0x84>)
 8001bb6:	f001 fd49 	bl	800364c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001bba:	bf00      	nop
 8001bbc:	3728      	adds	r7, #40	@ 0x28
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40012000 	.word	0x40012000
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40020000 	.word	0x40020000

08001bd0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	@ 0x28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a2f      	ldr	r2, [pc, #188]	@ (8001cac <HAL_DAC_MspInit+0xdc>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d158      	bne.n	8001ca4 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	4b2e      	ldr	r3, [pc, #184]	@ (8001cb0 <HAL_DAC_MspInit+0xe0>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfa:	4a2d      	ldr	r2, [pc, #180]	@ (8001cb0 <HAL_DAC_MspInit+0xe0>)
 8001bfc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001c00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c02:	4b2b      	ldr	r3, [pc, #172]	@ (8001cb0 <HAL_DAC_MspInit+0xe0>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	4b27      	ldr	r3, [pc, #156]	@ (8001cb0 <HAL_DAC_MspInit+0xe0>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c16:	4a26      	ldr	r2, [pc, #152]	@ (8001cb0 <HAL_DAC_MspInit+0xe0>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c1e:	4b24      	ldr	r3, [pc, #144]	@ (8001cb0 <HAL_DAC_MspInit+0xe0>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001c2a:	2330      	movs	r3, #48	@ 0x30
 8001c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c36:	f107 0314 	add.w	r3, r7, #20
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	481d      	ldr	r0, [pc, #116]	@ (8001cb4 <HAL_DAC_MspInit+0xe4>)
 8001c3e:	f001 fd05 	bl	800364c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001c42:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb8 <HAL_DAC_MspInit+0xe8>)
 8001c44:	4a1d      	ldr	r2, [pc, #116]	@ (8001cbc <HAL_DAC_MspInit+0xec>)
 8001c46:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001c48:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb8 <HAL_DAC_MspInit+0xe8>)
 8001c4a:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001c4e:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c50:	4b19      	ldr	r3, [pc, #100]	@ (8001cb8 <HAL_DAC_MspInit+0xe8>)
 8001c52:	2240      	movs	r2, #64	@ 0x40
 8001c54:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c56:	4b18      	ldr	r3, [pc, #96]	@ (8001cb8 <HAL_DAC_MspInit+0xe8>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001c5c:	4b16      	ldr	r3, [pc, #88]	@ (8001cb8 <HAL_DAC_MspInit+0xe8>)
 8001c5e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c62:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c64:	4b14      	ldr	r3, [pc, #80]	@ (8001cb8 <HAL_DAC_MspInit+0xe8>)
 8001c66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c6a:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c6c:	4b12      	ldr	r3, [pc, #72]	@ (8001cb8 <HAL_DAC_MspInit+0xe8>)
 8001c6e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c72:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001c74:	4b10      	ldr	r3, [pc, #64]	@ (8001cb8 <HAL_DAC_MspInit+0xe8>)
 8001c76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c7a:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb8 <HAL_DAC_MspInit+0xe8>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c82:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb8 <HAL_DAC_MspInit+0xe8>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001c88:	480b      	ldr	r0, [pc, #44]	@ (8001cb8 <HAL_DAC_MspInit+0xe8>)
 8001c8a:	f001 f96f 	bl	8002f6c <HAL_DMA_Init>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8001c94:	f7ff ff2a 	bl	8001aec <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a07      	ldr	r2, [pc, #28]	@ (8001cb8 <HAL_DAC_MspInit+0xe8>)
 8001c9c:	609a      	str	r2, [r3, #8]
 8001c9e:	4a06      	ldr	r2, [pc, #24]	@ (8001cb8 <HAL_DAC_MspInit+0xe8>)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001ca4:	bf00      	nop
 8001ca6:	3728      	adds	r7, #40	@ 0x28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40007400 	.word	0x40007400
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40020000 	.word	0x40020000
 8001cb8:	20000260 	.word	0x20000260
 8001cbc:	40026088 	.word	0x40026088

08001cc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08c      	sub	sp, #48	@ 0x30
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 031c 	add.w	r3, r7, #28
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a31      	ldr	r2, [pc, #196]	@ (8001da4 <HAL_TIM_Base_MspInit+0xe4>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d10e      	bne.n	8001d00 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61bb      	str	r3, [r7, #24]
 8001ce6:	4b30      	ldr	r3, [pc, #192]	@ (8001da8 <HAL_TIM_Base_MspInit+0xe8>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cea:	4a2f      	ldr	r2, [pc, #188]	@ (8001da8 <HAL_TIM_Base_MspInit+0xe8>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cf2:	4b2d      	ldr	r3, [pc, #180]	@ (8001da8 <HAL_TIM_Base_MspInit+0xe8>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	61bb      	str	r3, [r7, #24]
 8001cfc:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001cfe:	e04c      	b.n	8001d9a <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM2)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d08:	d10e      	bne.n	8001d28 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	4b26      	ldr	r3, [pc, #152]	@ (8001da8 <HAL_TIM_Base_MspInit+0xe8>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d12:	4a25      	ldr	r2, [pc, #148]	@ (8001da8 <HAL_TIM_Base_MspInit+0xe8>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d1a:	4b23      	ldr	r3, [pc, #140]	@ (8001da8 <HAL_TIM_Base_MspInit+0xe8>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	617b      	str	r3, [r7, #20]
 8001d24:	697b      	ldr	r3, [r7, #20]
}
 8001d26:	e038      	b.n	8001d9a <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM3)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a1f      	ldr	r2, [pc, #124]	@ (8001dac <HAL_TIM_Base_MspInit+0xec>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d133      	bne.n	8001d9a <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	4b1c      	ldr	r3, [pc, #112]	@ (8001da8 <HAL_TIM_Base_MspInit+0xe8>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3a:	4a1b      	ldr	r2, [pc, #108]	@ (8001da8 <HAL_TIM_Base_MspInit+0xe8>)
 8001d3c:	f043 0302 	orr.w	r3, r3, #2
 8001d40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d42:	4b19      	ldr	r3, [pc, #100]	@ (8001da8 <HAL_TIM_Base_MspInit+0xe8>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	4b15      	ldr	r3, [pc, #84]	@ (8001da8 <HAL_TIM_Base_MspInit+0xe8>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d56:	4a14      	ldr	r2, [pc, #80]	@ (8001da8 <HAL_TIM_Base_MspInit+0xe8>)
 8001d58:	f043 0302 	orr.w	r3, r3, #2
 8001d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5e:	4b12      	ldr	r3, [pc, #72]	@ (8001da8 <HAL_TIM_Base_MspInit+0xe8>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d6a:	2310      	movs	r3, #16
 8001d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d76:	2300      	movs	r3, #0
 8001d78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7e:	f107 031c 	add.w	r3, r7, #28
 8001d82:	4619      	mov	r1, r3
 8001d84:	480a      	ldr	r0, [pc, #40]	@ (8001db0 <HAL_TIM_Base_MspInit+0xf0>)
 8001d86:	f001 fc61 	bl	800364c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	201d      	movs	r0, #29
 8001d90:	f000 fecf 	bl	8002b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d94:	201d      	movs	r0, #29
 8001d96:	f000 fee8 	bl	8002b6a <HAL_NVIC_EnableIRQ>
}
 8001d9a:	bf00      	nop
 8001d9c:	3730      	adds	r7, #48	@ 0x30
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40010000 	.word	0x40010000
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40000400 	.word	0x40000400
 8001db0:	40020400 	.word	0x40020400

08001db4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08a      	sub	sp, #40	@ 0x28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	f107 0314 	add.w	r3, r7, #20
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a19      	ldr	r2, [pc, #100]	@ (8001e38 <HAL_UART_MspInit+0x84>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d12b      	bne.n	8001e2e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	4b18      	ldr	r3, [pc, #96]	@ (8001e3c <HAL_UART_MspInit+0x88>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dde:	4a17      	ldr	r2, [pc, #92]	@ (8001e3c <HAL_UART_MspInit+0x88>)
 8001de0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001de4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001de6:	4b15      	ldr	r3, [pc, #84]	@ (8001e3c <HAL_UART_MspInit+0x88>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	4b11      	ldr	r3, [pc, #68]	@ (8001e3c <HAL_UART_MspInit+0x88>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfa:	4a10      	ldr	r2, [pc, #64]	@ (8001e3c <HAL_UART_MspInit+0x88>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e02:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <HAL_UART_MspInit+0x88>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e0e:	230c      	movs	r3, #12
 8001e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e12:	2302      	movs	r3, #2
 8001e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e1e:	2307      	movs	r3, #7
 8001e20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e22:	f107 0314 	add.w	r3, r7, #20
 8001e26:	4619      	mov	r1, r3
 8001e28:	4805      	ldr	r0, [pc, #20]	@ (8001e40 <HAL_UART_MspInit+0x8c>)
 8001e2a:	f001 fc0f 	bl	800364c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e2e:	bf00      	nop
 8001e30:	3728      	adds	r7, #40	@ 0x28
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40004400 	.word	0x40004400
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40020000 	.word	0x40020000

08001e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e48:	bf00      	nop
 8001e4a:	e7fd      	b.n	8001e48 <NMI_Handler+0x4>

08001e4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e50:	bf00      	nop
 8001e52:	e7fd      	b.n	8001e50 <HardFault_Handler+0x4>

08001e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e58:	bf00      	nop
 8001e5a:	e7fd      	b.n	8001e58 <MemManage_Handler+0x4>

08001e5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e60:	bf00      	nop
 8001e62:	e7fd      	b.n	8001e60 <BusFault_Handler+0x4>

08001e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e68:	bf00      	nop
 8001e6a:	e7fd      	b.n	8001e68 <UsageFault_Handler+0x4>

08001e6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e9a:	f000 f94f 	bl	800213c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001ea8:	4802      	ldr	r0, [pc, #8]	@ (8001eb4 <DMA1_Stream5_IRQHandler+0x10>)
 8001eaa:	f001 f965 	bl	8003178 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000260 	.word	0x20000260

08001eb8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ebc:	4802      	ldr	r0, [pc, #8]	@ (8001ec8 <TIM3_IRQHandler+0x10>)
 8001ebe:	f002 fd95 	bl	80049ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000350 	.word	0x20000350

08001ecc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return 1;
 8001ed0:	2301      	movs	r3, #1
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <_kill>:

int _kill(int pid, int sig)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ee6:	f004 ff69 	bl	8006dbc <__errno>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2216      	movs	r2, #22
 8001eee:	601a      	str	r2, [r3, #0]
  return -1;
 8001ef0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <_exit>:

void _exit (int status)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f04:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7ff ffe7 	bl	8001edc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f0e:	bf00      	nop
 8001f10:	e7fd      	b.n	8001f0e <_exit+0x12>

08001f12 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b086      	sub	sp, #24
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	60f8      	str	r0, [r7, #12]
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1e:	2300      	movs	r3, #0
 8001f20:	617b      	str	r3, [r7, #20]
 8001f22:	e00a      	b.n	8001f3a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f24:	f3af 8000 	nop.w
 8001f28:	4601      	mov	r1, r0
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	1c5a      	adds	r2, r3, #1
 8001f2e:	60ba      	str	r2, [r7, #8]
 8001f30:	b2ca      	uxtb	r2, r1
 8001f32:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	3301      	adds	r3, #1
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	dbf0      	blt.n	8001f24 <_read+0x12>
  }

  return len;
 8001f42:	687b      	ldr	r3, [r7, #4]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <_close>:
  }
  return len;
}

int _close(int file)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f74:	605a      	str	r2, [r3, #4]
  return 0;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <_isatty>:

int _isatty(int file)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f8c:	2301      	movs	r3, #1
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b085      	sub	sp, #20
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	60f8      	str	r0, [r7, #12]
 8001fa2:	60b9      	str	r1, [r7, #8]
 8001fa4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fbc:	4a14      	ldr	r2, [pc, #80]	@ (8002010 <_sbrk+0x5c>)
 8001fbe:	4b15      	ldr	r3, [pc, #84]	@ (8002014 <_sbrk+0x60>)
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fc8:	4b13      	ldr	r3, [pc, #76]	@ (8002018 <_sbrk+0x64>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d102      	bne.n	8001fd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fd0:	4b11      	ldr	r3, [pc, #68]	@ (8002018 <_sbrk+0x64>)
 8001fd2:	4a12      	ldr	r2, [pc, #72]	@ (800201c <_sbrk+0x68>)
 8001fd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fd6:	4b10      	ldr	r3, [pc, #64]	@ (8002018 <_sbrk+0x64>)
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4413      	add	r3, r2
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d207      	bcs.n	8001ff4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fe4:	f004 feea 	bl	8006dbc <__errno>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	220c      	movs	r2, #12
 8001fec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ff2:	e009      	b.n	8002008 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ff4:	4b08      	ldr	r3, [pc, #32]	@ (8002018 <_sbrk+0x64>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ffa:	4b07      	ldr	r3, [pc, #28]	@ (8002018 <_sbrk+0x64>)
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4413      	add	r3, r2
 8002002:	4a05      	ldr	r2, [pc, #20]	@ (8002018 <_sbrk+0x64>)
 8002004:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002006:	68fb      	ldr	r3, [r7, #12]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	20020000 	.word	0x20020000
 8002014:	00000400 	.word	0x00000400
 8002018:	200003e0 	.word	0x200003e0
 800201c:	20000538 	.word	0x20000538

08002020 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002024:	4b06      	ldr	r3, [pc, #24]	@ (8002040 <SystemInit+0x20>)
 8002026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800202a:	4a05      	ldr	r2, [pc, #20]	@ (8002040 <SystemInit+0x20>)
 800202c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002030:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002044:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800207c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002048:	f7ff ffea 	bl	8002020 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800204c:	480c      	ldr	r0, [pc, #48]	@ (8002080 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800204e:	490d      	ldr	r1, [pc, #52]	@ (8002084 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002050:	4a0d      	ldr	r2, [pc, #52]	@ (8002088 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002052:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002054:	e002      	b.n	800205c <LoopCopyDataInit>

08002056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800205a:	3304      	adds	r3, #4

0800205c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800205c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800205e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002060:	d3f9      	bcc.n	8002056 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002062:	4a0a      	ldr	r2, [pc, #40]	@ (800208c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002064:	4c0a      	ldr	r4, [pc, #40]	@ (8002090 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002068:	e001      	b.n	800206e <LoopFillZerobss>

0800206a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800206a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800206c:	3204      	adds	r2, #4

0800206e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800206e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002070:	d3fb      	bcc.n	800206a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002072:	f004 fea9 	bl	8006dc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002076:	f7ff f9a7 	bl	80013c8 <main>
  bx  lr    
 800207a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800207c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002084:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002088:	0800bba8 	.word	0x0800bba8
  ldr r2, =_sbss
 800208c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002090:	20000534 	.word	0x20000534

08002094 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002094:	e7fe      	b.n	8002094 <ADC_IRQHandler>
	...

08002098 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800209c:	4b0e      	ldr	r3, [pc, #56]	@ (80020d8 <HAL_Init+0x40>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a0d      	ldr	r2, [pc, #52]	@ (80020d8 <HAL_Init+0x40>)
 80020a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020a8:	4b0b      	ldr	r3, [pc, #44]	@ (80020d8 <HAL_Init+0x40>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a0a      	ldr	r2, [pc, #40]	@ (80020d8 <HAL_Init+0x40>)
 80020ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020b4:	4b08      	ldr	r3, [pc, #32]	@ (80020d8 <HAL_Init+0x40>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a07      	ldr	r2, [pc, #28]	@ (80020d8 <HAL_Init+0x40>)
 80020ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020c0:	2003      	movs	r0, #3
 80020c2:	f000 fd2b 	bl	8002b1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020c6:	2000      	movs	r0, #0
 80020c8:	f000 f808 	bl	80020dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020cc:	f7ff fd14 	bl	8001af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40023c00 	.word	0x40023c00

080020dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020e4:	4b12      	ldr	r3, [pc, #72]	@ (8002130 <HAL_InitTick+0x54>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	4b12      	ldr	r3, [pc, #72]	@ (8002134 <HAL_InitTick+0x58>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	4619      	mov	r1, r3
 80020ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 fd43 	bl	8002b86 <HAL_SYSTICK_Config>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e00e      	b.n	8002128 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b0f      	cmp	r3, #15
 800210e:	d80a      	bhi.n	8002126 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002110:	2200      	movs	r2, #0
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002118:	f000 fd0b 	bl	8002b32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800211c:	4a06      	ldr	r2, [pc, #24]	@ (8002138 <HAL_InitTick+0x5c>)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002122:	2300      	movs	r3, #0
 8002124:	e000      	b.n	8002128 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
}
 8002128:	4618      	mov	r0, r3
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	20000000 	.word	0x20000000
 8002134:	20000008 	.word	0x20000008
 8002138:	20000004 	.word	0x20000004

0800213c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002140:	4b06      	ldr	r3, [pc, #24]	@ (800215c <HAL_IncTick+0x20>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	461a      	mov	r2, r3
 8002146:	4b06      	ldr	r3, [pc, #24]	@ (8002160 <HAL_IncTick+0x24>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4413      	add	r3, r2
 800214c:	4a04      	ldr	r2, [pc, #16]	@ (8002160 <HAL_IncTick+0x24>)
 800214e:	6013      	str	r3, [r2, #0]
}
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	20000008 	.word	0x20000008
 8002160:	200003e4 	.word	0x200003e4

08002164 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return uwTick;
 8002168:	4b03      	ldr	r3, [pc, #12]	@ (8002178 <HAL_GetTick+0x14>)
 800216a:	681b      	ldr	r3, [r3, #0]
}
 800216c:	4618      	mov	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	200003e4 	.word	0x200003e4

0800217c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002184:	f7ff ffee 	bl	8002164 <HAL_GetTick>
 8002188:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002194:	d005      	beq.n	80021a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002196:	4b0a      	ldr	r3, [pc, #40]	@ (80021c0 <HAL_Delay+0x44>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	461a      	mov	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4413      	add	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021a2:	bf00      	nop
 80021a4:	f7ff ffde 	bl	8002164 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d8f7      	bhi.n	80021a4 <HAL_Delay+0x28>
  {
  }
}
 80021b4:	bf00      	nop
 80021b6:	bf00      	nop
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000008 	.word	0x20000008

080021c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021cc:	2300      	movs	r3, #0
 80021ce:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e033      	b.n	8002242 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d109      	bne.n	80021f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7ff fcb0 	bl	8001b48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fa:	f003 0310 	and.w	r3, r3, #16
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d118      	bne.n	8002234 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002206:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800220a:	f023 0302 	bic.w	r3, r3, #2
 800220e:	f043 0202 	orr.w	r2, r3, #2
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 fab4 	bl	8002784 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002226:	f023 0303 	bic.w	r3, r3, #3
 800222a:	f043 0201 	orr.w	r2, r3, #1
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	641a      	str	r2, [r3, #64]	@ 0x40
 8002232:	e001      	b.n	8002238 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002240:	7bfb      	ldrb	r3, [r7, #15]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800225e:	2b01      	cmp	r3, #1
 8002260:	d101      	bne.n	8002266 <HAL_ADC_Start+0x1a>
 8002262:	2302      	movs	r3, #2
 8002264:	e0b2      	b.n	80023cc <HAL_ADC_Start+0x180>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b01      	cmp	r3, #1
 800227a:	d018      	beq.n	80022ae <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 0201 	orr.w	r2, r2, #1
 800228a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800228c:	4b52      	ldr	r3, [pc, #328]	@ (80023d8 <HAL_ADC_Start+0x18c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a52      	ldr	r2, [pc, #328]	@ (80023dc <HAL_ADC_Start+0x190>)
 8002292:	fba2 2303 	umull	r2, r3, r2, r3
 8002296:	0c9a      	lsrs	r2, r3, #18
 8002298:	4613      	mov	r3, r2
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	4413      	add	r3, r2
 800229e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80022a0:	e002      	b.n	80022a8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	3b01      	subs	r3, #1
 80022a6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f9      	bne.n	80022a2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d17a      	bne.n	80023b2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80022c4:	f023 0301 	bic.w	r3, r3, #1
 80022c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d007      	beq.n	80022ee <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80022e6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022fa:	d106      	bne.n	800230a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002300:	f023 0206 	bic.w	r2, r3, #6
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	645a      	str	r2, [r3, #68]	@ 0x44
 8002308:	e002      	b.n	8002310 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002318:	4b31      	ldr	r3, [pc, #196]	@ (80023e0 <HAL_ADC_Start+0x194>)
 800231a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002324:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f003 031f 	and.w	r3, r3, #31
 800232e:	2b00      	cmp	r3, #0
 8002330:	d12a      	bne.n	8002388 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a2b      	ldr	r2, [pc, #172]	@ (80023e4 <HAL_ADC_Start+0x198>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d015      	beq.n	8002368 <HAL_ADC_Start+0x11c>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a29      	ldr	r2, [pc, #164]	@ (80023e8 <HAL_ADC_Start+0x19c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d105      	bne.n	8002352 <HAL_ADC_Start+0x106>
 8002346:	4b26      	ldr	r3, [pc, #152]	@ (80023e0 <HAL_ADC_Start+0x194>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f003 031f 	and.w	r3, r3, #31
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00a      	beq.n	8002368 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a25      	ldr	r2, [pc, #148]	@ (80023ec <HAL_ADC_Start+0x1a0>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d136      	bne.n	80023ca <HAL_ADC_Start+0x17e>
 800235c:	4b20      	ldr	r3, [pc, #128]	@ (80023e0 <HAL_ADC_Start+0x194>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 0310 	and.w	r3, r3, #16
 8002364:	2b00      	cmp	r3, #0
 8002366:	d130      	bne.n	80023ca <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d129      	bne.n	80023ca <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002384:	609a      	str	r2, [r3, #8]
 8002386:	e020      	b.n	80023ca <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a15      	ldr	r2, [pc, #84]	@ (80023e4 <HAL_ADC_Start+0x198>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d11b      	bne.n	80023ca <HAL_ADC_Start+0x17e>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d114      	bne.n	80023ca <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	e00b      	b.n	80023ca <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b6:	f043 0210 	orr.w	r2, r3, #16
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c2:	f043 0201 	orr.w	r2, r3, #1
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3714      	adds	r7, #20
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	20000000 	.word	0x20000000
 80023dc:	431bde83 	.word	0x431bde83
 80023e0:	40012300 	.word	0x40012300
 80023e4:	40012000 	.word	0x40012000
 80023e8:	40012100 	.word	0x40012100
 80023ec:	40012200 	.word	0x40012200

080023f0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002408:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800240c:	d113      	bne.n	8002436 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002418:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800241c:	d10b      	bne.n	8002436 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002422:	f043 0220 	orr.w	r2, r3, #32
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e063      	b.n	80024fe <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002436:	f7ff fe95 	bl	8002164 <HAL_GetTick>
 800243a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800243c:	e021      	b.n	8002482 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002444:	d01d      	beq.n	8002482 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d007      	beq.n	800245c <HAL_ADC_PollForConversion+0x6c>
 800244c:	f7ff fe8a 	bl	8002164 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	429a      	cmp	r2, r3
 800245a:	d212      	bcs.n	8002482 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b02      	cmp	r3, #2
 8002468:	d00b      	beq.n	8002482 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246e:	f043 0204 	orr.w	r2, r3, #4
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e03d      	b.n	80024fe <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b02      	cmp	r3, #2
 800248e:	d1d6      	bne.n	800243e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f06f 0212 	mvn.w	r2, #18
 8002498:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d123      	bne.n	80024fc <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d11f      	bne.n	80024fc <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d006      	beq.n	80024d8 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d111      	bne.n	80024fc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d105      	bne.n	80024fc <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f4:	f043 0201 	orr.w	r2, r3, #1
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002514:	4618      	mov	r0, r3
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800252a:	2300      	movs	r3, #0
 800252c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002534:	2b01      	cmp	r3, #1
 8002536:	d101      	bne.n	800253c <HAL_ADC_ConfigChannel+0x1c>
 8002538:	2302      	movs	r3, #2
 800253a:	e113      	b.n	8002764 <HAL_ADC_ConfigChannel+0x244>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2b09      	cmp	r3, #9
 800254a:	d925      	bls.n	8002598 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68d9      	ldr	r1, [r3, #12]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	b29b      	uxth	r3, r3
 8002558:	461a      	mov	r2, r3
 800255a:	4613      	mov	r3, r2
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	4413      	add	r3, r2
 8002560:	3b1e      	subs	r3, #30
 8002562:	2207      	movs	r2, #7
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43da      	mvns	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	400a      	ands	r2, r1
 8002570:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68d9      	ldr	r1, [r3, #12]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	b29b      	uxth	r3, r3
 8002582:	4618      	mov	r0, r3
 8002584:	4603      	mov	r3, r0
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	4403      	add	r3, r0
 800258a:	3b1e      	subs	r3, #30
 800258c:	409a      	lsls	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	430a      	orrs	r2, r1
 8002594:	60da      	str	r2, [r3, #12]
 8002596:	e022      	b.n	80025de <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6919      	ldr	r1, [r3, #16]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	461a      	mov	r2, r3
 80025a6:	4613      	mov	r3, r2
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	4413      	add	r3, r2
 80025ac:	2207      	movs	r2, #7
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43da      	mvns	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	400a      	ands	r2, r1
 80025ba:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6919      	ldr	r1, [r3, #16]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	4618      	mov	r0, r3
 80025ce:	4603      	mov	r3, r0
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	4403      	add	r3, r0
 80025d4:	409a      	lsls	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	430a      	orrs	r2, r1
 80025dc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b06      	cmp	r3, #6
 80025e4:	d824      	bhi.n	8002630 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	3b05      	subs	r3, #5
 80025f8:	221f      	movs	r2, #31
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	43da      	mvns	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	400a      	ands	r2, r1
 8002606:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	b29b      	uxth	r3, r3
 8002614:	4618      	mov	r0, r3
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	3b05      	subs	r3, #5
 8002622:	fa00 f203 	lsl.w	r2, r0, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	635a      	str	r2, [r3, #52]	@ 0x34
 800262e:	e04c      	b.n	80026ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2b0c      	cmp	r3, #12
 8002636:	d824      	bhi.n	8002682 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	4613      	mov	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	3b23      	subs	r3, #35	@ 0x23
 800264a:	221f      	movs	r2, #31
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43da      	mvns	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	400a      	ands	r2, r1
 8002658:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	b29b      	uxth	r3, r3
 8002666:	4618      	mov	r0, r3
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	4613      	mov	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4413      	add	r3, r2
 8002672:	3b23      	subs	r3, #35	@ 0x23
 8002674:	fa00 f203 	lsl.w	r2, r0, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002680:	e023      	b.n	80026ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4413      	add	r3, r2
 8002692:	3b41      	subs	r3, #65	@ 0x41
 8002694:	221f      	movs	r2, #31
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43da      	mvns	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	400a      	ands	r2, r1
 80026a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	4618      	mov	r0, r3
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	3b41      	subs	r3, #65	@ 0x41
 80026be:	fa00 f203 	lsl.w	r2, r0, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026ca:	4b29      	ldr	r3, [pc, #164]	@ (8002770 <HAL_ADC_ConfigChannel+0x250>)
 80026cc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a28      	ldr	r2, [pc, #160]	@ (8002774 <HAL_ADC_ConfigChannel+0x254>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d10f      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x1d8>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b12      	cmp	r3, #18
 80026de:	d10b      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a1d      	ldr	r2, [pc, #116]	@ (8002774 <HAL_ADC_ConfigChannel+0x254>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d12b      	bne.n	800275a <HAL_ADC_ConfigChannel+0x23a>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a1c      	ldr	r2, [pc, #112]	@ (8002778 <HAL_ADC_ConfigChannel+0x258>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d003      	beq.n	8002714 <HAL_ADC_ConfigChannel+0x1f4>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b11      	cmp	r3, #17
 8002712:	d122      	bne.n	800275a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a11      	ldr	r2, [pc, #68]	@ (8002778 <HAL_ADC_ConfigChannel+0x258>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d111      	bne.n	800275a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002736:	4b11      	ldr	r3, [pc, #68]	@ (800277c <HAL_ADC_ConfigChannel+0x25c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a11      	ldr	r2, [pc, #68]	@ (8002780 <HAL_ADC_ConfigChannel+0x260>)
 800273c:	fba2 2303 	umull	r2, r3, r2, r3
 8002740:	0c9a      	lsrs	r2, r3, #18
 8002742:	4613      	mov	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800274c:	e002      	b.n	8002754 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	3b01      	subs	r3, #1
 8002752:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1f9      	bne.n	800274e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	40012300 	.word	0x40012300
 8002774:	40012000 	.word	0x40012000
 8002778:	10000012 	.word	0x10000012
 800277c:	20000000 	.word	0x20000000
 8002780:	431bde83 	.word	0x431bde83

08002784 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800278c:	4b79      	ldr	r3, [pc, #484]	@ (8002974 <ADC_Init+0x1f0>)
 800278e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	431a      	orrs	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6859      	ldr	r1, [r3, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	021a      	lsls	r2, r3, #8
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80027dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6859      	ldr	r1, [r3, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6899      	ldr	r1, [r3, #8]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002816:	4a58      	ldr	r2, [pc, #352]	@ (8002978 <ADC_Init+0x1f4>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d022      	beq.n	8002862 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800282a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6899      	ldr	r1, [r3, #8]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800284c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6899      	ldr	r1, [r3, #8]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	e00f      	b.n	8002882 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002870:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002880:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0202 	bic.w	r2, r2, #2
 8002890:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6899      	ldr	r1, [r3, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	7e1b      	ldrb	r3, [r3, #24]
 800289c:	005a      	lsls	r2, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d01b      	beq.n	80028e8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028be:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80028ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6859      	ldr	r1, [r3, #4]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028da:	3b01      	subs	r3, #1
 80028dc:	035a      	lsls	r2, r3, #13
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	e007      	b.n	80028f8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028f6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002906:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	3b01      	subs	r3, #1
 8002914:	051a      	lsls	r2, r3, #20
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800292c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6899      	ldr	r1, [r3, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800293a:	025a      	lsls	r2, r3, #9
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002952:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6899      	ldr	r1, [r3, #8]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	029a      	lsls	r2, r3, #10
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	609a      	str	r2, [r3, #8]
}
 8002968:	bf00      	nop
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	40012300 	.word	0x40012300
 8002978:	0f000001 	.word	0x0f000001

0800297c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800298c:	4b0c      	ldr	r3, [pc, #48]	@ (80029c0 <__NVIC_SetPriorityGrouping+0x44>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002998:	4013      	ands	r3, r2
 800299a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ae:	4a04      	ldr	r2, [pc, #16]	@ (80029c0 <__NVIC_SetPriorityGrouping+0x44>)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	60d3      	str	r3, [r2, #12]
}
 80029b4:	bf00      	nop
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	e000ed00 	.word	0xe000ed00

080029c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029c8:	4b04      	ldr	r3, [pc, #16]	@ (80029dc <__NVIC_GetPriorityGrouping+0x18>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	0a1b      	lsrs	r3, r3, #8
 80029ce:	f003 0307 	and.w	r3, r3, #7
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	e000ed00 	.word	0xe000ed00

080029e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	db0b      	blt.n	8002a0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029f2:	79fb      	ldrb	r3, [r7, #7]
 80029f4:	f003 021f 	and.w	r2, r3, #31
 80029f8:	4907      	ldr	r1, [pc, #28]	@ (8002a18 <__NVIC_EnableIRQ+0x38>)
 80029fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fe:	095b      	lsrs	r3, r3, #5
 8002a00:	2001      	movs	r0, #1
 8002a02:	fa00 f202 	lsl.w	r2, r0, r2
 8002a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	e000e100 	.word	0xe000e100

08002a1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	4603      	mov	r3, r0
 8002a24:	6039      	str	r1, [r7, #0]
 8002a26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	db0a      	blt.n	8002a46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	490c      	ldr	r1, [pc, #48]	@ (8002a68 <__NVIC_SetPriority+0x4c>)
 8002a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3a:	0112      	lsls	r2, r2, #4
 8002a3c:	b2d2      	uxtb	r2, r2
 8002a3e:	440b      	add	r3, r1
 8002a40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a44:	e00a      	b.n	8002a5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	4908      	ldr	r1, [pc, #32]	@ (8002a6c <__NVIC_SetPriority+0x50>)
 8002a4c:	79fb      	ldrb	r3, [r7, #7]
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	3b04      	subs	r3, #4
 8002a54:	0112      	lsls	r2, r2, #4
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	440b      	add	r3, r1
 8002a5a:	761a      	strb	r2, [r3, #24]
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	e000e100 	.word	0xe000e100
 8002a6c:	e000ed00 	.word	0xe000ed00

08002a70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b089      	sub	sp, #36	@ 0x24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	f1c3 0307 	rsb	r3, r3, #7
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	bf28      	it	cs
 8002a8e:	2304      	movcs	r3, #4
 8002a90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	3304      	adds	r3, #4
 8002a96:	2b06      	cmp	r3, #6
 8002a98:	d902      	bls.n	8002aa0 <NVIC_EncodePriority+0x30>
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	3b03      	subs	r3, #3
 8002a9e:	e000      	b.n	8002aa2 <NVIC_EncodePriority+0x32>
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	43da      	mvns	r2, r3
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	401a      	ands	r2, r3
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ab8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac2:	43d9      	mvns	r1, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac8:	4313      	orrs	r3, r2
         );
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3724      	adds	r7, #36	@ 0x24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
	...

08002ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ae8:	d301      	bcc.n	8002aee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aea:	2301      	movs	r3, #1
 8002aec:	e00f      	b.n	8002b0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aee:	4a0a      	ldr	r2, [pc, #40]	@ (8002b18 <SysTick_Config+0x40>)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3b01      	subs	r3, #1
 8002af4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002af6:	210f      	movs	r1, #15
 8002af8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002afc:	f7ff ff8e 	bl	8002a1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b00:	4b05      	ldr	r3, [pc, #20]	@ (8002b18 <SysTick_Config+0x40>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b06:	4b04      	ldr	r3, [pc, #16]	@ (8002b18 <SysTick_Config+0x40>)
 8002b08:	2207      	movs	r2, #7
 8002b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	e000e010 	.word	0xe000e010

08002b1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f7ff ff29 	bl	800297c <__NVIC_SetPriorityGrouping>
}
 8002b2a:	bf00      	nop
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b086      	sub	sp, #24
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	4603      	mov	r3, r0
 8002b3a:	60b9      	str	r1, [r7, #8]
 8002b3c:	607a      	str	r2, [r7, #4]
 8002b3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b44:	f7ff ff3e 	bl	80029c4 <__NVIC_GetPriorityGrouping>
 8002b48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	68b9      	ldr	r1, [r7, #8]
 8002b4e:	6978      	ldr	r0, [r7, #20]
 8002b50:	f7ff ff8e 	bl	8002a70 <NVIC_EncodePriority>
 8002b54:	4602      	mov	r2, r0
 8002b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff ff5d 	bl	8002a1c <__NVIC_SetPriority>
}
 8002b62:	bf00      	nop
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b082      	sub	sp, #8
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	4603      	mov	r3, r0
 8002b72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff ff31 	bl	80029e0 <__NVIC_EnableIRQ>
}
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b082      	sub	sp, #8
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7ff ffa2 	bl	8002ad8 <SysTick_Config>
 8002b94:	4603      	mov	r3, r0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b082      	sub	sp, #8
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e014      	b.n	8002bda <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	791b      	ldrb	r3, [r3, #4]
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d105      	bne.n	8002bc6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f7ff f805 	bl	8001bd0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2202      	movs	r2, #2
 8002bca:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
	...

08002be4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
 8002bf0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e0a2      	b.n	8002d46 <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	795b      	ldrb	r3, [r3, #5]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d101      	bne.n	8002c0c <HAL_DAC_Start_DMA+0x28>
 8002c08:	2302      	movs	r3, #2
 8002c0a:	e09c      	b.n	8002d46 <HAL_DAC_Start_DMA+0x162>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2202      	movs	r2, #2
 8002c16:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d129      	bne.n	8002c72 <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	4a4b      	ldr	r2, [pc, #300]	@ (8002d50 <HAL_DAC_Start_DMA+0x16c>)
 8002c24:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	4a4a      	ldr	r2, [pc, #296]	@ (8002d54 <HAL_DAC_Start_DMA+0x170>)
 8002c2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	4a49      	ldr	r2, [pc, #292]	@ (8002d58 <HAL_DAC_Start_DMA+0x174>)
 8002c34:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002c44:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d003      	beq.n	8002c54 <HAL_DAC_Start_DMA+0x70>
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d005      	beq.n	8002c5e <HAL_DAC_Start_DMA+0x7a>
 8002c52:	e009      	b.n	8002c68 <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	3308      	adds	r3, #8
 8002c5a:	613b      	str	r3, [r7, #16]
        break;
 8002c5c:	e033      	b.n	8002cc6 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	330c      	adds	r3, #12
 8002c64:	613b      	str	r3, [r7, #16]
        break;
 8002c66:	e02e      	b.n	8002cc6 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	3310      	adds	r3, #16
 8002c6e:	613b      	str	r3, [r7, #16]
        break;
 8002c70:	e029      	b.n	8002cc6 <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	4a39      	ldr	r2, [pc, #228]	@ (8002d5c <HAL_DAC_Start_DMA+0x178>)
 8002c78:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	4a38      	ldr	r2, [pc, #224]	@ (8002d60 <HAL_DAC_Start_DMA+0x17c>)
 8002c80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	4a37      	ldr	r2, [pc, #220]	@ (8002d64 <HAL_DAC_Start_DMA+0x180>)
 8002c88:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002c98:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <HAL_DAC_Start_DMA+0xc4>
 8002ca0:	6a3b      	ldr	r3, [r7, #32]
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d005      	beq.n	8002cb2 <HAL_DAC_Start_DMA+0xce>
 8002ca6:	e009      	b.n	8002cbc <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	3314      	adds	r3, #20
 8002cae:	613b      	str	r3, [r7, #16]
        break;
 8002cb0:	e009      	b.n	8002cc6 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	3318      	adds	r3, #24
 8002cb8:	613b      	str	r3, [r7, #16]
        break;
 8002cba:	e004      	b.n	8002cc6 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	331c      	adds	r3, #28
 8002cc2:	613b      	str	r3, [r7, #16]
        break;
 8002cc4:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d111      	bne.n	8002cf0 <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002cda:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6898      	ldr	r0, [r3, #8]
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	f000 f9ef 	bl	80030c8 <HAL_DMA_Start_IT>
 8002cea:	4603      	mov	r3, r0
 8002cec:	75fb      	strb	r3, [r7, #23]
 8002cee:	e010      	b.n	8002d12 <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002cfe:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	68d8      	ldr	r0, [r3, #12]
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	f000 f9dd 	bl	80030c8 <HAL_DMA_Start_IT>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002d18:	7dfb      	ldrb	r3, [r7, #23]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10c      	bne.n	8002d38 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6819      	ldr	r1, [r3, #0]
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	f003 0310 	and.w	r3, r3, #16
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	409a      	lsls	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	e005      	b.n	8002d44 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	f043 0204 	orr.w	r2, r3, #4
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002d44:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3718      	adds	r7, #24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	08002e57 	.word	0x08002e57
 8002d54:	08002e79 	.word	0x08002e79
 8002d58:	08002e95 	.word	0x08002e95
 8002d5c:	08002eff 	.word	0x08002eff
 8002d60:	08002f21 	.word	0x08002f21
 8002d64:	08002f3d 	.word	0x08002f3d

08002d68 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b089      	sub	sp, #36	@ 0x24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002db0:	2300      	movs	r3, #0
 8002db2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d002      	beq.n	8002dc0 <HAL_DAC_ConfigChannel+0x1c>
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e042      	b.n	8002e4a <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	795b      	ldrb	r3, [r3, #5]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <HAL_DAC_ConfigChannel+0x2c>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e03c      	b.n	8002e4a <HAL_DAC_ConfigChannel+0xa6>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2202      	movs	r2, #2
 8002dda:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f003 0310 	and.w	r3, r3, #16
 8002dea:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002df2:	43db      	mvns	r3, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4013      	ands	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f003 0310 	and.w	r3, r3, #16
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6819      	ldr	r1, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f003 0310 	and.w	r3, r3, #16
 8002e2c:	22c0      	movs	r2, #192	@ 0xc0
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43da      	mvns	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	400a      	ands	r2, r1
 8002e3a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002e48:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3724      	adds	r7, #36	@ 0x24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b084      	sub	sp, #16
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e62:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f7ff ff7f 	bl	8002d68 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	711a      	strb	r2, [r3, #4]
}
 8002e70:	bf00      	nop
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e84:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f7ff ff78 	bl	8002d7c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002e8c:	bf00      	nop
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ea0:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	f043 0204 	orr.w	r2, r3, #4
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f7ff ff6e 	bl	8002d90 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	711a      	strb	r2, [r3, #4]
}
 8002eba:	bf00      	nop
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b083      	sub	sp, #12
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b084      	sub	sp, #16
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f0a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f7ff ffd8 	bl	8002ec2 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2201      	movs	r2, #1
 8002f16:	711a      	strb	r2, [r3, #4]
}
 8002f18:	bf00      	nop
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f2c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f7ff ffd1 	bl	8002ed6 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002f34:	bf00      	nop
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f48:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	f043 0204 	orr.w	r2, r3, #4
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f7ff ffc7 	bl	8002eea <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	711a      	strb	r2, [r3, #4]
}
 8002f62:	bf00      	nop
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
	...

08002f6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f78:	f7ff f8f4 	bl	8002164 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e099      	b.n	80030bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 0201 	bic.w	r2, r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fa8:	e00f      	b.n	8002fca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002faa:	f7ff f8db 	bl	8002164 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b05      	cmp	r3, #5
 8002fb6:	d908      	bls.n	8002fca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2203      	movs	r2, #3
 8002fc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e078      	b.n	80030bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1e8      	bne.n	8002faa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	4b38      	ldr	r3, [pc, #224]	@ (80030c4 <HAL_DMA_Init+0x158>)
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ff6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003002:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800300e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	4313      	orrs	r3, r2
 800301a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003020:	2b04      	cmp	r3, #4
 8003022:	d107      	bne.n	8003034 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302c:	4313      	orrs	r3, r2
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	4313      	orrs	r3, r2
 8003032:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	f023 0307 	bic.w	r3, r3, #7
 800304a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	4313      	orrs	r3, r2
 8003054:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305a:	2b04      	cmp	r3, #4
 800305c:	d117      	bne.n	800308e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	4313      	orrs	r3, r2
 8003066:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00e      	beq.n	800308e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 fa6f 	bl	8003554 <DMA_CheckFifoParam>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2240      	movs	r2, #64	@ 0x40
 8003080:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800308a:	2301      	movs	r3, #1
 800308c:	e016      	b.n	80030bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 fa26 	bl	80034e8 <DMA_CalcBaseAndBitshift>
 800309c:	4603      	mov	r3, r0
 800309e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a4:	223f      	movs	r2, #63	@ 0x3f
 80030a6:	409a      	lsls	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	f010803f 	.word	0xf010803f

080030c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
 80030d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030d6:	2300      	movs	r3, #0
 80030d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d101      	bne.n	80030ee <HAL_DMA_Start_IT+0x26>
 80030ea:	2302      	movs	r3, #2
 80030ec:	e040      	b.n	8003170 <HAL_DMA_Start_IT+0xa8>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d12f      	bne.n	8003162 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2202      	movs	r2, #2
 8003106:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	68b9      	ldr	r1, [r7, #8]
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 f9b8 	bl	800348c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003120:	223f      	movs	r2, #63	@ 0x3f
 8003122:	409a      	lsls	r2, r3
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0216 	orr.w	r2, r2, #22
 8003136:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313c:	2b00      	cmp	r3, #0
 800313e:	d007      	beq.n	8003150 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0208 	orr.w	r2, r2, #8
 800314e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 0201 	orr.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	e005      	b.n	800316e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800316a:	2302      	movs	r3, #2
 800316c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800316e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003180:	2300      	movs	r3, #0
 8003182:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003184:	4b8e      	ldr	r3, [pc, #568]	@ (80033c0 <HAL_DMA_IRQHandler+0x248>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a8e      	ldr	r2, [pc, #568]	@ (80033c4 <HAL_DMA_IRQHandler+0x24c>)
 800318a:	fba2 2303 	umull	r2, r3, r2, r3
 800318e:	0a9b      	lsrs	r3, r3, #10
 8003190:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003196:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a2:	2208      	movs	r2, #8
 80031a4:	409a      	lsls	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	4013      	ands	r3, r2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d01a      	beq.n	80031e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d013      	beq.n	80031e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0204 	bic.w	r2, r2, #4
 80031ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d0:	2208      	movs	r2, #8
 80031d2:	409a      	lsls	r2, r3
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031dc:	f043 0201 	orr.w	r2, r3, #1
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e8:	2201      	movs	r2, #1
 80031ea:	409a      	lsls	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4013      	ands	r3, r2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d012      	beq.n	800321a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00b      	beq.n	800321a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003206:	2201      	movs	r2, #1
 8003208:	409a      	lsls	r2, r3
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003212:	f043 0202 	orr.w	r2, r3, #2
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800321e:	2204      	movs	r2, #4
 8003220:	409a      	lsls	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	4013      	ands	r3, r2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d012      	beq.n	8003250 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00b      	beq.n	8003250 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800323c:	2204      	movs	r2, #4
 800323e:	409a      	lsls	r2, r3
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003248:	f043 0204 	orr.w	r2, r3, #4
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003254:	2210      	movs	r2, #16
 8003256:	409a      	lsls	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4013      	ands	r3, r2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d043      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	2b00      	cmp	r3, #0
 800326c:	d03c      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003272:	2210      	movs	r2, #16
 8003274:	409a      	lsls	r2, r3
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d018      	beq.n	80032ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d108      	bne.n	80032a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329a:	2b00      	cmp	r3, #0
 800329c:	d024      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	4798      	blx	r3
 80032a6:	e01f      	b.n	80032e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d01b      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	4798      	blx	r3
 80032b8:	e016      	b.n	80032e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d107      	bne.n	80032d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0208 	bic.w	r2, r2, #8
 80032d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ec:	2220      	movs	r2, #32
 80032ee:	409a      	lsls	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4013      	ands	r3, r2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 808f 	beq.w	8003418 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0310 	and.w	r3, r3, #16
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 8087 	beq.w	8003418 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800330e:	2220      	movs	r2, #32
 8003310:	409a      	lsls	r2, r3
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b05      	cmp	r3, #5
 8003320:	d136      	bne.n	8003390 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0216 	bic.w	r2, r2, #22
 8003330:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	695a      	ldr	r2, [r3, #20]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003340:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003346:	2b00      	cmp	r3, #0
 8003348:	d103      	bne.n	8003352 <HAL_DMA_IRQHandler+0x1da>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800334e:	2b00      	cmp	r3, #0
 8003350:	d007      	beq.n	8003362 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0208 	bic.w	r2, r2, #8
 8003360:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003366:	223f      	movs	r2, #63	@ 0x3f
 8003368:	409a      	lsls	r2, r3
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003382:	2b00      	cmp	r3, #0
 8003384:	d07e      	beq.n	8003484 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	4798      	blx	r3
        }
        return;
 800338e:	e079      	b.n	8003484 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d01d      	beq.n	80033da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10d      	bne.n	80033c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d031      	beq.n	8003418 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	4798      	blx	r3
 80033bc:	e02c      	b.n	8003418 <HAL_DMA_IRQHandler+0x2a0>
 80033be:	bf00      	nop
 80033c0:	20000000 	.word	0x20000000
 80033c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d023      	beq.n	8003418 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	4798      	blx	r3
 80033d8:	e01e      	b.n	8003418 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10f      	bne.n	8003408 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0210 	bic.w	r2, r2, #16
 80033f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800341c:	2b00      	cmp	r3, #0
 800341e:	d032      	beq.n	8003486 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b00      	cmp	r3, #0
 800342a:	d022      	beq.n	8003472 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2205      	movs	r2, #5
 8003430:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0201 	bic.w	r2, r2, #1
 8003442:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	3301      	adds	r3, #1
 8003448:	60bb      	str	r3, [r7, #8]
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	429a      	cmp	r2, r3
 800344e:	d307      	bcc.n	8003460 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f2      	bne.n	8003444 <HAL_DMA_IRQHandler+0x2cc>
 800345e:	e000      	b.n	8003462 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003460:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003476:	2b00      	cmp	r3, #0
 8003478:	d005      	beq.n	8003486 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	4798      	blx	r3
 8003482:	e000      	b.n	8003486 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003484:	bf00      	nop
    }
  }
}
 8003486:	3718      	adds	r7, #24
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
 8003498:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80034a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	2b40      	cmp	r3, #64	@ 0x40
 80034b8:	d108      	bne.n	80034cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80034ca:	e007      	b.n	80034dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	60da      	str	r2, [r3, #12]
}
 80034dc:	bf00      	nop
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	3b10      	subs	r3, #16
 80034f8:	4a14      	ldr	r2, [pc, #80]	@ (800354c <DMA_CalcBaseAndBitshift+0x64>)
 80034fa:	fba2 2303 	umull	r2, r3, r2, r3
 80034fe:	091b      	lsrs	r3, r3, #4
 8003500:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003502:	4a13      	ldr	r2, [pc, #76]	@ (8003550 <DMA_CalcBaseAndBitshift+0x68>)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4413      	add	r3, r2
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	461a      	mov	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2b03      	cmp	r3, #3
 8003514:	d909      	bls.n	800352a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800351e:	f023 0303 	bic.w	r3, r3, #3
 8003522:	1d1a      	adds	r2, r3, #4
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	659a      	str	r2, [r3, #88]	@ 0x58
 8003528:	e007      	b.n	800353a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003532:	f023 0303 	bic.w	r3, r3, #3
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800353e:	4618      	mov	r0, r3
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	aaaaaaab 	.word	0xaaaaaaab
 8003550:	0800b58c 	.word	0x0800b58c

08003554 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800355c:	2300      	movs	r3, #0
 800355e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003564:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d11f      	bne.n	80035ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	2b03      	cmp	r3, #3
 8003572:	d856      	bhi.n	8003622 <DMA_CheckFifoParam+0xce>
 8003574:	a201      	add	r2, pc, #4	@ (adr r2, 800357c <DMA_CheckFifoParam+0x28>)
 8003576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357a:	bf00      	nop
 800357c:	0800358d 	.word	0x0800358d
 8003580:	0800359f 	.word	0x0800359f
 8003584:	0800358d 	.word	0x0800358d
 8003588:	08003623 	.word	0x08003623
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003590:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d046      	beq.n	8003626 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800359c:	e043      	b.n	8003626 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80035a6:	d140      	bne.n	800362a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035ac:	e03d      	b.n	800362a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035b6:	d121      	bne.n	80035fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2b03      	cmp	r3, #3
 80035bc:	d837      	bhi.n	800362e <DMA_CheckFifoParam+0xda>
 80035be:	a201      	add	r2, pc, #4	@ (adr r2, 80035c4 <DMA_CheckFifoParam+0x70>)
 80035c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c4:	080035d5 	.word	0x080035d5
 80035c8:	080035db 	.word	0x080035db
 80035cc:	080035d5 	.word	0x080035d5
 80035d0:	080035ed 	.word	0x080035ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	73fb      	strb	r3, [r7, #15]
      break;
 80035d8:	e030      	b.n	800363c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d025      	beq.n	8003632 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035ea:	e022      	b.n	8003632 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80035f4:	d11f      	bne.n	8003636 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035fa:	e01c      	b.n	8003636 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d903      	bls.n	800360a <DMA_CheckFifoParam+0xb6>
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2b03      	cmp	r3, #3
 8003606:	d003      	beq.n	8003610 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003608:	e018      	b.n	800363c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	73fb      	strb	r3, [r7, #15]
      break;
 800360e:	e015      	b.n	800363c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003614:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00e      	beq.n	800363a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	73fb      	strb	r3, [r7, #15]
      break;
 8003620:	e00b      	b.n	800363a <DMA_CheckFifoParam+0xe6>
      break;
 8003622:	bf00      	nop
 8003624:	e00a      	b.n	800363c <DMA_CheckFifoParam+0xe8>
      break;
 8003626:	bf00      	nop
 8003628:	e008      	b.n	800363c <DMA_CheckFifoParam+0xe8>
      break;
 800362a:	bf00      	nop
 800362c:	e006      	b.n	800363c <DMA_CheckFifoParam+0xe8>
      break;
 800362e:	bf00      	nop
 8003630:	e004      	b.n	800363c <DMA_CheckFifoParam+0xe8>
      break;
 8003632:	bf00      	nop
 8003634:	e002      	b.n	800363c <DMA_CheckFifoParam+0xe8>
      break;   
 8003636:	bf00      	nop
 8003638:	e000      	b.n	800363c <DMA_CheckFifoParam+0xe8>
      break;
 800363a:	bf00      	nop
    }
  } 
  
  return status; 
 800363c:	7bfb      	ldrb	r3, [r7, #15]
}
 800363e:	4618      	mov	r0, r3
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop

0800364c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800364c:	b480      	push	{r7}
 800364e:	b089      	sub	sp, #36	@ 0x24
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003656:	2300      	movs	r3, #0
 8003658:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800365a:	2300      	movs	r3, #0
 800365c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800365e:	2300      	movs	r3, #0
 8003660:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003662:	2300      	movs	r3, #0
 8003664:	61fb      	str	r3, [r7, #28]
 8003666:	e165      	b.n	8003934 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003668:	2201      	movs	r2, #1
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	4013      	ands	r3, r2
 800367a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	429a      	cmp	r2, r3
 8003682:	f040 8154 	bne.w	800392e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f003 0303 	and.w	r3, r3, #3
 800368e:	2b01      	cmp	r3, #1
 8003690:	d005      	beq.n	800369e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800369a:	2b02      	cmp	r3, #2
 800369c:	d130      	bne.n	8003700 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	2203      	movs	r2, #3
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	43db      	mvns	r3, r3
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	4013      	ands	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036d4:	2201      	movs	r2, #1
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	43db      	mvns	r3, r3
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	4013      	ands	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	091b      	lsrs	r3, r3, #4
 80036ea:	f003 0201 	and.w	r2, r3, #1
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f003 0303 	and.w	r3, r3, #3
 8003708:	2b03      	cmp	r3, #3
 800370a:	d017      	beq.n	800373c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	2203      	movs	r2, #3
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	43db      	mvns	r3, r3
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	4013      	ands	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	4313      	orrs	r3, r2
 8003734:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 0303 	and.w	r3, r3, #3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d123      	bne.n	8003790 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	08da      	lsrs	r2, r3, #3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3208      	adds	r2, #8
 8003750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003754:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	220f      	movs	r2, #15
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	43db      	mvns	r3, r3
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	4013      	ands	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	691a      	ldr	r2, [r3, #16]
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	4313      	orrs	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	08da      	lsrs	r2, r3, #3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	3208      	adds	r2, #8
 800378a:	69b9      	ldr	r1, [r7, #24]
 800378c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	2203      	movs	r2, #3
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	43db      	mvns	r3, r3
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4013      	ands	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f003 0203 	and.w	r2, r3, #3
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 80ae 	beq.w	800392e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037d2:	2300      	movs	r3, #0
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	4b5d      	ldr	r3, [pc, #372]	@ (800394c <HAL_GPIO_Init+0x300>)
 80037d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037da:	4a5c      	ldr	r2, [pc, #368]	@ (800394c <HAL_GPIO_Init+0x300>)
 80037dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80037e2:	4b5a      	ldr	r3, [pc, #360]	@ (800394c <HAL_GPIO_Init+0x300>)
 80037e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037ea:	60fb      	str	r3, [r7, #12]
 80037ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037ee:	4a58      	ldr	r2, [pc, #352]	@ (8003950 <HAL_GPIO_Init+0x304>)
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	089b      	lsrs	r3, r3, #2
 80037f4:	3302      	adds	r3, #2
 80037f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	f003 0303 	and.w	r3, r3, #3
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	220f      	movs	r2, #15
 8003806:	fa02 f303 	lsl.w	r3, r2, r3
 800380a:	43db      	mvns	r3, r3
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	4013      	ands	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a4f      	ldr	r2, [pc, #316]	@ (8003954 <HAL_GPIO_Init+0x308>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d025      	beq.n	8003866 <HAL_GPIO_Init+0x21a>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a4e      	ldr	r2, [pc, #312]	@ (8003958 <HAL_GPIO_Init+0x30c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d01f      	beq.n	8003862 <HAL_GPIO_Init+0x216>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a4d      	ldr	r2, [pc, #308]	@ (800395c <HAL_GPIO_Init+0x310>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d019      	beq.n	800385e <HAL_GPIO_Init+0x212>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a4c      	ldr	r2, [pc, #304]	@ (8003960 <HAL_GPIO_Init+0x314>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d013      	beq.n	800385a <HAL_GPIO_Init+0x20e>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a4b      	ldr	r2, [pc, #300]	@ (8003964 <HAL_GPIO_Init+0x318>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d00d      	beq.n	8003856 <HAL_GPIO_Init+0x20a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a4a      	ldr	r2, [pc, #296]	@ (8003968 <HAL_GPIO_Init+0x31c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d007      	beq.n	8003852 <HAL_GPIO_Init+0x206>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a49      	ldr	r2, [pc, #292]	@ (800396c <HAL_GPIO_Init+0x320>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d101      	bne.n	800384e <HAL_GPIO_Init+0x202>
 800384a:	2306      	movs	r3, #6
 800384c:	e00c      	b.n	8003868 <HAL_GPIO_Init+0x21c>
 800384e:	2307      	movs	r3, #7
 8003850:	e00a      	b.n	8003868 <HAL_GPIO_Init+0x21c>
 8003852:	2305      	movs	r3, #5
 8003854:	e008      	b.n	8003868 <HAL_GPIO_Init+0x21c>
 8003856:	2304      	movs	r3, #4
 8003858:	e006      	b.n	8003868 <HAL_GPIO_Init+0x21c>
 800385a:	2303      	movs	r3, #3
 800385c:	e004      	b.n	8003868 <HAL_GPIO_Init+0x21c>
 800385e:	2302      	movs	r3, #2
 8003860:	e002      	b.n	8003868 <HAL_GPIO_Init+0x21c>
 8003862:	2301      	movs	r3, #1
 8003864:	e000      	b.n	8003868 <HAL_GPIO_Init+0x21c>
 8003866:	2300      	movs	r3, #0
 8003868:	69fa      	ldr	r2, [r7, #28]
 800386a:	f002 0203 	and.w	r2, r2, #3
 800386e:	0092      	lsls	r2, r2, #2
 8003870:	4093      	lsls	r3, r2
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	4313      	orrs	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003878:	4935      	ldr	r1, [pc, #212]	@ (8003950 <HAL_GPIO_Init+0x304>)
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	089b      	lsrs	r3, r3, #2
 800387e:	3302      	adds	r3, #2
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003886:	4b3a      	ldr	r3, [pc, #232]	@ (8003970 <HAL_GPIO_Init+0x324>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	43db      	mvns	r3, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4013      	ands	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038aa:	4a31      	ldr	r2, [pc, #196]	@ (8003970 <HAL_GPIO_Init+0x324>)
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038b0:	4b2f      	ldr	r3, [pc, #188]	@ (8003970 <HAL_GPIO_Init+0x324>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	43db      	mvns	r3, r3
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4013      	ands	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d003      	beq.n	80038d4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038d4:	4a26      	ldr	r2, [pc, #152]	@ (8003970 <HAL_GPIO_Init+0x324>)
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038da:	4b25      	ldr	r3, [pc, #148]	@ (8003970 <HAL_GPIO_Init+0x324>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	43db      	mvns	r3, r3
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	4013      	ands	r3, r2
 80038e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038fe:	4a1c      	ldr	r2, [pc, #112]	@ (8003970 <HAL_GPIO_Init+0x324>)
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003904:	4b1a      	ldr	r3, [pc, #104]	@ (8003970 <HAL_GPIO_Init+0x324>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	43db      	mvns	r3, r3
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4013      	ands	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	4313      	orrs	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003928:	4a11      	ldr	r2, [pc, #68]	@ (8003970 <HAL_GPIO_Init+0x324>)
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	3301      	adds	r3, #1
 8003932:	61fb      	str	r3, [r7, #28]
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	2b0f      	cmp	r3, #15
 8003938:	f67f ae96 	bls.w	8003668 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800393c:	bf00      	nop
 800393e:	bf00      	nop
 8003940:	3724      	adds	r7, #36	@ 0x24
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	40023800 	.word	0x40023800
 8003950:	40013800 	.word	0x40013800
 8003954:	40020000 	.word	0x40020000
 8003958:	40020400 	.word	0x40020400
 800395c:	40020800 	.word	0x40020800
 8003960:	40020c00 	.word	0x40020c00
 8003964:	40021000 	.word	0x40021000
 8003968:	40021400 	.word	0x40021400
 800396c:	40021800 	.word	0x40021800
 8003970:	40013c00 	.word	0x40013c00

08003974 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	460b      	mov	r3, r1
 800397e:	807b      	strh	r3, [r7, #2]
 8003980:	4613      	mov	r3, r2
 8003982:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003984:	787b      	ldrb	r3, [r7, #1]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800398a:	887a      	ldrh	r2, [r7, #2]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003990:	e003      	b.n	800399a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003992:	887b      	ldrh	r3, [r7, #2]
 8003994:	041a      	lsls	r2, r3, #16
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	619a      	str	r2, [r3, #24]
}
 800399a:	bf00      	nop
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
	...

080039a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e0cc      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039bc:	4b68      	ldr	r3, [pc, #416]	@ (8003b60 <HAL_RCC_ClockConfig+0x1b8>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 030f 	and.w	r3, r3, #15
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d90c      	bls.n	80039e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ca:	4b65      	ldr	r3, [pc, #404]	@ (8003b60 <HAL_RCC_ClockConfig+0x1b8>)
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d2:	4b63      	ldr	r3, [pc, #396]	@ (8003b60 <HAL_RCC_ClockConfig+0x1b8>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d001      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e0b8      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d020      	beq.n	8003a32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d005      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039fc:	4b59      	ldr	r3, [pc, #356]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	4a58      	ldr	r2, [pc, #352]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0308 	and.w	r3, r3, #8
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d005      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a14:	4b53      	ldr	r3, [pc, #332]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	4a52      	ldr	r2, [pc, #328]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a20:	4b50      	ldr	r3, [pc, #320]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	494d      	ldr	r1, [pc, #308]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d044      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d107      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a46:	4b47      	ldr	r3, [pc, #284]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d119      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e07f      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d003      	beq.n	8003a66 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a62:	2b03      	cmp	r3, #3
 8003a64:	d107      	bne.n	8003a76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a66:	4b3f      	ldr	r3, [pc, #252]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d109      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e06f      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a76:	4b3b      	ldr	r3, [pc, #236]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e067      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a86:	4b37      	ldr	r3, [pc, #220]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f023 0203 	bic.w	r2, r3, #3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	4934      	ldr	r1, [pc, #208]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a98:	f7fe fb64 	bl	8002164 <HAL_GetTick>
 8003a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a9e:	e00a      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aa0:	f7fe fb60 	bl	8002164 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e04f      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ab6:	4b2b      	ldr	r3, [pc, #172]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 020c 	and.w	r2, r3, #12
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d1eb      	bne.n	8003aa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ac8:	4b25      	ldr	r3, [pc, #148]	@ (8003b60 <HAL_RCC_ClockConfig+0x1b8>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 030f 	and.w	r3, r3, #15
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d20c      	bcs.n	8003af0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ad6:	4b22      	ldr	r3, [pc, #136]	@ (8003b60 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	b2d2      	uxtb	r2, r2
 8003adc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ade:	4b20      	ldr	r3, [pc, #128]	@ (8003b60 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d001      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e032      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d008      	beq.n	8003b0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003afc:	4b19      	ldr	r3, [pc, #100]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	4916      	ldr	r1, [pc, #88]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0308 	and.w	r3, r3, #8
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d009      	beq.n	8003b2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b1a:	4b12      	ldr	r3, [pc, #72]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	490e      	ldr	r1, [pc, #56]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b2e:	f000 f855 	bl	8003bdc <HAL_RCC_GetSysClockFreq>
 8003b32:	4602      	mov	r2, r0
 8003b34:	4b0b      	ldr	r3, [pc, #44]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	091b      	lsrs	r3, r3, #4
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	490a      	ldr	r1, [pc, #40]	@ (8003b68 <HAL_RCC_ClockConfig+0x1c0>)
 8003b40:	5ccb      	ldrb	r3, [r1, r3]
 8003b42:	fa22 f303 	lsr.w	r3, r2, r3
 8003b46:	4a09      	ldr	r2, [pc, #36]	@ (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b4a:	4b09      	ldr	r3, [pc, #36]	@ (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fe fac4 	bl	80020dc <HAL_InitTick>

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40023c00 	.word	0x40023c00
 8003b64:	40023800 	.word	0x40023800
 8003b68:	0800b574 	.word	0x0800b574
 8003b6c:	20000000 	.word	0x20000000
 8003b70:	20000004 	.word	0x20000004

08003b74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b78:	4b03      	ldr	r3, [pc, #12]	@ (8003b88 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	20000000 	.word	0x20000000

08003b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b90:	f7ff fff0 	bl	8003b74 <HAL_RCC_GetHCLKFreq>
 8003b94:	4602      	mov	r2, r0
 8003b96:	4b05      	ldr	r3, [pc, #20]	@ (8003bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	0a9b      	lsrs	r3, r3, #10
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	4903      	ldr	r1, [pc, #12]	@ (8003bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ba2:	5ccb      	ldrb	r3, [r1, r3]
 8003ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	0800b584 	.word	0x0800b584

08003bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bb8:	f7ff ffdc 	bl	8003b74 <HAL_RCC_GetHCLKFreq>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	4b05      	ldr	r3, [pc, #20]	@ (8003bd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	0b5b      	lsrs	r3, r3, #13
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	4903      	ldr	r1, [pc, #12]	@ (8003bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bca:	5ccb      	ldrb	r3, [r1, r3]
 8003bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	0800b584 	.word	0x0800b584

08003bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003be0:	b0ae      	sub	sp, #184	@ 0xb8
 8003be2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c02:	4bcb      	ldr	r3, [pc, #812]	@ (8003f30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f003 030c 	and.w	r3, r3, #12
 8003c0a:	2b0c      	cmp	r3, #12
 8003c0c:	f200 8206 	bhi.w	800401c <HAL_RCC_GetSysClockFreq+0x440>
 8003c10:	a201      	add	r2, pc, #4	@ (adr r2, 8003c18 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c16:	bf00      	nop
 8003c18:	08003c4d 	.word	0x08003c4d
 8003c1c:	0800401d 	.word	0x0800401d
 8003c20:	0800401d 	.word	0x0800401d
 8003c24:	0800401d 	.word	0x0800401d
 8003c28:	08003c55 	.word	0x08003c55
 8003c2c:	0800401d 	.word	0x0800401d
 8003c30:	0800401d 	.word	0x0800401d
 8003c34:	0800401d 	.word	0x0800401d
 8003c38:	08003c5d 	.word	0x08003c5d
 8003c3c:	0800401d 	.word	0x0800401d
 8003c40:	0800401d 	.word	0x0800401d
 8003c44:	0800401d 	.word	0x0800401d
 8003c48:	08003e4d 	.word	0x08003e4d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c4c:	4bb9      	ldr	r3, [pc, #740]	@ (8003f34 <HAL_RCC_GetSysClockFreq+0x358>)
 8003c4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003c52:	e1e7      	b.n	8004024 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c54:	4bb8      	ldr	r3, [pc, #736]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003c56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003c5a:	e1e3      	b.n	8004024 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c5c:	4bb4      	ldr	r3, [pc, #720]	@ (8003f30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c68:	4bb1      	ldr	r3, [pc, #708]	@ (8003f30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d071      	beq.n	8003d58 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c74:	4bae      	ldr	r3, [pc, #696]	@ (8003f30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	099b      	lsrs	r3, r3, #6
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c80:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003c84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c90:	2300      	movs	r3, #0
 8003c92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003c96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c9a:	4622      	mov	r2, r4
 8003c9c:	462b      	mov	r3, r5
 8003c9e:	f04f 0000 	mov.w	r0, #0
 8003ca2:	f04f 0100 	mov.w	r1, #0
 8003ca6:	0159      	lsls	r1, r3, #5
 8003ca8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cac:	0150      	lsls	r0, r2, #5
 8003cae:	4602      	mov	r2, r0
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	4621      	mov	r1, r4
 8003cb4:	1a51      	subs	r1, r2, r1
 8003cb6:	6439      	str	r1, [r7, #64]	@ 0x40
 8003cb8:	4629      	mov	r1, r5
 8003cba:	eb63 0301 	sbc.w	r3, r3, r1
 8003cbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cc0:	f04f 0200 	mov.w	r2, #0
 8003cc4:	f04f 0300 	mov.w	r3, #0
 8003cc8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003ccc:	4649      	mov	r1, r9
 8003cce:	018b      	lsls	r3, r1, #6
 8003cd0:	4641      	mov	r1, r8
 8003cd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cd6:	4641      	mov	r1, r8
 8003cd8:	018a      	lsls	r2, r1, #6
 8003cda:	4641      	mov	r1, r8
 8003cdc:	1a51      	subs	r1, r2, r1
 8003cde:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ce0:	4649      	mov	r1, r9
 8003ce2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ce8:	f04f 0200 	mov.w	r2, #0
 8003cec:	f04f 0300 	mov.w	r3, #0
 8003cf0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003cf4:	4649      	mov	r1, r9
 8003cf6:	00cb      	lsls	r3, r1, #3
 8003cf8:	4641      	mov	r1, r8
 8003cfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cfe:	4641      	mov	r1, r8
 8003d00:	00ca      	lsls	r2, r1, #3
 8003d02:	4610      	mov	r0, r2
 8003d04:	4619      	mov	r1, r3
 8003d06:	4603      	mov	r3, r0
 8003d08:	4622      	mov	r2, r4
 8003d0a:	189b      	adds	r3, r3, r2
 8003d0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d0e:	462b      	mov	r3, r5
 8003d10:	460a      	mov	r2, r1
 8003d12:	eb42 0303 	adc.w	r3, r2, r3
 8003d16:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d18:	f04f 0200 	mov.w	r2, #0
 8003d1c:	f04f 0300 	mov.w	r3, #0
 8003d20:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003d24:	4629      	mov	r1, r5
 8003d26:	024b      	lsls	r3, r1, #9
 8003d28:	4621      	mov	r1, r4
 8003d2a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d2e:	4621      	mov	r1, r4
 8003d30:	024a      	lsls	r2, r1, #9
 8003d32:	4610      	mov	r0, r2
 8003d34:	4619      	mov	r1, r3
 8003d36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d40:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003d44:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003d48:	f7fc ffbe 	bl	8000cc8 <__aeabi_uldivmod>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4613      	mov	r3, r2
 8003d52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d56:	e067      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d58:	4b75      	ldr	r3, [pc, #468]	@ (8003f30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	099b      	lsrs	r3, r3, #6
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d64:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003d68:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d70:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d72:	2300      	movs	r3, #0
 8003d74:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003d76:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003d7a:	4622      	mov	r2, r4
 8003d7c:	462b      	mov	r3, r5
 8003d7e:	f04f 0000 	mov.w	r0, #0
 8003d82:	f04f 0100 	mov.w	r1, #0
 8003d86:	0159      	lsls	r1, r3, #5
 8003d88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d8c:	0150      	lsls	r0, r2, #5
 8003d8e:	4602      	mov	r2, r0
 8003d90:	460b      	mov	r3, r1
 8003d92:	4621      	mov	r1, r4
 8003d94:	1a51      	subs	r1, r2, r1
 8003d96:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003d98:	4629      	mov	r1, r5
 8003d9a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003da0:	f04f 0200 	mov.w	r2, #0
 8003da4:	f04f 0300 	mov.w	r3, #0
 8003da8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003dac:	4649      	mov	r1, r9
 8003dae:	018b      	lsls	r3, r1, #6
 8003db0:	4641      	mov	r1, r8
 8003db2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003db6:	4641      	mov	r1, r8
 8003db8:	018a      	lsls	r2, r1, #6
 8003dba:	4641      	mov	r1, r8
 8003dbc:	ebb2 0a01 	subs.w	sl, r2, r1
 8003dc0:	4649      	mov	r1, r9
 8003dc2:	eb63 0b01 	sbc.w	fp, r3, r1
 8003dc6:	f04f 0200 	mov.w	r2, #0
 8003dca:	f04f 0300 	mov.w	r3, #0
 8003dce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003dd2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003dd6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dda:	4692      	mov	sl, r2
 8003ddc:	469b      	mov	fp, r3
 8003dde:	4623      	mov	r3, r4
 8003de0:	eb1a 0303 	adds.w	r3, sl, r3
 8003de4:	623b      	str	r3, [r7, #32]
 8003de6:	462b      	mov	r3, r5
 8003de8:	eb4b 0303 	adc.w	r3, fp, r3
 8003dec:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dee:	f04f 0200 	mov.w	r2, #0
 8003df2:	f04f 0300 	mov.w	r3, #0
 8003df6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003dfa:	4629      	mov	r1, r5
 8003dfc:	028b      	lsls	r3, r1, #10
 8003dfe:	4621      	mov	r1, r4
 8003e00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e04:	4621      	mov	r1, r4
 8003e06:	028a      	lsls	r2, r1, #10
 8003e08:	4610      	mov	r0, r2
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e10:	2200      	movs	r2, #0
 8003e12:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e14:	677a      	str	r2, [r7, #116]	@ 0x74
 8003e16:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003e1a:	f7fc ff55 	bl	8000cc8 <__aeabi_uldivmod>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	460b      	mov	r3, r1
 8003e22:	4613      	mov	r3, r2
 8003e24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003e28:	4b41      	ldr	r3, [pc, #260]	@ (8003f30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	0c1b      	lsrs	r3, r3, #16
 8003e2e:	f003 0303 	and.w	r3, r3, #3
 8003e32:	3301      	adds	r3, #1
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003e3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e4a:	e0eb      	b.n	8004024 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e4c:	4b38      	ldr	r3, [pc, #224]	@ (8003f30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e58:	4b35      	ldr	r3, [pc, #212]	@ (8003f30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d06b      	beq.n	8003f3c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e64:	4b32      	ldr	r3, [pc, #200]	@ (8003f30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	099b      	lsrs	r3, r3, #6
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e6e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e76:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e78:	2300      	movs	r3, #0
 8003e7a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e7c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003e80:	4622      	mov	r2, r4
 8003e82:	462b      	mov	r3, r5
 8003e84:	f04f 0000 	mov.w	r0, #0
 8003e88:	f04f 0100 	mov.w	r1, #0
 8003e8c:	0159      	lsls	r1, r3, #5
 8003e8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e92:	0150      	lsls	r0, r2, #5
 8003e94:	4602      	mov	r2, r0
 8003e96:	460b      	mov	r3, r1
 8003e98:	4621      	mov	r1, r4
 8003e9a:	1a51      	subs	r1, r2, r1
 8003e9c:	61b9      	str	r1, [r7, #24]
 8003e9e:	4629      	mov	r1, r5
 8003ea0:	eb63 0301 	sbc.w	r3, r3, r1
 8003ea4:	61fb      	str	r3, [r7, #28]
 8003ea6:	f04f 0200 	mov.w	r2, #0
 8003eaa:	f04f 0300 	mov.w	r3, #0
 8003eae:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003eb2:	4659      	mov	r1, fp
 8003eb4:	018b      	lsls	r3, r1, #6
 8003eb6:	4651      	mov	r1, sl
 8003eb8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ebc:	4651      	mov	r1, sl
 8003ebe:	018a      	lsls	r2, r1, #6
 8003ec0:	4651      	mov	r1, sl
 8003ec2:	ebb2 0801 	subs.w	r8, r2, r1
 8003ec6:	4659      	mov	r1, fp
 8003ec8:	eb63 0901 	sbc.w	r9, r3, r1
 8003ecc:	f04f 0200 	mov.w	r2, #0
 8003ed0:	f04f 0300 	mov.w	r3, #0
 8003ed4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ed8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003edc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ee0:	4690      	mov	r8, r2
 8003ee2:	4699      	mov	r9, r3
 8003ee4:	4623      	mov	r3, r4
 8003ee6:	eb18 0303 	adds.w	r3, r8, r3
 8003eea:	613b      	str	r3, [r7, #16]
 8003eec:	462b      	mov	r3, r5
 8003eee:	eb49 0303 	adc.w	r3, r9, r3
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	f04f 0300 	mov.w	r3, #0
 8003efc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003f00:	4629      	mov	r1, r5
 8003f02:	024b      	lsls	r3, r1, #9
 8003f04:	4621      	mov	r1, r4
 8003f06:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f0a:	4621      	mov	r1, r4
 8003f0c:	024a      	lsls	r2, r1, #9
 8003f0e:	4610      	mov	r0, r2
 8003f10:	4619      	mov	r1, r3
 8003f12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f16:	2200      	movs	r2, #0
 8003f18:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003f1a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003f1c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003f20:	f7fc fed2 	bl	8000cc8 <__aeabi_uldivmod>
 8003f24:	4602      	mov	r2, r0
 8003f26:	460b      	mov	r3, r1
 8003f28:	4613      	mov	r3, r2
 8003f2a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f2e:	e065      	b.n	8003ffc <HAL_RCC_GetSysClockFreq+0x420>
 8003f30:	40023800 	.word	0x40023800
 8003f34:	00f42400 	.word	0x00f42400
 8003f38:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f3c:	4b3d      	ldr	r3, [pc, #244]	@ (8004034 <HAL_RCC_GetSysClockFreq+0x458>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	099b      	lsrs	r3, r3, #6
 8003f42:	2200      	movs	r2, #0
 8003f44:	4618      	mov	r0, r3
 8003f46:	4611      	mov	r1, r2
 8003f48:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f4c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f4e:	2300      	movs	r3, #0
 8003f50:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f52:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003f56:	4642      	mov	r2, r8
 8003f58:	464b      	mov	r3, r9
 8003f5a:	f04f 0000 	mov.w	r0, #0
 8003f5e:	f04f 0100 	mov.w	r1, #0
 8003f62:	0159      	lsls	r1, r3, #5
 8003f64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f68:	0150      	lsls	r0, r2, #5
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	4641      	mov	r1, r8
 8003f70:	1a51      	subs	r1, r2, r1
 8003f72:	60b9      	str	r1, [r7, #8]
 8003f74:	4649      	mov	r1, r9
 8003f76:	eb63 0301 	sbc.w	r3, r3, r1
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	f04f 0300 	mov.w	r3, #0
 8003f84:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003f88:	4659      	mov	r1, fp
 8003f8a:	018b      	lsls	r3, r1, #6
 8003f8c:	4651      	mov	r1, sl
 8003f8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f92:	4651      	mov	r1, sl
 8003f94:	018a      	lsls	r2, r1, #6
 8003f96:	4651      	mov	r1, sl
 8003f98:	1a54      	subs	r4, r2, r1
 8003f9a:	4659      	mov	r1, fp
 8003f9c:	eb63 0501 	sbc.w	r5, r3, r1
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	f04f 0300 	mov.w	r3, #0
 8003fa8:	00eb      	lsls	r3, r5, #3
 8003faa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fae:	00e2      	lsls	r2, r4, #3
 8003fb0:	4614      	mov	r4, r2
 8003fb2:	461d      	mov	r5, r3
 8003fb4:	4643      	mov	r3, r8
 8003fb6:	18e3      	adds	r3, r4, r3
 8003fb8:	603b      	str	r3, [r7, #0]
 8003fba:	464b      	mov	r3, r9
 8003fbc:	eb45 0303 	adc.w	r3, r5, r3
 8003fc0:	607b      	str	r3, [r7, #4]
 8003fc2:	f04f 0200 	mov.w	r2, #0
 8003fc6:	f04f 0300 	mov.w	r3, #0
 8003fca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fce:	4629      	mov	r1, r5
 8003fd0:	028b      	lsls	r3, r1, #10
 8003fd2:	4621      	mov	r1, r4
 8003fd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fd8:	4621      	mov	r1, r4
 8003fda:	028a      	lsls	r2, r1, #10
 8003fdc:	4610      	mov	r0, r2
 8003fde:	4619      	mov	r1, r3
 8003fe0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fe8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003fea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003fee:	f7fc fe6b 	bl	8000cc8 <__aeabi_uldivmod>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8004034 <HAL_RCC_GetSysClockFreq+0x458>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	0f1b      	lsrs	r3, r3, #28
 8004002:	f003 0307 	and.w	r3, r3, #7
 8004006:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800400a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800400e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004012:	fbb2 f3f3 	udiv	r3, r2, r3
 8004016:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800401a:	e003      	b.n	8004024 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800401c:	4b06      	ldr	r3, [pc, #24]	@ (8004038 <HAL_RCC_GetSysClockFreq+0x45c>)
 800401e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004022:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004024:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004028:	4618      	mov	r0, r3
 800402a:	37b8      	adds	r7, #184	@ 0xb8
 800402c:	46bd      	mov	sp, r7
 800402e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004032:	bf00      	nop
 8004034:	40023800 	.word	0x40023800
 8004038:	00f42400 	.word	0x00f42400

0800403c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e28d      	b.n	800456a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 8083 	beq.w	8004162 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800405c:	4b94      	ldr	r3, [pc, #592]	@ (80042b0 <HAL_RCC_OscConfig+0x274>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f003 030c 	and.w	r3, r3, #12
 8004064:	2b04      	cmp	r3, #4
 8004066:	d019      	beq.n	800409c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004068:	4b91      	ldr	r3, [pc, #580]	@ (80042b0 <HAL_RCC_OscConfig+0x274>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f003 030c 	and.w	r3, r3, #12
        || \
 8004070:	2b08      	cmp	r3, #8
 8004072:	d106      	bne.n	8004082 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004074:	4b8e      	ldr	r3, [pc, #568]	@ (80042b0 <HAL_RCC_OscConfig+0x274>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800407c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004080:	d00c      	beq.n	800409c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004082:	4b8b      	ldr	r3, [pc, #556]	@ (80042b0 <HAL_RCC_OscConfig+0x274>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800408a:	2b0c      	cmp	r3, #12
 800408c:	d112      	bne.n	80040b4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800408e:	4b88      	ldr	r3, [pc, #544]	@ (80042b0 <HAL_RCC_OscConfig+0x274>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004096:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800409a:	d10b      	bne.n	80040b4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800409c:	4b84      	ldr	r3, [pc, #528]	@ (80042b0 <HAL_RCC_OscConfig+0x274>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d05b      	beq.n	8004160 <HAL_RCC_OscConfig+0x124>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d157      	bne.n	8004160 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e25a      	b.n	800456a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040bc:	d106      	bne.n	80040cc <HAL_RCC_OscConfig+0x90>
 80040be:	4b7c      	ldr	r3, [pc, #496]	@ (80042b0 <HAL_RCC_OscConfig+0x274>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a7b      	ldr	r2, [pc, #492]	@ (80042b0 <HAL_RCC_OscConfig+0x274>)
 80040c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040c8:	6013      	str	r3, [r2, #0]
 80040ca:	e01d      	b.n	8004108 <HAL_RCC_OscConfig+0xcc>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040d4:	d10c      	bne.n	80040f0 <HAL_RCC_OscConfig+0xb4>
 80040d6:	4b76      	ldr	r3, [pc, #472]	@ (80042b0 <HAL_RCC_OscConfig+0x274>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a75      	ldr	r2, [pc, #468]	@ (80042b0 <HAL_RCC_OscConfig+0x274>)
 80040dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040e0:	6013      	str	r3, [r2, #0]
 80040e2:	4b73      	ldr	r3, [pc, #460]	@ (80042b0 <HAL_RCC_OscConfig+0x274>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a72      	ldr	r2, [pc, #456]	@ (80042b0 <HAL_RCC_OscConfig+0x274>)
 80040e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	e00b      	b.n	8004108 <HAL_RCC_OscConfig+0xcc>
 80040f0:	4b6f      	ldr	r3, [pc, #444]	@ (80042b0 <HAL_RCC_OscConfig+0x274>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a6e      	ldr	r2, [pc, #440]	@ (80042b0 <HAL_RCC_OscConfig+0x274>)
 80040f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040fa:	6013      	str	r3, [r2, #0]
 80040fc:	4b6c      	ldr	r3, [pc, #432]	@ (80042b0 <HAL_RCC_OscConfig+0x274>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a6b      	ldr	r2, [pc, #428]	@ (80042b0 <HAL_RCC_OscConfig+0x274>)
 8004102:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004106:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d013      	beq.n	8004138 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004110:	f7fe f828 	bl	8002164 <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004118:	f7fe f824 	bl	8002164 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b64      	cmp	r3, #100	@ 0x64
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e21f      	b.n	800456a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800412a:	4b61      	ldr	r3, [pc, #388]	@ (80042b0 <HAL_RCC_OscConfig+0x274>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d0f0      	beq.n	8004118 <HAL_RCC_OscConfig+0xdc>
 8004136:	e014      	b.n	8004162 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004138:	f7fe f814 	bl	8002164 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004140:	f7fe f810 	bl	8002164 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b64      	cmp	r3, #100	@ 0x64
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e20b      	b.n	800456a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004152:	4b57      	ldr	r3, [pc, #348]	@ (80042b0 <HAL_RCC_OscConfig+0x274>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1f0      	bne.n	8004140 <HAL_RCC_OscConfig+0x104>
 800415e:	e000      	b.n	8004162 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004160:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d06f      	beq.n	800424e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800416e:	4b50      	ldr	r3, [pc, #320]	@ (80042b0 <HAL_RCC_OscConfig+0x274>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 030c 	and.w	r3, r3, #12
 8004176:	2b00      	cmp	r3, #0
 8004178:	d017      	beq.n	80041aa <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800417a:	4b4d      	ldr	r3, [pc, #308]	@ (80042b0 <HAL_RCC_OscConfig+0x274>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 030c 	and.w	r3, r3, #12
        || \
 8004182:	2b08      	cmp	r3, #8
 8004184:	d105      	bne.n	8004192 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004186:	4b4a      	ldr	r3, [pc, #296]	@ (80042b0 <HAL_RCC_OscConfig+0x274>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00b      	beq.n	80041aa <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004192:	4b47      	ldr	r3, [pc, #284]	@ (80042b0 <HAL_RCC_OscConfig+0x274>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800419a:	2b0c      	cmp	r3, #12
 800419c:	d11c      	bne.n	80041d8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800419e:	4b44      	ldr	r3, [pc, #272]	@ (80042b0 <HAL_RCC_OscConfig+0x274>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d116      	bne.n	80041d8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041aa:	4b41      	ldr	r3, [pc, #260]	@ (80042b0 <HAL_RCC_OscConfig+0x274>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d005      	beq.n	80041c2 <HAL_RCC_OscConfig+0x186>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d001      	beq.n	80041c2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e1d3      	b.n	800456a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041c2:	4b3b      	ldr	r3, [pc, #236]	@ (80042b0 <HAL_RCC_OscConfig+0x274>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	4937      	ldr	r1, [pc, #220]	@ (80042b0 <HAL_RCC_OscConfig+0x274>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041d6:	e03a      	b.n	800424e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d020      	beq.n	8004222 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041e0:	4b34      	ldr	r3, [pc, #208]	@ (80042b4 <HAL_RCC_OscConfig+0x278>)
 80041e2:	2201      	movs	r2, #1
 80041e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e6:	f7fd ffbd 	bl	8002164 <HAL_GetTick>
 80041ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ec:	e008      	b.n	8004200 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ee:	f7fd ffb9 	bl	8002164 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e1b4      	b.n	800456a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004200:	4b2b      	ldr	r3, [pc, #172]	@ (80042b0 <HAL_RCC_OscConfig+0x274>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0f0      	beq.n	80041ee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800420c:	4b28      	ldr	r3, [pc, #160]	@ (80042b0 <HAL_RCC_OscConfig+0x274>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	4925      	ldr	r1, [pc, #148]	@ (80042b0 <HAL_RCC_OscConfig+0x274>)
 800421c:	4313      	orrs	r3, r2
 800421e:	600b      	str	r3, [r1, #0]
 8004220:	e015      	b.n	800424e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004222:	4b24      	ldr	r3, [pc, #144]	@ (80042b4 <HAL_RCC_OscConfig+0x278>)
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004228:	f7fd ff9c 	bl	8002164 <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004230:	f7fd ff98 	bl	8002164 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e193      	b.n	800456a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004242:	4b1b      	ldr	r3, [pc, #108]	@ (80042b0 <HAL_RCC_OscConfig+0x274>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1f0      	bne.n	8004230 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0308 	and.w	r3, r3, #8
 8004256:	2b00      	cmp	r3, #0
 8004258:	d036      	beq.n	80042c8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d016      	beq.n	8004290 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004262:	4b15      	ldr	r3, [pc, #84]	@ (80042b8 <HAL_RCC_OscConfig+0x27c>)
 8004264:	2201      	movs	r2, #1
 8004266:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004268:	f7fd ff7c 	bl	8002164 <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004270:	f7fd ff78 	bl	8002164 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e173      	b.n	800456a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004282:	4b0b      	ldr	r3, [pc, #44]	@ (80042b0 <HAL_RCC_OscConfig+0x274>)
 8004284:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0f0      	beq.n	8004270 <HAL_RCC_OscConfig+0x234>
 800428e:	e01b      	b.n	80042c8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004290:	4b09      	ldr	r3, [pc, #36]	@ (80042b8 <HAL_RCC_OscConfig+0x27c>)
 8004292:	2200      	movs	r2, #0
 8004294:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004296:	f7fd ff65 	bl	8002164 <HAL_GetTick>
 800429a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800429c:	e00e      	b.n	80042bc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800429e:	f7fd ff61 	bl	8002164 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d907      	bls.n	80042bc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e15c      	b.n	800456a <HAL_RCC_OscConfig+0x52e>
 80042b0:	40023800 	.word	0x40023800
 80042b4:	42470000 	.word	0x42470000
 80042b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042bc:	4b8a      	ldr	r3, [pc, #552]	@ (80044e8 <HAL_RCC_OscConfig+0x4ac>)
 80042be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1ea      	bne.n	800429e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 8097 	beq.w	8004404 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042d6:	2300      	movs	r3, #0
 80042d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042da:	4b83      	ldr	r3, [pc, #524]	@ (80044e8 <HAL_RCC_OscConfig+0x4ac>)
 80042dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10f      	bne.n	8004306 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042e6:	2300      	movs	r3, #0
 80042e8:	60bb      	str	r3, [r7, #8]
 80042ea:	4b7f      	ldr	r3, [pc, #508]	@ (80044e8 <HAL_RCC_OscConfig+0x4ac>)
 80042ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ee:	4a7e      	ldr	r2, [pc, #504]	@ (80044e8 <HAL_RCC_OscConfig+0x4ac>)
 80042f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80042f6:	4b7c      	ldr	r3, [pc, #496]	@ (80044e8 <HAL_RCC_OscConfig+0x4ac>)
 80042f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042fe:	60bb      	str	r3, [r7, #8]
 8004300:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004302:	2301      	movs	r3, #1
 8004304:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004306:	4b79      	ldr	r3, [pc, #484]	@ (80044ec <HAL_RCC_OscConfig+0x4b0>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800430e:	2b00      	cmp	r3, #0
 8004310:	d118      	bne.n	8004344 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004312:	4b76      	ldr	r3, [pc, #472]	@ (80044ec <HAL_RCC_OscConfig+0x4b0>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a75      	ldr	r2, [pc, #468]	@ (80044ec <HAL_RCC_OscConfig+0x4b0>)
 8004318:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800431c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800431e:	f7fd ff21 	bl	8002164 <HAL_GetTick>
 8004322:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004324:	e008      	b.n	8004338 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004326:	f7fd ff1d 	bl	8002164 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d901      	bls.n	8004338 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e118      	b.n	800456a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004338:	4b6c      	ldr	r3, [pc, #432]	@ (80044ec <HAL_RCC_OscConfig+0x4b0>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004340:	2b00      	cmp	r3, #0
 8004342:	d0f0      	beq.n	8004326 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d106      	bne.n	800435a <HAL_RCC_OscConfig+0x31e>
 800434c:	4b66      	ldr	r3, [pc, #408]	@ (80044e8 <HAL_RCC_OscConfig+0x4ac>)
 800434e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004350:	4a65      	ldr	r2, [pc, #404]	@ (80044e8 <HAL_RCC_OscConfig+0x4ac>)
 8004352:	f043 0301 	orr.w	r3, r3, #1
 8004356:	6713      	str	r3, [r2, #112]	@ 0x70
 8004358:	e01c      	b.n	8004394 <HAL_RCC_OscConfig+0x358>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	2b05      	cmp	r3, #5
 8004360:	d10c      	bne.n	800437c <HAL_RCC_OscConfig+0x340>
 8004362:	4b61      	ldr	r3, [pc, #388]	@ (80044e8 <HAL_RCC_OscConfig+0x4ac>)
 8004364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004366:	4a60      	ldr	r2, [pc, #384]	@ (80044e8 <HAL_RCC_OscConfig+0x4ac>)
 8004368:	f043 0304 	orr.w	r3, r3, #4
 800436c:	6713      	str	r3, [r2, #112]	@ 0x70
 800436e:	4b5e      	ldr	r3, [pc, #376]	@ (80044e8 <HAL_RCC_OscConfig+0x4ac>)
 8004370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004372:	4a5d      	ldr	r2, [pc, #372]	@ (80044e8 <HAL_RCC_OscConfig+0x4ac>)
 8004374:	f043 0301 	orr.w	r3, r3, #1
 8004378:	6713      	str	r3, [r2, #112]	@ 0x70
 800437a:	e00b      	b.n	8004394 <HAL_RCC_OscConfig+0x358>
 800437c:	4b5a      	ldr	r3, [pc, #360]	@ (80044e8 <HAL_RCC_OscConfig+0x4ac>)
 800437e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004380:	4a59      	ldr	r2, [pc, #356]	@ (80044e8 <HAL_RCC_OscConfig+0x4ac>)
 8004382:	f023 0301 	bic.w	r3, r3, #1
 8004386:	6713      	str	r3, [r2, #112]	@ 0x70
 8004388:	4b57      	ldr	r3, [pc, #348]	@ (80044e8 <HAL_RCC_OscConfig+0x4ac>)
 800438a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800438c:	4a56      	ldr	r2, [pc, #344]	@ (80044e8 <HAL_RCC_OscConfig+0x4ac>)
 800438e:	f023 0304 	bic.w	r3, r3, #4
 8004392:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d015      	beq.n	80043c8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800439c:	f7fd fee2 	bl	8002164 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a2:	e00a      	b.n	80043ba <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043a4:	f7fd fede 	bl	8002164 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e0d7      	b.n	800456a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ba:	4b4b      	ldr	r3, [pc, #300]	@ (80044e8 <HAL_RCC_OscConfig+0x4ac>)
 80043bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0ee      	beq.n	80043a4 <HAL_RCC_OscConfig+0x368>
 80043c6:	e014      	b.n	80043f2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c8:	f7fd fecc 	bl	8002164 <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ce:	e00a      	b.n	80043e6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043d0:	f7fd fec8 	bl	8002164 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043de:	4293      	cmp	r3, r2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e0c1      	b.n	800456a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043e6:	4b40      	ldr	r3, [pc, #256]	@ (80044e8 <HAL_RCC_OscConfig+0x4ac>)
 80043e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1ee      	bne.n	80043d0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043f2:	7dfb      	ldrb	r3, [r7, #23]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d105      	bne.n	8004404 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043f8:	4b3b      	ldr	r3, [pc, #236]	@ (80044e8 <HAL_RCC_OscConfig+0x4ac>)
 80043fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fc:	4a3a      	ldr	r2, [pc, #232]	@ (80044e8 <HAL_RCC_OscConfig+0x4ac>)
 80043fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004402:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 80ad 	beq.w	8004568 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800440e:	4b36      	ldr	r3, [pc, #216]	@ (80044e8 <HAL_RCC_OscConfig+0x4ac>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 030c 	and.w	r3, r3, #12
 8004416:	2b08      	cmp	r3, #8
 8004418:	d060      	beq.n	80044dc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	2b02      	cmp	r3, #2
 8004420:	d145      	bne.n	80044ae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004422:	4b33      	ldr	r3, [pc, #204]	@ (80044f0 <HAL_RCC_OscConfig+0x4b4>)
 8004424:	2200      	movs	r2, #0
 8004426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004428:	f7fd fe9c 	bl	8002164 <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004430:	f7fd fe98 	bl	8002164 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e093      	b.n	800456a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004442:	4b29      	ldr	r3, [pc, #164]	@ (80044e8 <HAL_RCC_OscConfig+0x4ac>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1f0      	bne.n	8004430 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	69da      	ldr	r2, [r3, #28]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445c:	019b      	lsls	r3, r3, #6
 800445e:	431a      	orrs	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004464:	085b      	lsrs	r3, r3, #1
 8004466:	3b01      	subs	r3, #1
 8004468:	041b      	lsls	r3, r3, #16
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004470:	061b      	lsls	r3, r3, #24
 8004472:	431a      	orrs	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004478:	071b      	lsls	r3, r3, #28
 800447a:	491b      	ldr	r1, [pc, #108]	@ (80044e8 <HAL_RCC_OscConfig+0x4ac>)
 800447c:	4313      	orrs	r3, r2
 800447e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004480:	4b1b      	ldr	r3, [pc, #108]	@ (80044f0 <HAL_RCC_OscConfig+0x4b4>)
 8004482:	2201      	movs	r2, #1
 8004484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004486:	f7fd fe6d 	bl	8002164 <HAL_GetTick>
 800448a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800448c:	e008      	b.n	80044a0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800448e:	f7fd fe69 	bl	8002164 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d901      	bls.n	80044a0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e064      	b.n	800456a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044a0:	4b11      	ldr	r3, [pc, #68]	@ (80044e8 <HAL_RCC_OscConfig+0x4ac>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d0f0      	beq.n	800448e <HAL_RCC_OscConfig+0x452>
 80044ac:	e05c      	b.n	8004568 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ae:	4b10      	ldr	r3, [pc, #64]	@ (80044f0 <HAL_RCC_OscConfig+0x4b4>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b4:	f7fd fe56 	bl	8002164 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044bc:	f7fd fe52 	bl	8002164 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e04d      	b.n	800456a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ce:	4b06      	ldr	r3, [pc, #24]	@ (80044e8 <HAL_RCC_OscConfig+0x4ac>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1f0      	bne.n	80044bc <HAL_RCC_OscConfig+0x480>
 80044da:	e045      	b.n	8004568 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d107      	bne.n	80044f4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e040      	b.n	800456a <HAL_RCC_OscConfig+0x52e>
 80044e8:	40023800 	.word	0x40023800
 80044ec:	40007000 	.word	0x40007000
 80044f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044f4:	4b1f      	ldr	r3, [pc, #124]	@ (8004574 <HAL_RCC_OscConfig+0x538>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d030      	beq.n	8004564 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800450c:	429a      	cmp	r2, r3
 800450e:	d129      	bne.n	8004564 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800451a:	429a      	cmp	r2, r3
 800451c:	d122      	bne.n	8004564 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004524:	4013      	ands	r3, r2
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800452a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800452c:	4293      	cmp	r3, r2
 800452e:	d119      	bne.n	8004564 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800453a:	085b      	lsrs	r3, r3, #1
 800453c:	3b01      	subs	r3, #1
 800453e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004540:	429a      	cmp	r2, r3
 8004542:	d10f      	bne.n	8004564 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004550:	429a      	cmp	r2, r3
 8004552:	d107      	bne.n	8004564 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004560:	429a      	cmp	r2, r3
 8004562:	d001      	beq.n	8004568 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e000      	b.n	800456a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3718      	adds	r7, #24
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	40023800 	.word	0x40023800

08004578 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e041      	b.n	800460e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d106      	bne.n	80045a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7fd fb8e 	bl	8001cc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2202      	movs	r2, #2
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3304      	adds	r3, #4
 80045b4:	4619      	mov	r1, r3
 80045b6:	4610      	mov	r0, r2
 80045b8:	f000 fcd8 	bl	8004f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
	...

08004618 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b01      	cmp	r3, #1
 800462a:	d001      	beq.n	8004630 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e046      	b.n	80046be <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2202      	movs	r2, #2
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a23      	ldr	r2, [pc, #140]	@ (80046cc <HAL_TIM_Base_Start+0xb4>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d022      	beq.n	8004688 <HAL_TIM_Base_Start+0x70>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800464a:	d01d      	beq.n	8004688 <HAL_TIM_Base_Start+0x70>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a1f      	ldr	r2, [pc, #124]	@ (80046d0 <HAL_TIM_Base_Start+0xb8>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d018      	beq.n	8004688 <HAL_TIM_Base_Start+0x70>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a1e      	ldr	r2, [pc, #120]	@ (80046d4 <HAL_TIM_Base_Start+0xbc>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d013      	beq.n	8004688 <HAL_TIM_Base_Start+0x70>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a1c      	ldr	r2, [pc, #112]	@ (80046d8 <HAL_TIM_Base_Start+0xc0>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d00e      	beq.n	8004688 <HAL_TIM_Base_Start+0x70>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a1b      	ldr	r2, [pc, #108]	@ (80046dc <HAL_TIM_Base_Start+0xc4>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d009      	beq.n	8004688 <HAL_TIM_Base_Start+0x70>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a19      	ldr	r2, [pc, #100]	@ (80046e0 <HAL_TIM_Base_Start+0xc8>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d004      	beq.n	8004688 <HAL_TIM_Base_Start+0x70>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a18      	ldr	r2, [pc, #96]	@ (80046e4 <HAL_TIM_Base_Start+0xcc>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d111      	bne.n	80046ac <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f003 0307 	and.w	r3, r3, #7
 8004692:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b06      	cmp	r3, #6
 8004698:	d010      	beq.n	80046bc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f042 0201 	orr.w	r2, r2, #1
 80046a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046aa:	e007      	b.n	80046bc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f042 0201 	orr.w	r2, r2, #1
 80046ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40010000 	.word	0x40010000
 80046d0:	40000400 	.word	0x40000400
 80046d4:	40000800 	.word	0x40000800
 80046d8:	40000c00 	.word	0x40000c00
 80046dc:	40010400 	.word	0x40010400
 80046e0:	40014000 	.word	0x40014000
 80046e4:	40001800 	.word	0x40001800

080046e8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e041      	b.n	800477e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d106      	bne.n	8004714 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f839 	bl	8004786 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	3304      	adds	r3, #4
 8004724:	4619      	mov	r1, r3
 8004726:	4610      	mov	r0, r2
 8004728:	f000 fc20 	bl	8004f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004786:	b480      	push	{r7}
 8004788:	b083      	sub	sp, #12
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800478e:	bf00      	nop
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
	...

0800479c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d104      	bne.n	80047ba <HAL_TIM_IC_Start_IT+0x1e>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	e013      	b.n	80047e2 <HAL_TIM_IC_Start_IT+0x46>
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	2b04      	cmp	r3, #4
 80047be:	d104      	bne.n	80047ca <HAL_TIM_IC_Start_IT+0x2e>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	e00b      	b.n	80047e2 <HAL_TIM_IC_Start_IT+0x46>
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	2b08      	cmp	r3, #8
 80047ce:	d104      	bne.n	80047da <HAL_TIM_IC_Start_IT+0x3e>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	e003      	b.n	80047e2 <HAL_TIM_IC_Start_IT+0x46>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d104      	bne.n	80047f4 <HAL_TIM_IC_Start_IT+0x58>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	e013      	b.n	800481c <HAL_TIM_IC_Start_IT+0x80>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	d104      	bne.n	8004804 <HAL_TIM_IC_Start_IT+0x68>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004800:	b2db      	uxtb	r3, r3
 8004802:	e00b      	b.n	800481c <HAL_TIM_IC_Start_IT+0x80>
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	2b08      	cmp	r3, #8
 8004808:	d104      	bne.n	8004814 <HAL_TIM_IC_Start_IT+0x78>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004810:	b2db      	uxtb	r3, r3
 8004812:	e003      	b.n	800481c <HAL_TIM_IC_Start_IT+0x80>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800481a:	b2db      	uxtb	r3, r3
 800481c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800481e:	7bbb      	ldrb	r3, [r7, #14]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d102      	bne.n	800482a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004824:	7b7b      	ldrb	r3, [r7, #13]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d001      	beq.n	800482e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e0cc      	b.n	80049c8 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d104      	bne.n	800483e <HAL_TIM_IC_Start_IT+0xa2>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2202      	movs	r2, #2
 8004838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800483c:	e013      	b.n	8004866 <HAL_TIM_IC_Start_IT+0xca>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b04      	cmp	r3, #4
 8004842:	d104      	bne.n	800484e <HAL_TIM_IC_Start_IT+0xb2>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2202      	movs	r2, #2
 8004848:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800484c:	e00b      	b.n	8004866 <HAL_TIM_IC_Start_IT+0xca>
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2b08      	cmp	r3, #8
 8004852:	d104      	bne.n	800485e <HAL_TIM_IC_Start_IT+0xc2>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2202      	movs	r2, #2
 8004858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800485c:	e003      	b.n	8004866 <HAL_TIM_IC_Start_IT+0xca>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2202      	movs	r2, #2
 8004862:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d104      	bne.n	8004876 <HAL_TIM_IC_Start_IT+0xda>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004874:	e013      	b.n	800489e <HAL_TIM_IC_Start_IT+0x102>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b04      	cmp	r3, #4
 800487a:	d104      	bne.n	8004886 <HAL_TIM_IC_Start_IT+0xea>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004884:	e00b      	b.n	800489e <HAL_TIM_IC_Start_IT+0x102>
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b08      	cmp	r3, #8
 800488a:	d104      	bne.n	8004896 <HAL_TIM_IC_Start_IT+0xfa>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2202      	movs	r2, #2
 8004890:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004894:	e003      	b.n	800489e <HAL_TIM_IC_Start_IT+0x102>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2202      	movs	r2, #2
 800489a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b0c      	cmp	r3, #12
 80048a2:	d841      	bhi.n	8004928 <HAL_TIM_IC_Start_IT+0x18c>
 80048a4:	a201      	add	r2, pc, #4	@ (adr r2, 80048ac <HAL_TIM_IC_Start_IT+0x110>)
 80048a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048aa:	bf00      	nop
 80048ac:	080048e1 	.word	0x080048e1
 80048b0:	08004929 	.word	0x08004929
 80048b4:	08004929 	.word	0x08004929
 80048b8:	08004929 	.word	0x08004929
 80048bc:	080048f3 	.word	0x080048f3
 80048c0:	08004929 	.word	0x08004929
 80048c4:	08004929 	.word	0x08004929
 80048c8:	08004929 	.word	0x08004929
 80048cc:	08004905 	.word	0x08004905
 80048d0:	08004929 	.word	0x08004929
 80048d4:	08004929 	.word	0x08004929
 80048d8:	08004929 	.word	0x08004929
 80048dc:	08004917 	.word	0x08004917
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0202 	orr.w	r2, r2, #2
 80048ee:	60da      	str	r2, [r3, #12]
      break;
 80048f0:	e01d      	b.n	800492e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68da      	ldr	r2, [r3, #12]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f042 0204 	orr.w	r2, r2, #4
 8004900:	60da      	str	r2, [r3, #12]
      break;
 8004902:	e014      	b.n	800492e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68da      	ldr	r2, [r3, #12]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f042 0208 	orr.w	r2, r2, #8
 8004912:	60da      	str	r2, [r3, #12]
      break;
 8004914:	e00b      	b.n	800492e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68da      	ldr	r2, [r3, #12]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f042 0210 	orr.w	r2, r2, #16
 8004924:	60da      	str	r2, [r3, #12]
      break;
 8004926:	e002      	b.n	800492e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	73fb      	strb	r3, [r7, #15]
      break;
 800492c:	bf00      	nop
  }

  if (status == HAL_OK)
 800492e:	7bfb      	ldrb	r3, [r7, #15]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d148      	bne.n	80049c6 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2201      	movs	r2, #1
 800493a:	6839      	ldr	r1, [r7, #0]
 800493c:	4618      	mov	r0, r3
 800493e:	f000 fd85 	bl	800544c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a22      	ldr	r2, [pc, #136]	@ (80049d0 <HAL_TIM_IC_Start_IT+0x234>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d022      	beq.n	8004992 <HAL_TIM_IC_Start_IT+0x1f6>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004954:	d01d      	beq.n	8004992 <HAL_TIM_IC_Start_IT+0x1f6>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a1e      	ldr	r2, [pc, #120]	@ (80049d4 <HAL_TIM_IC_Start_IT+0x238>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d018      	beq.n	8004992 <HAL_TIM_IC_Start_IT+0x1f6>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a1c      	ldr	r2, [pc, #112]	@ (80049d8 <HAL_TIM_IC_Start_IT+0x23c>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d013      	beq.n	8004992 <HAL_TIM_IC_Start_IT+0x1f6>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a1b      	ldr	r2, [pc, #108]	@ (80049dc <HAL_TIM_IC_Start_IT+0x240>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d00e      	beq.n	8004992 <HAL_TIM_IC_Start_IT+0x1f6>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a19      	ldr	r2, [pc, #100]	@ (80049e0 <HAL_TIM_IC_Start_IT+0x244>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d009      	beq.n	8004992 <HAL_TIM_IC_Start_IT+0x1f6>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a18      	ldr	r2, [pc, #96]	@ (80049e4 <HAL_TIM_IC_Start_IT+0x248>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d004      	beq.n	8004992 <HAL_TIM_IC_Start_IT+0x1f6>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a16      	ldr	r2, [pc, #88]	@ (80049e8 <HAL_TIM_IC_Start_IT+0x24c>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d111      	bne.n	80049b6 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f003 0307 	and.w	r3, r3, #7
 800499c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	2b06      	cmp	r3, #6
 80049a2:	d010      	beq.n	80049c6 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f042 0201 	orr.w	r2, r2, #1
 80049b2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049b4:	e007      	b.n	80049c6 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f042 0201 	orr.w	r2, r2, #1
 80049c4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	40010000 	.word	0x40010000
 80049d4:	40000400 	.word	0x40000400
 80049d8:	40000800 	.word	0x40000800
 80049dc:	40000c00 	.word	0x40000c00
 80049e0:	40010400 	.word	0x40010400
 80049e4:	40014000 	.word	0x40014000
 80049e8:	40001800 	.word	0x40001800

080049ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d020      	beq.n	8004a50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d01b      	beq.n	8004a50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f06f 0202 	mvn.w	r2, #2
 8004a20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	f003 0303 	and.w	r3, r3, #3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d003      	beq.n	8004a3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7fc fc60 	bl	80012fc <HAL_TIM_IC_CaptureCallback>
 8004a3c:	e005      	b.n	8004a4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 fa76 	bl	8004f30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 fa7d 	bl	8004f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	f003 0304 	and.w	r3, r3, #4
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d020      	beq.n	8004a9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d01b      	beq.n	8004a9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f06f 0204 	mvn.w	r2, #4
 8004a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2202      	movs	r2, #2
 8004a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7fc fc3a 	bl	80012fc <HAL_TIM_IC_CaptureCallback>
 8004a88:	e005      	b.n	8004a96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 fa50 	bl	8004f30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 fa57 	bl	8004f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	f003 0308 	and.w	r3, r3, #8
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d020      	beq.n	8004ae8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f003 0308 	and.w	r3, r3, #8
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d01b      	beq.n	8004ae8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f06f 0208 	mvn.w	r2, #8
 8004ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2204      	movs	r2, #4
 8004abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	69db      	ldr	r3, [r3, #28]
 8004ac6:	f003 0303 	and.w	r3, r3, #3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7fc fc14 	bl	80012fc <HAL_TIM_IC_CaptureCallback>
 8004ad4:	e005      	b.n	8004ae2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 fa2a 	bl	8004f30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 fa31 	bl	8004f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	f003 0310 	and.w	r3, r3, #16
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d020      	beq.n	8004b34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f003 0310 	and.w	r3, r3, #16
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d01b      	beq.n	8004b34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f06f 0210 	mvn.w	r2, #16
 8004b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2208      	movs	r2, #8
 8004b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7fc fbee 	bl	80012fc <HAL_TIM_IC_CaptureCallback>
 8004b20:	e005      	b.n	8004b2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 fa04 	bl	8004f30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 fa0b 	bl	8004f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00c      	beq.n	8004b58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d007      	beq.n	8004b58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f06f 0201 	mvn.w	r2, #1
 8004b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f9e2 	bl	8004f1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00c      	beq.n	8004b7c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d007      	beq.n	8004b7c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 fd14 	bl	80055a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00c      	beq.n	8004ba0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d007      	beq.n	8004ba0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f9dc 	bl	8004f58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	f003 0320 	and.w	r3, r3, #32
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00c      	beq.n	8004bc4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f003 0320 	and.w	r3, r3, #32
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d007      	beq.n	8004bc4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f06f 0220 	mvn.w	r2, #32
 8004bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 fce6 	bl	8005590 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bc4:	bf00      	nop
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d101      	bne.n	8004bea <HAL_TIM_IC_ConfigChannel+0x1e>
 8004be6:	2302      	movs	r3, #2
 8004be8:	e088      	b.n	8004cfc <HAL_TIM_IC_ConfigChannel+0x130>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d11b      	bne.n	8004c30 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004c08:	f000 fa5c 	bl	80050c4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	699a      	ldr	r2, [r3, #24]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 020c 	bic.w	r2, r2, #12
 8004c1a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6999      	ldr	r1, [r3, #24]
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	689a      	ldr	r2, [r3, #8]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	619a      	str	r2, [r3, #24]
 8004c2e:	e060      	b.n	8004cf2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	d11c      	bne.n	8004c70 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004c46:	f000 fae0 	bl	800520a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	699a      	ldr	r2, [r3, #24]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004c58:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	6999      	ldr	r1, [r3, #24]
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	021a      	lsls	r2, r3, #8
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	619a      	str	r2, [r3, #24]
 8004c6e:	e040      	b.n	8004cf2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b08      	cmp	r3, #8
 8004c74:	d11b      	bne.n	8004cae <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004c86:	f000 fb2d 	bl	80052e4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	69da      	ldr	r2, [r3, #28]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 020c 	bic.w	r2, r2, #12
 8004c98:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69d9      	ldr	r1, [r3, #28]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	689a      	ldr	r2, [r3, #8]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	61da      	str	r2, [r3, #28]
 8004cac:	e021      	b.n	8004cf2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2b0c      	cmp	r3, #12
 8004cb2:	d11c      	bne.n	8004cee <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004cc4:	f000 fb4a 	bl	800535c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	69da      	ldr	r2, [r3, #28]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004cd6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	69d9      	ldr	r1, [r3, #28]
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	021a      	lsls	r2, r3, #8
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	61da      	str	r2, [r3, #28]
 8004cec:	e001      	b.n	8004cf2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3718      	adds	r7, #24
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d101      	bne.n	8004d20 <HAL_TIM_ConfigClockSource+0x1c>
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	e0b4      	b.n	8004e8a <HAL_TIM_ConfigClockSource+0x186>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004d3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d58:	d03e      	beq.n	8004dd8 <HAL_TIM_ConfigClockSource+0xd4>
 8004d5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d5e:	f200 8087 	bhi.w	8004e70 <HAL_TIM_ConfigClockSource+0x16c>
 8004d62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d66:	f000 8086 	beq.w	8004e76 <HAL_TIM_ConfigClockSource+0x172>
 8004d6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d6e:	d87f      	bhi.n	8004e70 <HAL_TIM_ConfigClockSource+0x16c>
 8004d70:	2b70      	cmp	r3, #112	@ 0x70
 8004d72:	d01a      	beq.n	8004daa <HAL_TIM_ConfigClockSource+0xa6>
 8004d74:	2b70      	cmp	r3, #112	@ 0x70
 8004d76:	d87b      	bhi.n	8004e70 <HAL_TIM_ConfigClockSource+0x16c>
 8004d78:	2b60      	cmp	r3, #96	@ 0x60
 8004d7a:	d050      	beq.n	8004e1e <HAL_TIM_ConfigClockSource+0x11a>
 8004d7c:	2b60      	cmp	r3, #96	@ 0x60
 8004d7e:	d877      	bhi.n	8004e70 <HAL_TIM_ConfigClockSource+0x16c>
 8004d80:	2b50      	cmp	r3, #80	@ 0x50
 8004d82:	d03c      	beq.n	8004dfe <HAL_TIM_ConfigClockSource+0xfa>
 8004d84:	2b50      	cmp	r3, #80	@ 0x50
 8004d86:	d873      	bhi.n	8004e70 <HAL_TIM_ConfigClockSource+0x16c>
 8004d88:	2b40      	cmp	r3, #64	@ 0x40
 8004d8a:	d058      	beq.n	8004e3e <HAL_TIM_ConfigClockSource+0x13a>
 8004d8c:	2b40      	cmp	r3, #64	@ 0x40
 8004d8e:	d86f      	bhi.n	8004e70 <HAL_TIM_ConfigClockSource+0x16c>
 8004d90:	2b30      	cmp	r3, #48	@ 0x30
 8004d92:	d064      	beq.n	8004e5e <HAL_TIM_ConfigClockSource+0x15a>
 8004d94:	2b30      	cmp	r3, #48	@ 0x30
 8004d96:	d86b      	bhi.n	8004e70 <HAL_TIM_ConfigClockSource+0x16c>
 8004d98:	2b20      	cmp	r3, #32
 8004d9a:	d060      	beq.n	8004e5e <HAL_TIM_ConfigClockSource+0x15a>
 8004d9c:	2b20      	cmp	r3, #32
 8004d9e:	d867      	bhi.n	8004e70 <HAL_TIM_ConfigClockSource+0x16c>
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d05c      	beq.n	8004e5e <HAL_TIM_ConfigClockSource+0x15a>
 8004da4:	2b10      	cmp	r3, #16
 8004da6:	d05a      	beq.n	8004e5e <HAL_TIM_ConfigClockSource+0x15a>
 8004da8:	e062      	b.n	8004e70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004dba:	f000 fb27 	bl	800540c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004dcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	609a      	str	r2, [r3, #8]
      break;
 8004dd6:	e04f      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004de8:	f000 fb10 	bl	800540c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689a      	ldr	r2, [r3, #8]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004dfa:	609a      	str	r2, [r3, #8]
      break;
 8004dfc:	e03c      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	f000 f9ce 	bl	80051ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2150      	movs	r1, #80	@ 0x50
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 fadd 	bl	80053d6 <TIM_ITRx_SetConfig>
      break;
 8004e1c:	e02c      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	f000 fa2a 	bl	8005284 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2160      	movs	r1, #96	@ 0x60
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 facd 	bl	80053d6 <TIM_ITRx_SetConfig>
      break;
 8004e3c:	e01c      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	f000 f9ae 	bl	80051ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2140      	movs	r1, #64	@ 0x40
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 fabd 	bl	80053d6 <TIM_ITRx_SetConfig>
      break;
 8004e5c:	e00c      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4619      	mov	r1, r3
 8004e68:	4610      	mov	r0, r2
 8004e6a:	f000 fab4 	bl	80053d6 <TIM_ITRx_SetConfig>
      break;
 8004e6e:	e003      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	73fb      	strb	r3, [r7, #15]
      break;
 8004e74:	e000      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
	...

08004e94 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2b0c      	cmp	r3, #12
 8004ea6:	d831      	bhi.n	8004f0c <HAL_TIM_ReadCapturedValue+0x78>
 8004ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8004eb0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eae:	bf00      	nop
 8004eb0:	08004ee5 	.word	0x08004ee5
 8004eb4:	08004f0d 	.word	0x08004f0d
 8004eb8:	08004f0d 	.word	0x08004f0d
 8004ebc:	08004f0d 	.word	0x08004f0d
 8004ec0:	08004eef 	.word	0x08004eef
 8004ec4:	08004f0d 	.word	0x08004f0d
 8004ec8:	08004f0d 	.word	0x08004f0d
 8004ecc:	08004f0d 	.word	0x08004f0d
 8004ed0:	08004ef9 	.word	0x08004ef9
 8004ed4:	08004f0d 	.word	0x08004f0d
 8004ed8:	08004f0d 	.word	0x08004f0d
 8004edc:	08004f0d 	.word	0x08004f0d
 8004ee0:	08004f03 	.word	0x08004f03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eea:	60fb      	str	r3, [r7, #12]

      break;
 8004eec:	e00f      	b.n	8004f0e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef4:	60fb      	str	r3, [r7, #12]

      break;
 8004ef6:	e00a      	b.n	8004f0e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004efe:	60fb      	str	r3, [r7, #12]

      break;
 8004f00:	e005      	b.n	8004f0e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f08:	60fb      	str	r3, [r7, #12]

      break;
 8004f0a:	e000      	b.n	8004f0e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004f0c:	bf00      	nop
  }

  return tmpreg;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f38:	bf00      	nop
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a46      	ldr	r2, [pc, #280]	@ (8005098 <TIM_Base_SetConfig+0x12c>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d013      	beq.n	8004fac <TIM_Base_SetConfig+0x40>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f8a:	d00f      	beq.n	8004fac <TIM_Base_SetConfig+0x40>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a43      	ldr	r2, [pc, #268]	@ (800509c <TIM_Base_SetConfig+0x130>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d00b      	beq.n	8004fac <TIM_Base_SetConfig+0x40>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a42      	ldr	r2, [pc, #264]	@ (80050a0 <TIM_Base_SetConfig+0x134>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d007      	beq.n	8004fac <TIM_Base_SetConfig+0x40>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a41      	ldr	r2, [pc, #260]	@ (80050a4 <TIM_Base_SetConfig+0x138>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d003      	beq.n	8004fac <TIM_Base_SetConfig+0x40>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a40      	ldr	r2, [pc, #256]	@ (80050a8 <TIM_Base_SetConfig+0x13c>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d108      	bne.n	8004fbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a35      	ldr	r2, [pc, #212]	@ (8005098 <TIM_Base_SetConfig+0x12c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d02b      	beq.n	800501e <TIM_Base_SetConfig+0xb2>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fcc:	d027      	beq.n	800501e <TIM_Base_SetConfig+0xb2>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a32      	ldr	r2, [pc, #200]	@ (800509c <TIM_Base_SetConfig+0x130>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d023      	beq.n	800501e <TIM_Base_SetConfig+0xb2>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a31      	ldr	r2, [pc, #196]	@ (80050a0 <TIM_Base_SetConfig+0x134>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d01f      	beq.n	800501e <TIM_Base_SetConfig+0xb2>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a30      	ldr	r2, [pc, #192]	@ (80050a4 <TIM_Base_SetConfig+0x138>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d01b      	beq.n	800501e <TIM_Base_SetConfig+0xb2>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a2f      	ldr	r2, [pc, #188]	@ (80050a8 <TIM_Base_SetConfig+0x13c>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d017      	beq.n	800501e <TIM_Base_SetConfig+0xb2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a2e      	ldr	r2, [pc, #184]	@ (80050ac <TIM_Base_SetConfig+0x140>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d013      	beq.n	800501e <TIM_Base_SetConfig+0xb2>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a2d      	ldr	r2, [pc, #180]	@ (80050b0 <TIM_Base_SetConfig+0x144>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d00f      	beq.n	800501e <TIM_Base_SetConfig+0xb2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a2c      	ldr	r2, [pc, #176]	@ (80050b4 <TIM_Base_SetConfig+0x148>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d00b      	beq.n	800501e <TIM_Base_SetConfig+0xb2>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a2b      	ldr	r2, [pc, #172]	@ (80050b8 <TIM_Base_SetConfig+0x14c>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d007      	beq.n	800501e <TIM_Base_SetConfig+0xb2>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a2a      	ldr	r2, [pc, #168]	@ (80050bc <TIM_Base_SetConfig+0x150>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d003      	beq.n	800501e <TIM_Base_SetConfig+0xb2>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a29      	ldr	r2, [pc, #164]	@ (80050c0 <TIM_Base_SetConfig+0x154>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d108      	bne.n	8005030 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	4313      	orrs	r3, r2
 800502e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	4313      	orrs	r3, r2
 800503c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a10      	ldr	r2, [pc, #64]	@ (8005098 <TIM_Base_SetConfig+0x12c>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d003      	beq.n	8005064 <TIM_Base_SetConfig+0xf8>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a12      	ldr	r2, [pc, #72]	@ (80050a8 <TIM_Base_SetConfig+0x13c>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d103      	bne.n	800506c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	691a      	ldr	r2, [r3, #16]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b01      	cmp	r3, #1
 800507c:	d105      	bne.n	800508a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	f023 0201 	bic.w	r2, r3, #1
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	611a      	str	r2, [r3, #16]
  }
}
 800508a:	bf00      	nop
 800508c:	3714      	adds	r7, #20
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	40010000 	.word	0x40010000
 800509c:	40000400 	.word	0x40000400
 80050a0:	40000800 	.word	0x40000800
 80050a4:	40000c00 	.word	0x40000c00
 80050a8:	40010400 	.word	0x40010400
 80050ac:	40014000 	.word	0x40014000
 80050b0:	40014400 	.word	0x40014400
 80050b4:	40014800 	.word	0x40014800
 80050b8:	40001800 	.word	0x40001800
 80050bc:	40001c00 	.word	0x40001c00
 80050c0:	40002000 	.word	0x40002000

080050c4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b087      	sub	sp, #28
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
 80050d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6a1b      	ldr	r3, [r3, #32]
 80050dc:	f023 0201 	bic.w	r2, r3, #1
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4a28      	ldr	r2, [pc, #160]	@ (8005190 <TIM_TI1_SetConfig+0xcc>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d01b      	beq.n	800512a <TIM_TI1_SetConfig+0x66>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050f8:	d017      	beq.n	800512a <TIM_TI1_SetConfig+0x66>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	4a25      	ldr	r2, [pc, #148]	@ (8005194 <TIM_TI1_SetConfig+0xd0>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d013      	beq.n	800512a <TIM_TI1_SetConfig+0x66>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	4a24      	ldr	r2, [pc, #144]	@ (8005198 <TIM_TI1_SetConfig+0xd4>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d00f      	beq.n	800512a <TIM_TI1_SetConfig+0x66>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	4a23      	ldr	r2, [pc, #140]	@ (800519c <TIM_TI1_SetConfig+0xd8>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d00b      	beq.n	800512a <TIM_TI1_SetConfig+0x66>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	4a22      	ldr	r2, [pc, #136]	@ (80051a0 <TIM_TI1_SetConfig+0xdc>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d007      	beq.n	800512a <TIM_TI1_SetConfig+0x66>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	4a21      	ldr	r2, [pc, #132]	@ (80051a4 <TIM_TI1_SetConfig+0xe0>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d003      	beq.n	800512a <TIM_TI1_SetConfig+0x66>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	4a20      	ldr	r2, [pc, #128]	@ (80051a8 <TIM_TI1_SetConfig+0xe4>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d101      	bne.n	800512e <TIM_TI1_SetConfig+0x6a>
 800512a:	2301      	movs	r3, #1
 800512c:	e000      	b.n	8005130 <TIM_TI1_SetConfig+0x6c>
 800512e:	2300      	movs	r3, #0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d008      	beq.n	8005146 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f023 0303 	bic.w	r3, r3, #3
 800513a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4313      	orrs	r3, r2
 8005142:	617b      	str	r3, [r7, #20]
 8005144:	e003      	b.n	800514e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f043 0301 	orr.w	r3, r3, #1
 800514c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005154:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	011b      	lsls	r3, r3, #4
 800515a:	b2db      	uxtb	r3, r3
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	4313      	orrs	r3, r2
 8005160:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f023 030a 	bic.w	r3, r3, #10
 8005168:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	f003 030a 	and.w	r3, r3, #10
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	4313      	orrs	r3, r2
 8005174:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	621a      	str	r2, [r3, #32]
}
 8005182:	bf00      	nop
 8005184:	371c      	adds	r7, #28
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	40010000 	.word	0x40010000
 8005194:	40000400 	.word	0x40000400
 8005198:	40000800 	.word	0x40000800
 800519c:	40000c00 	.word	0x40000c00
 80051a0:	40010400 	.word	0x40010400
 80051a4:	40014000 	.word	0x40014000
 80051a8:	40001800 	.word	0x40001800

080051ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	f023 0201 	bic.w	r2, r3, #1
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	011b      	lsls	r3, r3, #4
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	4313      	orrs	r3, r2
 80051e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f023 030a 	bic.w	r3, r3, #10
 80051e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	621a      	str	r2, [r3, #32]
}
 80051fe:	bf00      	nop
 8005200:	371c      	adds	r7, #28
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800520a:	b480      	push	{r7}
 800520c:	b087      	sub	sp, #28
 800520e:	af00      	add	r7, sp, #0
 8005210:	60f8      	str	r0, [r7, #12]
 8005212:	60b9      	str	r1, [r7, #8]
 8005214:	607a      	str	r2, [r7, #4]
 8005216:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	f023 0210 	bic.w	r2, r3, #16
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005236:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	021b      	lsls	r3, r3, #8
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	4313      	orrs	r3, r2
 8005240:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005248:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	031b      	lsls	r3, r3, #12
 800524e:	b29b      	uxth	r3, r3
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	4313      	orrs	r3, r2
 8005254:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800525c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	011b      	lsls	r3, r3, #4
 8005262:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	4313      	orrs	r3, r2
 800526a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	621a      	str	r2, [r3, #32]
}
 8005278:	bf00      	nop
 800527a:	371c      	adds	r7, #28
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005284:	b480      	push	{r7}
 8005286:	b087      	sub	sp, #28
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	f023 0210 	bic.w	r2, r3, #16
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80052ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	031b      	lsls	r3, r3, #12
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80052c0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	011b      	lsls	r3, r3, #4
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	621a      	str	r2, [r3, #32]
}
 80052d8:	bf00      	nop
 80052da:	371c      	adds	r7, #28
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
 80052f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6a1b      	ldr	r3, [r3, #32]
 80052fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	69db      	ldr	r3, [r3, #28]
 8005308:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	f023 0303 	bic.w	r3, r3, #3
 8005310:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4313      	orrs	r3, r2
 8005318:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005320:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	011b      	lsls	r3, r3, #4
 8005326:	b2db      	uxtb	r3, r3
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	4313      	orrs	r3, r2
 800532c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005334:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	021b      	lsls	r3, r3, #8
 800533a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	4313      	orrs	r3, r2
 8005342:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	621a      	str	r2, [r3, #32]
}
 8005350:	bf00      	nop
 8005352:	371c      	adds	r7, #28
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800535c:	b480      	push	{r7}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
 8005368:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	69db      	ldr	r3, [r3, #28]
 8005380:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005388:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	021b      	lsls	r3, r3, #8
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	4313      	orrs	r3, r2
 8005392:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800539a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	031b      	lsls	r3, r3, #12
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80053ae:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	031b      	lsls	r3, r3, #12
 80053b4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	621a      	str	r2, [r3, #32]
}
 80053ca:	bf00      	nop
 80053cc:	371c      	adds	r7, #28
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b085      	sub	sp, #20
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
 80053de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	f043 0307 	orr.w	r3, r3, #7
 80053f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	609a      	str	r2, [r3, #8]
}
 8005400:	bf00      	nop
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800540c:	b480      	push	{r7}
 800540e:	b087      	sub	sp, #28
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
 8005418:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005426:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	021a      	lsls	r2, r3, #8
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	431a      	orrs	r2, r3
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	4313      	orrs	r3, r2
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	4313      	orrs	r3, r2
 8005438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	609a      	str	r2, [r3, #8]
}
 8005440:	bf00      	nop
 8005442:	371c      	adds	r7, #28
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800544c:	b480      	push	{r7}
 800544e:	b087      	sub	sp, #28
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	f003 031f 	and.w	r3, r3, #31
 800545e:	2201      	movs	r2, #1
 8005460:	fa02 f303 	lsl.w	r3, r2, r3
 8005464:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6a1a      	ldr	r2, [r3, #32]
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	43db      	mvns	r3, r3
 800546e:	401a      	ands	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6a1a      	ldr	r2, [r3, #32]
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	f003 031f 	and.w	r3, r3, #31
 800547e:	6879      	ldr	r1, [r7, #4]
 8005480:	fa01 f303 	lsl.w	r3, r1, r3
 8005484:	431a      	orrs	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	621a      	str	r2, [r3, #32]
}
 800548a:	bf00      	nop
 800548c:	371c      	adds	r7, #28
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
	...

08005498 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d101      	bne.n	80054b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054ac:	2302      	movs	r3, #2
 80054ae:	e05a      	b.n	8005566 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2202      	movs	r2, #2
 80054bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	4313      	orrs	r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a21      	ldr	r2, [pc, #132]	@ (8005574 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d022      	beq.n	800553a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054fc:	d01d      	beq.n	800553a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a1d      	ldr	r2, [pc, #116]	@ (8005578 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d018      	beq.n	800553a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a1b      	ldr	r2, [pc, #108]	@ (800557c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d013      	beq.n	800553a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a1a      	ldr	r2, [pc, #104]	@ (8005580 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d00e      	beq.n	800553a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a18      	ldr	r2, [pc, #96]	@ (8005584 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d009      	beq.n	800553a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a17      	ldr	r2, [pc, #92]	@ (8005588 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d004      	beq.n	800553a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a15      	ldr	r2, [pc, #84]	@ (800558c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d10c      	bne.n	8005554 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005540:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	4313      	orrs	r3, r2
 800554a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	40010000 	.word	0x40010000
 8005578:	40000400 	.word	0x40000400
 800557c:	40000800 	.word	0x40000800
 8005580:	40000c00 	.word	0x40000c00
 8005584:	40010400 	.word	0x40010400
 8005588:	40014000 	.word	0x40014000
 800558c:	40001800 	.word	0x40001800

08005590 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e042      	b.n	8005650 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d106      	bne.n	80055e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7fc fbe8 	bl	8001db4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2224      	movs	r2, #36	@ 0x24
 80055e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68da      	ldr	r2, [r3, #12]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80055fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 f973 	bl	80058e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	691a      	ldr	r2, [r3, #16]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005610:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	695a      	ldr	r2, [r3, #20]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005620:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68da      	ldr	r2, [r3, #12]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005630:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2220      	movs	r2, #32
 800563c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2220      	movs	r2, #32
 8005644:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3708      	adds	r7, #8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b08a      	sub	sp, #40	@ 0x28
 800565c:	af02      	add	r7, sp, #8
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	603b      	str	r3, [r7, #0]
 8005664:	4613      	mov	r3, r2
 8005666:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005672:	b2db      	uxtb	r3, r3
 8005674:	2b20      	cmp	r3, #32
 8005676:	d175      	bne.n	8005764 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d002      	beq.n	8005684 <HAL_UART_Transmit+0x2c>
 800567e:	88fb      	ldrh	r3, [r7, #6]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d101      	bne.n	8005688 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e06e      	b.n	8005766 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2221      	movs	r2, #33	@ 0x21
 8005692:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005696:	f7fc fd65 	bl	8002164 <HAL_GetTick>
 800569a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	88fa      	ldrh	r2, [r7, #6]
 80056a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	88fa      	ldrh	r2, [r7, #6]
 80056a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056b0:	d108      	bne.n	80056c4 <HAL_UART_Transmit+0x6c>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d104      	bne.n	80056c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80056ba:	2300      	movs	r3, #0
 80056bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	61bb      	str	r3, [r7, #24]
 80056c2:	e003      	b.n	80056cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056c8:	2300      	movs	r3, #0
 80056ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80056cc:	e02e      	b.n	800572c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	2200      	movs	r2, #0
 80056d6:	2180      	movs	r1, #128	@ 0x80
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f000 f848 	bl	800576e <UART_WaitOnFlagUntilTimeout>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d005      	beq.n	80056f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2220      	movs	r2, #32
 80056e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e03a      	b.n	8005766 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10b      	bne.n	800570e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	461a      	mov	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005704:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	3302      	adds	r3, #2
 800570a:	61bb      	str	r3, [r7, #24]
 800570c:	e007      	b.n	800571e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	781a      	ldrb	r2, [r3, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	3301      	adds	r3, #1
 800571c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005722:	b29b      	uxth	r3, r3
 8005724:	3b01      	subs	r3, #1
 8005726:	b29a      	uxth	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005730:	b29b      	uxth	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1cb      	bne.n	80056ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	2200      	movs	r2, #0
 800573e:	2140      	movs	r1, #64	@ 0x40
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f000 f814 	bl	800576e <UART_WaitOnFlagUntilTimeout>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d005      	beq.n	8005758 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2220      	movs	r2, #32
 8005750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e006      	b.n	8005766 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2220      	movs	r2, #32
 800575c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005760:	2300      	movs	r3, #0
 8005762:	e000      	b.n	8005766 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005764:	2302      	movs	r3, #2
  }
}
 8005766:	4618      	mov	r0, r3
 8005768:	3720      	adds	r7, #32
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b086      	sub	sp, #24
 8005772:	af00      	add	r7, sp, #0
 8005774:	60f8      	str	r0, [r7, #12]
 8005776:	60b9      	str	r1, [r7, #8]
 8005778:	603b      	str	r3, [r7, #0]
 800577a:	4613      	mov	r3, r2
 800577c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800577e:	e03b      	b.n	80057f8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005786:	d037      	beq.n	80057f8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005788:	f7fc fcec 	bl	8002164 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	6a3a      	ldr	r2, [r7, #32]
 8005794:	429a      	cmp	r2, r3
 8005796:	d302      	bcc.n	800579e <UART_WaitOnFlagUntilTimeout+0x30>
 8005798:	6a3b      	ldr	r3, [r7, #32]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d101      	bne.n	80057a2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e03a      	b.n	8005818 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	f003 0304 	and.w	r3, r3, #4
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d023      	beq.n	80057f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	2b80      	cmp	r3, #128	@ 0x80
 80057b4:	d020      	beq.n	80057f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	2b40      	cmp	r3, #64	@ 0x40
 80057ba:	d01d      	beq.n	80057f8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0308 	and.w	r3, r3, #8
 80057c6:	2b08      	cmp	r3, #8
 80057c8:	d116      	bne.n	80057f8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80057ca:	2300      	movs	r3, #0
 80057cc:	617b      	str	r3, [r7, #20]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	617b      	str	r3, [r7, #20]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	617b      	str	r3, [r7, #20]
 80057de:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f000 f81d 	bl	8005820 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2208      	movs	r2, #8
 80057ea:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e00f      	b.n	8005818 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	4013      	ands	r3, r2
 8005802:	68ba      	ldr	r2, [r7, #8]
 8005804:	429a      	cmp	r2, r3
 8005806:	bf0c      	ite	eq
 8005808:	2301      	moveq	r3, #1
 800580a:	2300      	movne	r3, #0
 800580c:	b2db      	uxtb	r3, r3
 800580e:	461a      	mov	r2, r3
 8005810:	79fb      	ldrb	r3, [r7, #7]
 8005812:	429a      	cmp	r2, r3
 8005814:	d0b4      	beq.n	8005780 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3718      	adds	r7, #24
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005820:	b480      	push	{r7}
 8005822:	b095      	sub	sp, #84	@ 0x54
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	330c      	adds	r3, #12
 800582e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005832:	e853 3f00 	ldrex	r3, [r3]
 8005836:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800583a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800583e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	330c      	adds	r3, #12
 8005846:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005848:	643a      	str	r2, [r7, #64]	@ 0x40
 800584a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800584e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005850:	e841 2300 	strex	r3, r2, [r1]
 8005854:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1e5      	bne.n	8005828 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	3314      	adds	r3, #20
 8005862:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	e853 3f00 	ldrex	r3, [r3]
 800586a:	61fb      	str	r3, [r7, #28]
   return(result);
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	f023 0301 	bic.w	r3, r3, #1
 8005872:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	3314      	adds	r3, #20
 800587a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800587c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800587e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005880:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005882:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005884:	e841 2300 	strex	r3, r2, [r1]
 8005888:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800588a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1e5      	bne.n	800585c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005894:	2b01      	cmp	r3, #1
 8005896:	d119      	bne.n	80058cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	330c      	adds	r3, #12
 800589e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	e853 3f00 	ldrex	r3, [r3]
 80058a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	f023 0310 	bic.w	r3, r3, #16
 80058ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	330c      	adds	r3, #12
 80058b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058b8:	61ba      	str	r2, [r7, #24]
 80058ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058bc:	6979      	ldr	r1, [r7, #20]
 80058be:	69ba      	ldr	r2, [r7, #24]
 80058c0:	e841 2300 	strex	r3, r2, [r1]
 80058c4:	613b      	str	r3, [r7, #16]
   return(result);
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1e5      	bne.n	8005898 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2220      	movs	r2, #32
 80058d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80058da:	bf00      	nop
 80058dc:	3754      	adds	r7, #84	@ 0x54
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
	...

080058e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058ec:	b0c0      	sub	sp, #256	@ 0x100
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005904:	68d9      	ldr	r1, [r3, #12]
 8005906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	ea40 0301 	orr.w	r3, r0, r1
 8005910:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005916:	689a      	ldr	r2, [r3, #8]
 8005918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	431a      	orrs	r2, r3
 8005920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	431a      	orrs	r2, r3
 8005928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800592c:	69db      	ldr	r3, [r3, #28]
 800592e:	4313      	orrs	r3, r2
 8005930:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005940:	f021 010c 	bic.w	r1, r1, #12
 8005944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800594e:	430b      	orrs	r3, r1
 8005950:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800595e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005962:	6999      	ldr	r1, [r3, #24]
 8005964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	ea40 0301 	orr.w	r3, r0, r1
 800596e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	4b8f      	ldr	r3, [pc, #572]	@ (8005bb4 <UART_SetConfig+0x2cc>)
 8005978:	429a      	cmp	r2, r3
 800597a:	d005      	beq.n	8005988 <UART_SetConfig+0xa0>
 800597c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	4b8d      	ldr	r3, [pc, #564]	@ (8005bb8 <UART_SetConfig+0x2d0>)
 8005984:	429a      	cmp	r2, r3
 8005986:	d104      	bne.n	8005992 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005988:	f7fe f914 	bl	8003bb4 <HAL_RCC_GetPCLK2Freq>
 800598c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005990:	e003      	b.n	800599a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005992:	f7fe f8fb 	bl	8003b8c <HAL_RCC_GetPCLK1Freq>
 8005996:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800599a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800599e:	69db      	ldr	r3, [r3, #28]
 80059a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059a4:	f040 810c 	bne.w	8005bc0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059ac:	2200      	movs	r2, #0
 80059ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80059b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80059b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80059ba:	4622      	mov	r2, r4
 80059bc:	462b      	mov	r3, r5
 80059be:	1891      	adds	r1, r2, r2
 80059c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80059c2:	415b      	adcs	r3, r3
 80059c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80059ca:	4621      	mov	r1, r4
 80059cc:	eb12 0801 	adds.w	r8, r2, r1
 80059d0:	4629      	mov	r1, r5
 80059d2:	eb43 0901 	adc.w	r9, r3, r1
 80059d6:	f04f 0200 	mov.w	r2, #0
 80059da:	f04f 0300 	mov.w	r3, #0
 80059de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059ea:	4690      	mov	r8, r2
 80059ec:	4699      	mov	r9, r3
 80059ee:	4623      	mov	r3, r4
 80059f0:	eb18 0303 	adds.w	r3, r8, r3
 80059f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80059f8:	462b      	mov	r3, r5
 80059fa:	eb49 0303 	adc.w	r3, r9, r3
 80059fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a0e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005a12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005a16:	460b      	mov	r3, r1
 8005a18:	18db      	adds	r3, r3, r3
 8005a1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	eb42 0303 	adc.w	r3, r2, r3
 8005a22:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005a28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005a2c:	f7fb f94c 	bl	8000cc8 <__aeabi_uldivmod>
 8005a30:	4602      	mov	r2, r0
 8005a32:	460b      	mov	r3, r1
 8005a34:	4b61      	ldr	r3, [pc, #388]	@ (8005bbc <UART_SetConfig+0x2d4>)
 8005a36:	fba3 2302 	umull	r2, r3, r3, r2
 8005a3a:	095b      	lsrs	r3, r3, #5
 8005a3c:	011c      	lsls	r4, r3, #4
 8005a3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a42:	2200      	movs	r2, #0
 8005a44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a48:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005a4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005a50:	4642      	mov	r2, r8
 8005a52:	464b      	mov	r3, r9
 8005a54:	1891      	adds	r1, r2, r2
 8005a56:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005a58:	415b      	adcs	r3, r3
 8005a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005a60:	4641      	mov	r1, r8
 8005a62:	eb12 0a01 	adds.w	sl, r2, r1
 8005a66:	4649      	mov	r1, r9
 8005a68:	eb43 0b01 	adc.w	fp, r3, r1
 8005a6c:	f04f 0200 	mov.w	r2, #0
 8005a70:	f04f 0300 	mov.w	r3, #0
 8005a74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a80:	4692      	mov	sl, r2
 8005a82:	469b      	mov	fp, r3
 8005a84:	4643      	mov	r3, r8
 8005a86:	eb1a 0303 	adds.w	r3, sl, r3
 8005a8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a8e:	464b      	mov	r3, r9
 8005a90:	eb4b 0303 	adc.w	r3, fp, r3
 8005a94:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005aa4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005aa8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005aac:	460b      	mov	r3, r1
 8005aae:	18db      	adds	r3, r3, r3
 8005ab0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	eb42 0303 	adc.w	r3, r2, r3
 8005ab8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005aba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005abe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005ac2:	f7fb f901 	bl	8000cc8 <__aeabi_uldivmod>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	460b      	mov	r3, r1
 8005aca:	4611      	mov	r1, r2
 8005acc:	4b3b      	ldr	r3, [pc, #236]	@ (8005bbc <UART_SetConfig+0x2d4>)
 8005ace:	fba3 2301 	umull	r2, r3, r3, r1
 8005ad2:	095b      	lsrs	r3, r3, #5
 8005ad4:	2264      	movs	r2, #100	@ 0x64
 8005ad6:	fb02 f303 	mul.w	r3, r2, r3
 8005ada:	1acb      	subs	r3, r1, r3
 8005adc:	00db      	lsls	r3, r3, #3
 8005ade:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005ae2:	4b36      	ldr	r3, [pc, #216]	@ (8005bbc <UART_SetConfig+0x2d4>)
 8005ae4:	fba3 2302 	umull	r2, r3, r3, r2
 8005ae8:	095b      	lsrs	r3, r3, #5
 8005aea:	005b      	lsls	r3, r3, #1
 8005aec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005af0:	441c      	add	r4, r3
 8005af2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005af6:	2200      	movs	r2, #0
 8005af8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005afc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005b00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005b04:	4642      	mov	r2, r8
 8005b06:	464b      	mov	r3, r9
 8005b08:	1891      	adds	r1, r2, r2
 8005b0a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005b0c:	415b      	adcs	r3, r3
 8005b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005b14:	4641      	mov	r1, r8
 8005b16:	1851      	adds	r1, r2, r1
 8005b18:	6339      	str	r1, [r7, #48]	@ 0x30
 8005b1a:	4649      	mov	r1, r9
 8005b1c:	414b      	adcs	r3, r1
 8005b1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b20:	f04f 0200 	mov.w	r2, #0
 8005b24:	f04f 0300 	mov.w	r3, #0
 8005b28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005b2c:	4659      	mov	r1, fp
 8005b2e:	00cb      	lsls	r3, r1, #3
 8005b30:	4651      	mov	r1, sl
 8005b32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b36:	4651      	mov	r1, sl
 8005b38:	00ca      	lsls	r2, r1, #3
 8005b3a:	4610      	mov	r0, r2
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	4603      	mov	r3, r0
 8005b40:	4642      	mov	r2, r8
 8005b42:	189b      	adds	r3, r3, r2
 8005b44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b48:	464b      	mov	r3, r9
 8005b4a:	460a      	mov	r2, r1
 8005b4c:	eb42 0303 	adc.w	r3, r2, r3
 8005b50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b60:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005b64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005b68:	460b      	mov	r3, r1
 8005b6a:	18db      	adds	r3, r3, r3
 8005b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b6e:	4613      	mov	r3, r2
 8005b70:	eb42 0303 	adc.w	r3, r2, r3
 8005b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005b7e:	f7fb f8a3 	bl	8000cc8 <__aeabi_uldivmod>
 8005b82:	4602      	mov	r2, r0
 8005b84:	460b      	mov	r3, r1
 8005b86:	4b0d      	ldr	r3, [pc, #52]	@ (8005bbc <UART_SetConfig+0x2d4>)
 8005b88:	fba3 1302 	umull	r1, r3, r3, r2
 8005b8c:	095b      	lsrs	r3, r3, #5
 8005b8e:	2164      	movs	r1, #100	@ 0x64
 8005b90:	fb01 f303 	mul.w	r3, r1, r3
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	00db      	lsls	r3, r3, #3
 8005b98:	3332      	adds	r3, #50	@ 0x32
 8005b9a:	4a08      	ldr	r2, [pc, #32]	@ (8005bbc <UART_SetConfig+0x2d4>)
 8005b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba0:	095b      	lsrs	r3, r3, #5
 8005ba2:	f003 0207 	and.w	r2, r3, #7
 8005ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4422      	add	r2, r4
 8005bae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005bb0:	e106      	b.n	8005dc0 <UART_SetConfig+0x4d8>
 8005bb2:	bf00      	nop
 8005bb4:	40011000 	.word	0x40011000
 8005bb8:	40011400 	.word	0x40011400
 8005bbc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005bca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005bce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005bd2:	4642      	mov	r2, r8
 8005bd4:	464b      	mov	r3, r9
 8005bd6:	1891      	adds	r1, r2, r2
 8005bd8:	6239      	str	r1, [r7, #32]
 8005bda:	415b      	adcs	r3, r3
 8005bdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005be2:	4641      	mov	r1, r8
 8005be4:	1854      	adds	r4, r2, r1
 8005be6:	4649      	mov	r1, r9
 8005be8:	eb43 0501 	adc.w	r5, r3, r1
 8005bec:	f04f 0200 	mov.w	r2, #0
 8005bf0:	f04f 0300 	mov.w	r3, #0
 8005bf4:	00eb      	lsls	r3, r5, #3
 8005bf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bfa:	00e2      	lsls	r2, r4, #3
 8005bfc:	4614      	mov	r4, r2
 8005bfe:	461d      	mov	r5, r3
 8005c00:	4643      	mov	r3, r8
 8005c02:	18e3      	adds	r3, r4, r3
 8005c04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005c08:	464b      	mov	r3, r9
 8005c0a:	eb45 0303 	adc.w	r3, r5, r3
 8005c0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c22:	f04f 0200 	mov.w	r2, #0
 8005c26:	f04f 0300 	mov.w	r3, #0
 8005c2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005c2e:	4629      	mov	r1, r5
 8005c30:	008b      	lsls	r3, r1, #2
 8005c32:	4621      	mov	r1, r4
 8005c34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c38:	4621      	mov	r1, r4
 8005c3a:	008a      	lsls	r2, r1, #2
 8005c3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005c40:	f7fb f842 	bl	8000cc8 <__aeabi_uldivmod>
 8005c44:	4602      	mov	r2, r0
 8005c46:	460b      	mov	r3, r1
 8005c48:	4b60      	ldr	r3, [pc, #384]	@ (8005dcc <UART_SetConfig+0x4e4>)
 8005c4a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c4e:	095b      	lsrs	r3, r3, #5
 8005c50:	011c      	lsls	r4, r3, #4
 8005c52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c56:	2200      	movs	r2, #0
 8005c58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005c60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005c64:	4642      	mov	r2, r8
 8005c66:	464b      	mov	r3, r9
 8005c68:	1891      	adds	r1, r2, r2
 8005c6a:	61b9      	str	r1, [r7, #24]
 8005c6c:	415b      	adcs	r3, r3
 8005c6e:	61fb      	str	r3, [r7, #28]
 8005c70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c74:	4641      	mov	r1, r8
 8005c76:	1851      	adds	r1, r2, r1
 8005c78:	6139      	str	r1, [r7, #16]
 8005c7a:	4649      	mov	r1, r9
 8005c7c:	414b      	adcs	r3, r1
 8005c7e:	617b      	str	r3, [r7, #20]
 8005c80:	f04f 0200 	mov.w	r2, #0
 8005c84:	f04f 0300 	mov.w	r3, #0
 8005c88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c8c:	4659      	mov	r1, fp
 8005c8e:	00cb      	lsls	r3, r1, #3
 8005c90:	4651      	mov	r1, sl
 8005c92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c96:	4651      	mov	r1, sl
 8005c98:	00ca      	lsls	r2, r1, #3
 8005c9a:	4610      	mov	r0, r2
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	4642      	mov	r2, r8
 8005ca2:	189b      	adds	r3, r3, r2
 8005ca4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ca8:	464b      	mov	r3, r9
 8005caa:	460a      	mov	r2, r1
 8005cac:	eb42 0303 	adc.w	r3, r2, r3
 8005cb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005cbe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005cc0:	f04f 0200 	mov.w	r2, #0
 8005cc4:	f04f 0300 	mov.w	r3, #0
 8005cc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005ccc:	4649      	mov	r1, r9
 8005cce:	008b      	lsls	r3, r1, #2
 8005cd0:	4641      	mov	r1, r8
 8005cd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cd6:	4641      	mov	r1, r8
 8005cd8:	008a      	lsls	r2, r1, #2
 8005cda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005cde:	f7fa fff3 	bl	8000cc8 <__aeabi_uldivmod>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	4611      	mov	r1, r2
 8005ce8:	4b38      	ldr	r3, [pc, #224]	@ (8005dcc <UART_SetConfig+0x4e4>)
 8005cea:	fba3 2301 	umull	r2, r3, r3, r1
 8005cee:	095b      	lsrs	r3, r3, #5
 8005cf0:	2264      	movs	r2, #100	@ 0x64
 8005cf2:	fb02 f303 	mul.w	r3, r2, r3
 8005cf6:	1acb      	subs	r3, r1, r3
 8005cf8:	011b      	lsls	r3, r3, #4
 8005cfa:	3332      	adds	r3, #50	@ 0x32
 8005cfc:	4a33      	ldr	r2, [pc, #204]	@ (8005dcc <UART_SetConfig+0x4e4>)
 8005cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8005d02:	095b      	lsrs	r3, r3, #5
 8005d04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d08:	441c      	add	r4, r3
 8005d0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d0e:	2200      	movs	r2, #0
 8005d10:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d12:	677a      	str	r2, [r7, #116]	@ 0x74
 8005d14:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005d18:	4642      	mov	r2, r8
 8005d1a:	464b      	mov	r3, r9
 8005d1c:	1891      	adds	r1, r2, r2
 8005d1e:	60b9      	str	r1, [r7, #8]
 8005d20:	415b      	adcs	r3, r3
 8005d22:	60fb      	str	r3, [r7, #12]
 8005d24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d28:	4641      	mov	r1, r8
 8005d2a:	1851      	adds	r1, r2, r1
 8005d2c:	6039      	str	r1, [r7, #0]
 8005d2e:	4649      	mov	r1, r9
 8005d30:	414b      	adcs	r3, r1
 8005d32:	607b      	str	r3, [r7, #4]
 8005d34:	f04f 0200 	mov.w	r2, #0
 8005d38:	f04f 0300 	mov.w	r3, #0
 8005d3c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d40:	4659      	mov	r1, fp
 8005d42:	00cb      	lsls	r3, r1, #3
 8005d44:	4651      	mov	r1, sl
 8005d46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d4a:	4651      	mov	r1, sl
 8005d4c:	00ca      	lsls	r2, r1, #3
 8005d4e:	4610      	mov	r0, r2
 8005d50:	4619      	mov	r1, r3
 8005d52:	4603      	mov	r3, r0
 8005d54:	4642      	mov	r2, r8
 8005d56:	189b      	adds	r3, r3, r2
 8005d58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d5a:	464b      	mov	r3, r9
 8005d5c:	460a      	mov	r2, r1
 8005d5e:	eb42 0303 	adc.w	r3, r2, r3
 8005d62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d6e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005d70:	f04f 0200 	mov.w	r2, #0
 8005d74:	f04f 0300 	mov.w	r3, #0
 8005d78:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005d7c:	4649      	mov	r1, r9
 8005d7e:	008b      	lsls	r3, r1, #2
 8005d80:	4641      	mov	r1, r8
 8005d82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d86:	4641      	mov	r1, r8
 8005d88:	008a      	lsls	r2, r1, #2
 8005d8a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005d8e:	f7fa ff9b 	bl	8000cc8 <__aeabi_uldivmod>
 8005d92:	4602      	mov	r2, r0
 8005d94:	460b      	mov	r3, r1
 8005d96:	4b0d      	ldr	r3, [pc, #52]	@ (8005dcc <UART_SetConfig+0x4e4>)
 8005d98:	fba3 1302 	umull	r1, r3, r3, r2
 8005d9c:	095b      	lsrs	r3, r3, #5
 8005d9e:	2164      	movs	r1, #100	@ 0x64
 8005da0:	fb01 f303 	mul.w	r3, r1, r3
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	011b      	lsls	r3, r3, #4
 8005da8:	3332      	adds	r3, #50	@ 0x32
 8005daa:	4a08      	ldr	r2, [pc, #32]	@ (8005dcc <UART_SetConfig+0x4e4>)
 8005dac:	fba2 2303 	umull	r2, r3, r2, r3
 8005db0:	095b      	lsrs	r3, r3, #5
 8005db2:	f003 020f 	and.w	r2, r3, #15
 8005db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4422      	add	r2, r4
 8005dbe:	609a      	str	r2, [r3, #8]
}
 8005dc0:	bf00      	nop
 8005dc2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dcc:	51eb851f 	.word	0x51eb851f

08005dd0 <__cvt>:
 8005dd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dd4:	ec57 6b10 	vmov	r6, r7, d0
 8005dd8:	2f00      	cmp	r7, #0
 8005dda:	460c      	mov	r4, r1
 8005ddc:	4619      	mov	r1, r3
 8005dde:	463b      	mov	r3, r7
 8005de0:	bfbb      	ittet	lt
 8005de2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005de6:	461f      	movlt	r7, r3
 8005de8:	2300      	movge	r3, #0
 8005dea:	232d      	movlt	r3, #45	@ 0x2d
 8005dec:	700b      	strb	r3, [r1, #0]
 8005dee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005df0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005df4:	4691      	mov	r9, r2
 8005df6:	f023 0820 	bic.w	r8, r3, #32
 8005dfa:	bfbc      	itt	lt
 8005dfc:	4632      	movlt	r2, r6
 8005dfe:	4616      	movlt	r6, r2
 8005e00:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005e04:	d005      	beq.n	8005e12 <__cvt+0x42>
 8005e06:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005e0a:	d100      	bne.n	8005e0e <__cvt+0x3e>
 8005e0c:	3401      	adds	r4, #1
 8005e0e:	2102      	movs	r1, #2
 8005e10:	e000      	b.n	8005e14 <__cvt+0x44>
 8005e12:	2103      	movs	r1, #3
 8005e14:	ab03      	add	r3, sp, #12
 8005e16:	9301      	str	r3, [sp, #4]
 8005e18:	ab02      	add	r3, sp, #8
 8005e1a:	9300      	str	r3, [sp, #0]
 8005e1c:	ec47 6b10 	vmov	d0, r6, r7
 8005e20:	4653      	mov	r3, sl
 8005e22:	4622      	mov	r2, r4
 8005e24:	f001 f888 	bl	8006f38 <_dtoa_r>
 8005e28:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005e2c:	4605      	mov	r5, r0
 8005e2e:	d119      	bne.n	8005e64 <__cvt+0x94>
 8005e30:	f019 0f01 	tst.w	r9, #1
 8005e34:	d00e      	beq.n	8005e54 <__cvt+0x84>
 8005e36:	eb00 0904 	add.w	r9, r0, r4
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	4630      	mov	r0, r6
 8005e40:	4639      	mov	r1, r7
 8005e42:	f7fa fe61 	bl	8000b08 <__aeabi_dcmpeq>
 8005e46:	b108      	cbz	r0, 8005e4c <__cvt+0x7c>
 8005e48:	f8cd 900c 	str.w	r9, [sp, #12]
 8005e4c:	2230      	movs	r2, #48	@ 0x30
 8005e4e:	9b03      	ldr	r3, [sp, #12]
 8005e50:	454b      	cmp	r3, r9
 8005e52:	d31e      	bcc.n	8005e92 <__cvt+0xc2>
 8005e54:	9b03      	ldr	r3, [sp, #12]
 8005e56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005e58:	1b5b      	subs	r3, r3, r5
 8005e5a:	4628      	mov	r0, r5
 8005e5c:	6013      	str	r3, [r2, #0]
 8005e5e:	b004      	add	sp, #16
 8005e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005e68:	eb00 0904 	add.w	r9, r0, r4
 8005e6c:	d1e5      	bne.n	8005e3a <__cvt+0x6a>
 8005e6e:	7803      	ldrb	r3, [r0, #0]
 8005e70:	2b30      	cmp	r3, #48	@ 0x30
 8005e72:	d10a      	bne.n	8005e8a <__cvt+0xba>
 8005e74:	2200      	movs	r2, #0
 8005e76:	2300      	movs	r3, #0
 8005e78:	4630      	mov	r0, r6
 8005e7a:	4639      	mov	r1, r7
 8005e7c:	f7fa fe44 	bl	8000b08 <__aeabi_dcmpeq>
 8005e80:	b918      	cbnz	r0, 8005e8a <__cvt+0xba>
 8005e82:	f1c4 0401 	rsb	r4, r4, #1
 8005e86:	f8ca 4000 	str.w	r4, [sl]
 8005e8a:	f8da 3000 	ldr.w	r3, [sl]
 8005e8e:	4499      	add	r9, r3
 8005e90:	e7d3      	b.n	8005e3a <__cvt+0x6a>
 8005e92:	1c59      	adds	r1, r3, #1
 8005e94:	9103      	str	r1, [sp, #12]
 8005e96:	701a      	strb	r2, [r3, #0]
 8005e98:	e7d9      	b.n	8005e4e <__cvt+0x7e>

08005e9a <__exponent>:
 8005e9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e9c:	2900      	cmp	r1, #0
 8005e9e:	bfba      	itte	lt
 8005ea0:	4249      	neglt	r1, r1
 8005ea2:	232d      	movlt	r3, #45	@ 0x2d
 8005ea4:	232b      	movge	r3, #43	@ 0x2b
 8005ea6:	2909      	cmp	r1, #9
 8005ea8:	7002      	strb	r2, [r0, #0]
 8005eaa:	7043      	strb	r3, [r0, #1]
 8005eac:	dd29      	ble.n	8005f02 <__exponent+0x68>
 8005eae:	f10d 0307 	add.w	r3, sp, #7
 8005eb2:	461d      	mov	r5, r3
 8005eb4:	270a      	movs	r7, #10
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	fbb1 f6f7 	udiv	r6, r1, r7
 8005ebc:	fb07 1416 	mls	r4, r7, r6, r1
 8005ec0:	3430      	adds	r4, #48	@ 0x30
 8005ec2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005ec6:	460c      	mov	r4, r1
 8005ec8:	2c63      	cmp	r4, #99	@ 0x63
 8005eca:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005ece:	4631      	mov	r1, r6
 8005ed0:	dcf1      	bgt.n	8005eb6 <__exponent+0x1c>
 8005ed2:	3130      	adds	r1, #48	@ 0x30
 8005ed4:	1e94      	subs	r4, r2, #2
 8005ed6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005eda:	1c41      	adds	r1, r0, #1
 8005edc:	4623      	mov	r3, r4
 8005ede:	42ab      	cmp	r3, r5
 8005ee0:	d30a      	bcc.n	8005ef8 <__exponent+0x5e>
 8005ee2:	f10d 0309 	add.w	r3, sp, #9
 8005ee6:	1a9b      	subs	r3, r3, r2
 8005ee8:	42ac      	cmp	r4, r5
 8005eea:	bf88      	it	hi
 8005eec:	2300      	movhi	r3, #0
 8005eee:	3302      	adds	r3, #2
 8005ef0:	4403      	add	r3, r0
 8005ef2:	1a18      	subs	r0, r3, r0
 8005ef4:	b003      	add	sp, #12
 8005ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ef8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005efc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005f00:	e7ed      	b.n	8005ede <__exponent+0x44>
 8005f02:	2330      	movs	r3, #48	@ 0x30
 8005f04:	3130      	adds	r1, #48	@ 0x30
 8005f06:	7083      	strb	r3, [r0, #2]
 8005f08:	70c1      	strb	r1, [r0, #3]
 8005f0a:	1d03      	adds	r3, r0, #4
 8005f0c:	e7f1      	b.n	8005ef2 <__exponent+0x58>
	...

08005f10 <_printf_float>:
 8005f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f14:	b08d      	sub	sp, #52	@ 0x34
 8005f16:	460c      	mov	r4, r1
 8005f18:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005f1c:	4616      	mov	r6, r2
 8005f1e:	461f      	mov	r7, r3
 8005f20:	4605      	mov	r5, r0
 8005f22:	f000 ff01 	bl	8006d28 <_localeconv_r>
 8005f26:	6803      	ldr	r3, [r0, #0]
 8005f28:	9304      	str	r3, [sp, #16]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7fa f9c0 	bl	80002b0 <strlen>
 8005f30:	2300      	movs	r3, #0
 8005f32:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f34:	f8d8 3000 	ldr.w	r3, [r8]
 8005f38:	9005      	str	r0, [sp, #20]
 8005f3a:	3307      	adds	r3, #7
 8005f3c:	f023 0307 	bic.w	r3, r3, #7
 8005f40:	f103 0208 	add.w	r2, r3, #8
 8005f44:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005f48:	f8d4 b000 	ldr.w	fp, [r4]
 8005f4c:	f8c8 2000 	str.w	r2, [r8]
 8005f50:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f54:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005f58:	9307      	str	r3, [sp, #28]
 8005f5a:	f8cd 8018 	str.w	r8, [sp, #24]
 8005f5e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005f62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f66:	4b9c      	ldr	r3, [pc, #624]	@ (80061d8 <_printf_float+0x2c8>)
 8005f68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005f6c:	f7fa fdfe 	bl	8000b6c <__aeabi_dcmpun>
 8005f70:	bb70      	cbnz	r0, 8005fd0 <_printf_float+0xc0>
 8005f72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f76:	4b98      	ldr	r3, [pc, #608]	@ (80061d8 <_printf_float+0x2c8>)
 8005f78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005f7c:	f7fa fdd8 	bl	8000b30 <__aeabi_dcmple>
 8005f80:	bb30      	cbnz	r0, 8005fd0 <_printf_float+0xc0>
 8005f82:	2200      	movs	r2, #0
 8005f84:	2300      	movs	r3, #0
 8005f86:	4640      	mov	r0, r8
 8005f88:	4649      	mov	r1, r9
 8005f8a:	f7fa fdc7 	bl	8000b1c <__aeabi_dcmplt>
 8005f8e:	b110      	cbz	r0, 8005f96 <_printf_float+0x86>
 8005f90:	232d      	movs	r3, #45	@ 0x2d
 8005f92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f96:	4a91      	ldr	r2, [pc, #580]	@ (80061dc <_printf_float+0x2cc>)
 8005f98:	4b91      	ldr	r3, [pc, #580]	@ (80061e0 <_printf_float+0x2d0>)
 8005f9a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005f9e:	bf94      	ite	ls
 8005fa0:	4690      	movls	r8, r2
 8005fa2:	4698      	movhi	r8, r3
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	6123      	str	r3, [r4, #16]
 8005fa8:	f02b 0304 	bic.w	r3, fp, #4
 8005fac:	6023      	str	r3, [r4, #0]
 8005fae:	f04f 0900 	mov.w	r9, #0
 8005fb2:	9700      	str	r7, [sp, #0]
 8005fb4:	4633      	mov	r3, r6
 8005fb6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005fb8:	4621      	mov	r1, r4
 8005fba:	4628      	mov	r0, r5
 8005fbc:	f000 f9d2 	bl	8006364 <_printf_common>
 8005fc0:	3001      	adds	r0, #1
 8005fc2:	f040 808d 	bne.w	80060e0 <_printf_float+0x1d0>
 8005fc6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005fca:	b00d      	add	sp, #52	@ 0x34
 8005fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fd0:	4642      	mov	r2, r8
 8005fd2:	464b      	mov	r3, r9
 8005fd4:	4640      	mov	r0, r8
 8005fd6:	4649      	mov	r1, r9
 8005fd8:	f7fa fdc8 	bl	8000b6c <__aeabi_dcmpun>
 8005fdc:	b140      	cbz	r0, 8005ff0 <_printf_float+0xe0>
 8005fde:	464b      	mov	r3, r9
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	bfbc      	itt	lt
 8005fe4:	232d      	movlt	r3, #45	@ 0x2d
 8005fe6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005fea:	4a7e      	ldr	r2, [pc, #504]	@ (80061e4 <_printf_float+0x2d4>)
 8005fec:	4b7e      	ldr	r3, [pc, #504]	@ (80061e8 <_printf_float+0x2d8>)
 8005fee:	e7d4      	b.n	8005f9a <_printf_float+0x8a>
 8005ff0:	6863      	ldr	r3, [r4, #4]
 8005ff2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005ff6:	9206      	str	r2, [sp, #24]
 8005ff8:	1c5a      	adds	r2, r3, #1
 8005ffa:	d13b      	bne.n	8006074 <_printf_float+0x164>
 8005ffc:	2306      	movs	r3, #6
 8005ffe:	6063      	str	r3, [r4, #4]
 8006000:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006004:	2300      	movs	r3, #0
 8006006:	6022      	str	r2, [r4, #0]
 8006008:	9303      	str	r3, [sp, #12]
 800600a:	ab0a      	add	r3, sp, #40	@ 0x28
 800600c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006010:	ab09      	add	r3, sp, #36	@ 0x24
 8006012:	9300      	str	r3, [sp, #0]
 8006014:	6861      	ldr	r1, [r4, #4]
 8006016:	ec49 8b10 	vmov	d0, r8, r9
 800601a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800601e:	4628      	mov	r0, r5
 8006020:	f7ff fed6 	bl	8005dd0 <__cvt>
 8006024:	9b06      	ldr	r3, [sp, #24]
 8006026:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006028:	2b47      	cmp	r3, #71	@ 0x47
 800602a:	4680      	mov	r8, r0
 800602c:	d129      	bne.n	8006082 <_printf_float+0x172>
 800602e:	1cc8      	adds	r0, r1, #3
 8006030:	db02      	blt.n	8006038 <_printf_float+0x128>
 8006032:	6863      	ldr	r3, [r4, #4]
 8006034:	4299      	cmp	r1, r3
 8006036:	dd41      	ble.n	80060bc <_printf_float+0x1ac>
 8006038:	f1aa 0a02 	sub.w	sl, sl, #2
 800603c:	fa5f fa8a 	uxtb.w	sl, sl
 8006040:	3901      	subs	r1, #1
 8006042:	4652      	mov	r2, sl
 8006044:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006048:	9109      	str	r1, [sp, #36]	@ 0x24
 800604a:	f7ff ff26 	bl	8005e9a <__exponent>
 800604e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006050:	1813      	adds	r3, r2, r0
 8006052:	2a01      	cmp	r2, #1
 8006054:	4681      	mov	r9, r0
 8006056:	6123      	str	r3, [r4, #16]
 8006058:	dc02      	bgt.n	8006060 <_printf_float+0x150>
 800605a:	6822      	ldr	r2, [r4, #0]
 800605c:	07d2      	lsls	r2, r2, #31
 800605e:	d501      	bpl.n	8006064 <_printf_float+0x154>
 8006060:	3301      	adds	r3, #1
 8006062:	6123      	str	r3, [r4, #16]
 8006064:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006068:	2b00      	cmp	r3, #0
 800606a:	d0a2      	beq.n	8005fb2 <_printf_float+0xa2>
 800606c:	232d      	movs	r3, #45	@ 0x2d
 800606e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006072:	e79e      	b.n	8005fb2 <_printf_float+0xa2>
 8006074:	9a06      	ldr	r2, [sp, #24]
 8006076:	2a47      	cmp	r2, #71	@ 0x47
 8006078:	d1c2      	bne.n	8006000 <_printf_float+0xf0>
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1c0      	bne.n	8006000 <_printf_float+0xf0>
 800607e:	2301      	movs	r3, #1
 8006080:	e7bd      	b.n	8005ffe <_printf_float+0xee>
 8006082:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006086:	d9db      	bls.n	8006040 <_printf_float+0x130>
 8006088:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800608c:	d118      	bne.n	80060c0 <_printf_float+0x1b0>
 800608e:	2900      	cmp	r1, #0
 8006090:	6863      	ldr	r3, [r4, #4]
 8006092:	dd0b      	ble.n	80060ac <_printf_float+0x19c>
 8006094:	6121      	str	r1, [r4, #16]
 8006096:	b913      	cbnz	r3, 800609e <_printf_float+0x18e>
 8006098:	6822      	ldr	r2, [r4, #0]
 800609a:	07d0      	lsls	r0, r2, #31
 800609c:	d502      	bpl.n	80060a4 <_printf_float+0x194>
 800609e:	3301      	adds	r3, #1
 80060a0:	440b      	add	r3, r1
 80060a2:	6123      	str	r3, [r4, #16]
 80060a4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80060a6:	f04f 0900 	mov.w	r9, #0
 80060aa:	e7db      	b.n	8006064 <_printf_float+0x154>
 80060ac:	b913      	cbnz	r3, 80060b4 <_printf_float+0x1a4>
 80060ae:	6822      	ldr	r2, [r4, #0]
 80060b0:	07d2      	lsls	r2, r2, #31
 80060b2:	d501      	bpl.n	80060b8 <_printf_float+0x1a8>
 80060b4:	3302      	adds	r3, #2
 80060b6:	e7f4      	b.n	80060a2 <_printf_float+0x192>
 80060b8:	2301      	movs	r3, #1
 80060ba:	e7f2      	b.n	80060a2 <_printf_float+0x192>
 80060bc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80060c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060c2:	4299      	cmp	r1, r3
 80060c4:	db05      	blt.n	80060d2 <_printf_float+0x1c2>
 80060c6:	6823      	ldr	r3, [r4, #0]
 80060c8:	6121      	str	r1, [r4, #16]
 80060ca:	07d8      	lsls	r0, r3, #31
 80060cc:	d5ea      	bpl.n	80060a4 <_printf_float+0x194>
 80060ce:	1c4b      	adds	r3, r1, #1
 80060d0:	e7e7      	b.n	80060a2 <_printf_float+0x192>
 80060d2:	2900      	cmp	r1, #0
 80060d4:	bfd4      	ite	le
 80060d6:	f1c1 0202 	rsble	r2, r1, #2
 80060da:	2201      	movgt	r2, #1
 80060dc:	4413      	add	r3, r2
 80060de:	e7e0      	b.n	80060a2 <_printf_float+0x192>
 80060e0:	6823      	ldr	r3, [r4, #0]
 80060e2:	055a      	lsls	r2, r3, #21
 80060e4:	d407      	bmi.n	80060f6 <_printf_float+0x1e6>
 80060e6:	6923      	ldr	r3, [r4, #16]
 80060e8:	4642      	mov	r2, r8
 80060ea:	4631      	mov	r1, r6
 80060ec:	4628      	mov	r0, r5
 80060ee:	47b8      	blx	r7
 80060f0:	3001      	adds	r0, #1
 80060f2:	d12b      	bne.n	800614c <_printf_float+0x23c>
 80060f4:	e767      	b.n	8005fc6 <_printf_float+0xb6>
 80060f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80060fa:	f240 80dd 	bls.w	80062b8 <_printf_float+0x3a8>
 80060fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006102:	2200      	movs	r2, #0
 8006104:	2300      	movs	r3, #0
 8006106:	f7fa fcff 	bl	8000b08 <__aeabi_dcmpeq>
 800610a:	2800      	cmp	r0, #0
 800610c:	d033      	beq.n	8006176 <_printf_float+0x266>
 800610e:	4a37      	ldr	r2, [pc, #220]	@ (80061ec <_printf_float+0x2dc>)
 8006110:	2301      	movs	r3, #1
 8006112:	4631      	mov	r1, r6
 8006114:	4628      	mov	r0, r5
 8006116:	47b8      	blx	r7
 8006118:	3001      	adds	r0, #1
 800611a:	f43f af54 	beq.w	8005fc6 <_printf_float+0xb6>
 800611e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006122:	4543      	cmp	r3, r8
 8006124:	db02      	blt.n	800612c <_printf_float+0x21c>
 8006126:	6823      	ldr	r3, [r4, #0]
 8006128:	07d8      	lsls	r0, r3, #31
 800612a:	d50f      	bpl.n	800614c <_printf_float+0x23c>
 800612c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006130:	4631      	mov	r1, r6
 8006132:	4628      	mov	r0, r5
 8006134:	47b8      	blx	r7
 8006136:	3001      	adds	r0, #1
 8006138:	f43f af45 	beq.w	8005fc6 <_printf_float+0xb6>
 800613c:	f04f 0900 	mov.w	r9, #0
 8006140:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006144:	f104 0a1a 	add.w	sl, r4, #26
 8006148:	45c8      	cmp	r8, r9
 800614a:	dc09      	bgt.n	8006160 <_printf_float+0x250>
 800614c:	6823      	ldr	r3, [r4, #0]
 800614e:	079b      	lsls	r3, r3, #30
 8006150:	f100 8103 	bmi.w	800635a <_printf_float+0x44a>
 8006154:	68e0      	ldr	r0, [r4, #12]
 8006156:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006158:	4298      	cmp	r0, r3
 800615a:	bfb8      	it	lt
 800615c:	4618      	movlt	r0, r3
 800615e:	e734      	b.n	8005fca <_printf_float+0xba>
 8006160:	2301      	movs	r3, #1
 8006162:	4652      	mov	r2, sl
 8006164:	4631      	mov	r1, r6
 8006166:	4628      	mov	r0, r5
 8006168:	47b8      	blx	r7
 800616a:	3001      	adds	r0, #1
 800616c:	f43f af2b 	beq.w	8005fc6 <_printf_float+0xb6>
 8006170:	f109 0901 	add.w	r9, r9, #1
 8006174:	e7e8      	b.n	8006148 <_printf_float+0x238>
 8006176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006178:	2b00      	cmp	r3, #0
 800617a:	dc39      	bgt.n	80061f0 <_printf_float+0x2e0>
 800617c:	4a1b      	ldr	r2, [pc, #108]	@ (80061ec <_printf_float+0x2dc>)
 800617e:	2301      	movs	r3, #1
 8006180:	4631      	mov	r1, r6
 8006182:	4628      	mov	r0, r5
 8006184:	47b8      	blx	r7
 8006186:	3001      	adds	r0, #1
 8006188:	f43f af1d 	beq.w	8005fc6 <_printf_float+0xb6>
 800618c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006190:	ea59 0303 	orrs.w	r3, r9, r3
 8006194:	d102      	bne.n	800619c <_printf_float+0x28c>
 8006196:	6823      	ldr	r3, [r4, #0]
 8006198:	07d9      	lsls	r1, r3, #31
 800619a:	d5d7      	bpl.n	800614c <_printf_float+0x23c>
 800619c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061a0:	4631      	mov	r1, r6
 80061a2:	4628      	mov	r0, r5
 80061a4:	47b8      	blx	r7
 80061a6:	3001      	adds	r0, #1
 80061a8:	f43f af0d 	beq.w	8005fc6 <_printf_float+0xb6>
 80061ac:	f04f 0a00 	mov.w	sl, #0
 80061b0:	f104 0b1a 	add.w	fp, r4, #26
 80061b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061b6:	425b      	negs	r3, r3
 80061b8:	4553      	cmp	r3, sl
 80061ba:	dc01      	bgt.n	80061c0 <_printf_float+0x2b0>
 80061bc:	464b      	mov	r3, r9
 80061be:	e793      	b.n	80060e8 <_printf_float+0x1d8>
 80061c0:	2301      	movs	r3, #1
 80061c2:	465a      	mov	r2, fp
 80061c4:	4631      	mov	r1, r6
 80061c6:	4628      	mov	r0, r5
 80061c8:	47b8      	blx	r7
 80061ca:	3001      	adds	r0, #1
 80061cc:	f43f aefb 	beq.w	8005fc6 <_printf_float+0xb6>
 80061d0:	f10a 0a01 	add.w	sl, sl, #1
 80061d4:	e7ee      	b.n	80061b4 <_printf_float+0x2a4>
 80061d6:	bf00      	nop
 80061d8:	7fefffff 	.word	0x7fefffff
 80061dc:	0800b594 	.word	0x0800b594
 80061e0:	0800b598 	.word	0x0800b598
 80061e4:	0800b59c 	.word	0x0800b59c
 80061e8:	0800b5a0 	.word	0x0800b5a0
 80061ec:	0800b5a4 	.word	0x0800b5a4
 80061f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80061f2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80061f6:	4553      	cmp	r3, sl
 80061f8:	bfa8      	it	ge
 80061fa:	4653      	movge	r3, sl
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	4699      	mov	r9, r3
 8006200:	dc36      	bgt.n	8006270 <_printf_float+0x360>
 8006202:	f04f 0b00 	mov.w	fp, #0
 8006206:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800620a:	f104 021a 	add.w	r2, r4, #26
 800620e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006210:	9306      	str	r3, [sp, #24]
 8006212:	eba3 0309 	sub.w	r3, r3, r9
 8006216:	455b      	cmp	r3, fp
 8006218:	dc31      	bgt.n	800627e <_printf_float+0x36e>
 800621a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800621c:	459a      	cmp	sl, r3
 800621e:	dc3a      	bgt.n	8006296 <_printf_float+0x386>
 8006220:	6823      	ldr	r3, [r4, #0]
 8006222:	07da      	lsls	r2, r3, #31
 8006224:	d437      	bmi.n	8006296 <_printf_float+0x386>
 8006226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006228:	ebaa 0903 	sub.w	r9, sl, r3
 800622c:	9b06      	ldr	r3, [sp, #24]
 800622e:	ebaa 0303 	sub.w	r3, sl, r3
 8006232:	4599      	cmp	r9, r3
 8006234:	bfa8      	it	ge
 8006236:	4699      	movge	r9, r3
 8006238:	f1b9 0f00 	cmp.w	r9, #0
 800623c:	dc33      	bgt.n	80062a6 <_printf_float+0x396>
 800623e:	f04f 0800 	mov.w	r8, #0
 8006242:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006246:	f104 0b1a 	add.w	fp, r4, #26
 800624a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800624c:	ebaa 0303 	sub.w	r3, sl, r3
 8006250:	eba3 0309 	sub.w	r3, r3, r9
 8006254:	4543      	cmp	r3, r8
 8006256:	f77f af79 	ble.w	800614c <_printf_float+0x23c>
 800625a:	2301      	movs	r3, #1
 800625c:	465a      	mov	r2, fp
 800625e:	4631      	mov	r1, r6
 8006260:	4628      	mov	r0, r5
 8006262:	47b8      	blx	r7
 8006264:	3001      	adds	r0, #1
 8006266:	f43f aeae 	beq.w	8005fc6 <_printf_float+0xb6>
 800626a:	f108 0801 	add.w	r8, r8, #1
 800626e:	e7ec      	b.n	800624a <_printf_float+0x33a>
 8006270:	4642      	mov	r2, r8
 8006272:	4631      	mov	r1, r6
 8006274:	4628      	mov	r0, r5
 8006276:	47b8      	blx	r7
 8006278:	3001      	adds	r0, #1
 800627a:	d1c2      	bne.n	8006202 <_printf_float+0x2f2>
 800627c:	e6a3      	b.n	8005fc6 <_printf_float+0xb6>
 800627e:	2301      	movs	r3, #1
 8006280:	4631      	mov	r1, r6
 8006282:	4628      	mov	r0, r5
 8006284:	9206      	str	r2, [sp, #24]
 8006286:	47b8      	blx	r7
 8006288:	3001      	adds	r0, #1
 800628a:	f43f ae9c 	beq.w	8005fc6 <_printf_float+0xb6>
 800628e:	9a06      	ldr	r2, [sp, #24]
 8006290:	f10b 0b01 	add.w	fp, fp, #1
 8006294:	e7bb      	b.n	800620e <_printf_float+0x2fe>
 8006296:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800629a:	4631      	mov	r1, r6
 800629c:	4628      	mov	r0, r5
 800629e:	47b8      	blx	r7
 80062a0:	3001      	adds	r0, #1
 80062a2:	d1c0      	bne.n	8006226 <_printf_float+0x316>
 80062a4:	e68f      	b.n	8005fc6 <_printf_float+0xb6>
 80062a6:	9a06      	ldr	r2, [sp, #24]
 80062a8:	464b      	mov	r3, r9
 80062aa:	4442      	add	r2, r8
 80062ac:	4631      	mov	r1, r6
 80062ae:	4628      	mov	r0, r5
 80062b0:	47b8      	blx	r7
 80062b2:	3001      	adds	r0, #1
 80062b4:	d1c3      	bne.n	800623e <_printf_float+0x32e>
 80062b6:	e686      	b.n	8005fc6 <_printf_float+0xb6>
 80062b8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80062bc:	f1ba 0f01 	cmp.w	sl, #1
 80062c0:	dc01      	bgt.n	80062c6 <_printf_float+0x3b6>
 80062c2:	07db      	lsls	r3, r3, #31
 80062c4:	d536      	bpl.n	8006334 <_printf_float+0x424>
 80062c6:	2301      	movs	r3, #1
 80062c8:	4642      	mov	r2, r8
 80062ca:	4631      	mov	r1, r6
 80062cc:	4628      	mov	r0, r5
 80062ce:	47b8      	blx	r7
 80062d0:	3001      	adds	r0, #1
 80062d2:	f43f ae78 	beq.w	8005fc6 <_printf_float+0xb6>
 80062d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062da:	4631      	mov	r1, r6
 80062dc:	4628      	mov	r0, r5
 80062de:	47b8      	blx	r7
 80062e0:	3001      	adds	r0, #1
 80062e2:	f43f ae70 	beq.w	8005fc6 <_printf_float+0xb6>
 80062e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80062ea:	2200      	movs	r2, #0
 80062ec:	2300      	movs	r3, #0
 80062ee:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80062f2:	f7fa fc09 	bl	8000b08 <__aeabi_dcmpeq>
 80062f6:	b9c0      	cbnz	r0, 800632a <_printf_float+0x41a>
 80062f8:	4653      	mov	r3, sl
 80062fa:	f108 0201 	add.w	r2, r8, #1
 80062fe:	4631      	mov	r1, r6
 8006300:	4628      	mov	r0, r5
 8006302:	47b8      	blx	r7
 8006304:	3001      	adds	r0, #1
 8006306:	d10c      	bne.n	8006322 <_printf_float+0x412>
 8006308:	e65d      	b.n	8005fc6 <_printf_float+0xb6>
 800630a:	2301      	movs	r3, #1
 800630c:	465a      	mov	r2, fp
 800630e:	4631      	mov	r1, r6
 8006310:	4628      	mov	r0, r5
 8006312:	47b8      	blx	r7
 8006314:	3001      	adds	r0, #1
 8006316:	f43f ae56 	beq.w	8005fc6 <_printf_float+0xb6>
 800631a:	f108 0801 	add.w	r8, r8, #1
 800631e:	45d0      	cmp	r8, sl
 8006320:	dbf3      	blt.n	800630a <_printf_float+0x3fa>
 8006322:	464b      	mov	r3, r9
 8006324:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006328:	e6df      	b.n	80060ea <_printf_float+0x1da>
 800632a:	f04f 0800 	mov.w	r8, #0
 800632e:	f104 0b1a 	add.w	fp, r4, #26
 8006332:	e7f4      	b.n	800631e <_printf_float+0x40e>
 8006334:	2301      	movs	r3, #1
 8006336:	4642      	mov	r2, r8
 8006338:	e7e1      	b.n	80062fe <_printf_float+0x3ee>
 800633a:	2301      	movs	r3, #1
 800633c:	464a      	mov	r2, r9
 800633e:	4631      	mov	r1, r6
 8006340:	4628      	mov	r0, r5
 8006342:	47b8      	blx	r7
 8006344:	3001      	adds	r0, #1
 8006346:	f43f ae3e 	beq.w	8005fc6 <_printf_float+0xb6>
 800634a:	f108 0801 	add.w	r8, r8, #1
 800634e:	68e3      	ldr	r3, [r4, #12]
 8006350:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006352:	1a5b      	subs	r3, r3, r1
 8006354:	4543      	cmp	r3, r8
 8006356:	dcf0      	bgt.n	800633a <_printf_float+0x42a>
 8006358:	e6fc      	b.n	8006154 <_printf_float+0x244>
 800635a:	f04f 0800 	mov.w	r8, #0
 800635e:	f104 0919 	add.w	r9, r4, #25
 8006362:	e7f4      	b.n	800634e <_printf_float+0x43e>

08006364 <_printf_common>:
 8006364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006368:	4616      	mov	r6, r2
 800636a:	4698      	mov	r8, r3
 800636c:	688a      	ldr	r2, [r1, #8]
 800636e:	690b      	ldr	r3, [r1, #16]
 8006370:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006374:	4293      	cmp	r3, r2
 8006376:	bfb8      	it	lt
 8006378:	4613      	movlt	r3, r2
 800637a:	6033      	str	r3, [r6, #0]
 800637c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006380:	4607      	mov	r7, r0
 8006382:	460c      	mov	r4, r1
 8006384:	b10a      	cbz	r2, 800638a <_printf_common+0x26>
 8006386:	3301      	adds	r3, #1
 8006388:	6033      	str	r3, [r6, #0]
 800638a:	6823      	ldr	r3, [r4, #0]
 800638c:	0699      	lsls	r1, r3, #26
 800638e:	bf42      	ittt	mi
 8006390:	6833      	ldrmi	r3, [r6, #0]
 8006392:	3302      	addmi	r3, #2
 8006394:	6033      	strmi	r3, [r6, #0]
 8006396:	6825      	ldr	r5, [r4, #0]
 8006398:	f015 0506 	ands.w	r5, r5, #6
 800639c:	d106      	bne.n	80063ac <_printf_common+0x48>
 800639e:	f104 0a19 	add.w	sl, r4, #25
 80063a2:	68e3      	ldr	r3, [r4, #12]
 80063a4:	6832      	ldr	r2, [r6, #0]
 80063a6:	1a9b      	subs	r3, r3, r2
 80063a8:	42ab      	cmp	r3, r5
 80063aa:	dc26      	bgt.n	80063fa <_printf_common+0x96>
 80063ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80063b0:	6822      	ldr	r2, [r4, #0]
 80063b2:	3b00      	subs	r3, #0
 80063b4:	bf18      	it	ne
 80063b6:	2301      	movne	r3, #1
 80063b8:	0692      	lsls	r2, r2, #26
 80063ba:	d42b      	bmi.n	8006414 <_printf_common+0xb0>
 80063bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80063c0:	4641      	mov	r1, r8
 80063c2:	4638      	mov	r0, r7
 80063c4:	47c8      	blx	r9
 80063c6:	3001      	adds	r0, #1
 80063c8:	d01e      	beq.n	8006408 <_printf_common+0xa4>
 80063ca:	6823      	ldr	r3, [r4, #0]
 80063cc:	6922      	ldr	r2, [r4, #16]
 80063ce:	f003 0306 	and.w	r3, r3, #6
 80063d2:	2b04      	cmp	r3, #4
 80063d4:	bf02      	ittt	eq
 80063d6:	68e5      	ldreq	r5, [r4, #12]
 80063d8:	6833      	ldreq	r3, [r6, #0]
 80063da:	1aed      	subeq	r5, r5, r3
 80063dc:	68a3      	ldr	r3, [r4, #8]
 80063de:	bf0c      	ite	eq
 80063e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063e4:	2500      	movne	r5, #0
 80063e6:	4293      	cmp	r3, r2
 80063e8:	bfc4      	itt	gt
 80063ea:	1a9b      	subgt	r3, r3, r2
 80063ec:	18ed      	addgt	r5, r5, r3
 80063ee:	2600      	movs	r6, #0
 80063f0:	341a      	adds	r4, #26
 80063f2:	42b5      	cmp	r5, r6
 80063f4:	d11a      	bne.n	800642c <_printf_common+0xc8>
 80063f6:	2000      	movs	r0, #0
 80063f8:	e008      	b.n	800640c <_printf_common+0xa8>
 80063fa:	2301      	movs	r3, #1
 80063fc:	4652      	mov	r2, sl
 80063fe:	4641      	mov	r1, r8
 8006400:	4638      	mov	r0, r7
 8006402:	47c8      	blx	r9
 8006404:	3001      	adds	r0, #1
 8006406:	d103      	bne.n	8006410 <_printf_common+0xac>
 8006408:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800640c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006410:	3501      	adds	r5, #1
 8006412:	e7c6      	b.n	80063a2 <_printf_common+0x3e>
 8006414:	18e1      	adds	r1, r4, r3
 8006416:	1c5a      	adds	r2, r3, #1
 8006418:	2030      	movs	r0, #48	@ 0x30
 800641a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800641e:	4422      	add	r2, r4
 8006420:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006424:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006428:	3302      	adds	r3, #2
 800642a:	e7c7      	b.n	80063bc <_printf_common+0x58>
 800642c:	2301      	movs	r3, #1
 800642e:	4622      	mov	r2, r4
 8006430:	4641      	mov	r1, r8
 8006432:	4638      	mov	r0, r7
 8006434:	47c8      	blx	r9
 8006436:	3001      	adds	r0, #1
 8006438:	d0e6      	beq.n	8006408 <_printf_common+0xa4>
 800643a:	3601      	adds	r6, #1
 800643c:	e7d9      	b.n	80063f2 <_printf_common+0x8e>
	...

08006440 <_printf_i>:
 8006440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006444:	7e0f      	ldrb	r7, [r1, #24]
 8006446:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006448:	2f78      	cmp	r7, #120	@ 0x78
 800644a:	4691      	mov	r9, r2
 800644c:	4680      	mov	r8, r0
 800644e:	460c      	mov	r4, r1
 8006450:	469a      	mov	sl, r3
 8006452:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006456:	d807      	bhi.n	8006468 <_printf_i+0x28>
 8006458:	2f62      	cmp	r7, #98	@ 0x62
 800645a:	d80a      	bhi.n	8006472 <_printf_i+0x32>
 800645c:	2f00      	cmp	r7, #0
 800645e:	f000 80d2 	beq.w	8006606 <_printf_i+0x1c6>
 8006462:	2f58      	cmp	r7, #88	@ 0x58
 8006464:	f000 80b9 	beq.w	80065da <_printf_i+0x19a>
 8006468:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800646c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006470:	e03a      	b.n	80064e8 <_printf_i+0xa8>
 8006472:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006476:	2b15      	cmp	r3, #21
 8006478:	d8f6      	bhi.n	8006468 <_printf_i+0x28>
 800647a:	a101      	add	r1, pc, #4	@ (adr r1, 8006480 <_printf_i+0x40>)
 800647c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006480:	080064d9 	.word	0x080064d9
 8006484:	080064ed 	.word	0x080064ed
 8006488:	08006469 	.word	0x08006469
 800648c:	08006469 	.word	0x08006469
 8006490:	08006469 	.word	0x08006469
 8006494:	08006469 	.word	0x08006469
 8006498:	080064ed 	.word	0x080064ed
 800649c:	08006469 	.word	0x08006469
 80064a0:	08006469 	.word	0x08006469
 80064a4:	08006469 	.word	0x08006469
 80064a8:	08006469 	.word	0x08006469
 80064ac:	080065ed 	.word	0x080065ed
 80064b0:	08006517 	.word	0x08006517
 80064b4:	080065a7 	.word	0x080065a7
 80064b8:	08006469 	.word	0x08006469
 80064bc:	08006469 	.word	0x08006469
 80064c0:	0800660f 	.word	0x0800660f
 80064c4:	08006469 	.word	0x08006469
 80064c8:	08006517 	.word	0x08006517
 80064cc:	08006469 	.word	0x08006469
 80064d0:	08006469 	.word	0x08006469
 80064d4:	080065af 	.word	0x080065af
 80064d8:	6833      	ldr	r3, [r6, #0]
 80064da:	1d1a      	adds	r2, r3, #4
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	6032      	str	r2, [r6, #0]
 80064e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80064e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80064e8:	2301      	movs	r3, #1
 80064ea:	e09d      	b.n	8006628 <_printf_i+0x1e8>
 80064ec:	6833      	ldr	r3, [r6, #0]
 80064ee:	6820      	ldr	r0, [r4, #0]
 80064f0:	1d19      	adds	r1, r3, #4
 80064f2:	6031      	str	r1, [r6, #0]
 80064f4:	0606      	lsls	r6, r0, #24
 80064f6:	d501      	bpl.n	80064fc <_printf_i+0xbc>
 80064f8:	681d      	ldr	r5, [r3, #0]
 80064fa:	e003      	b.n	8006504 <_printf_i+0xc4>
 80064fc:	0645      	lsls	r5, r0, #25
 80064fe:	d5fb      	bpl.n	80064f8 <_printf_i+0xb8>
 8006500:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006504:	2d00      	cmp	r5, #0
 8006506:	da03      	bge.n	8006510 <_printf_i+0xd0>
 8006508:	232d      	movs	r3, #45	@ 0x2d
 800650a:	426d      	negs	r5, r5
 800650c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006510:	4859      	ldr	r0, [pc, #356]	@ (8006678 <_printf_i+0x238>)
 8006512:	230a      	movs	r3, #10
 8006514:	e011      	b.n	800653a <_printf_i+0xfa>
 8006516:	6821      	ldr	r1, [r4, #0]
 8006518:	6833      	ldr	r3, [r6, #0]
 800651a:	0608      	lsls	r0, r1, #24
 800651c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006520:	d402      	bmi.n	8006528 <_printf_i+0xe8>
 8006522:	0649      	lsls	r1, r1, #25
 8006524:	bf48      	it	mi
 8006526:	b2ad      	uxthmi	r5, r5
 8006528:	2f6f      	cmp	r7, #111	@ 0x6f
 800652a:	4853      	ldr	r0, [pc, #332]	@ (8006678 <_printf_i+0x238>)
 800652c:	6033      	str	r3, [r6, #0]
 800652e:	bf14      	ite	ne
 8006530:	230a      	movne	r3, #10
 8006532:	2308      	moveq	r3, #8
 8006534:	2100      	movs	r1, #0
 8006536:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800653a:	6866      	ldr	r6, [r4, #4]
 800653c:	60a6      	str	r6, [r4, #8]
 800653e:	2e00      	cmp	r6, #0
 8006540:	bfa2      	ittt	ge
 8006542:	6821      	ldrge	r1, [r4, #0]
 8006544:	f021 0104 	bicge.w	r1, r1, #4
 8006548:	6021      	strge	r1, [r4, #0]
 800654a:	b90d      	cbnz	r5, 8006550 <_printf_i+0x110>
 800654c:	2e00      	cmp	r6, #0
 800654e:	d04b      	beq.n	80065e8 <_printf_i+0x1a8>
 8006550:	4616      	mov	r6, r2
 8006552:	fbb5 f1f3 	udiv	r1, r5, r3
 8006556:	fb03 5711 	mls	r7, r3, r1, r5
 800655a:	5dc7      	ldrb	r7, [r0, r7]
 800655c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006560:	462f      	mov	r7, r5
 8006562:	42bb      	cmp	r3, r7
 8006564:	460d      	mov	r5, r1
 8006566:	d9f4      	bls.n	8006552 <_printf_i+0x112>
 8006568:	2b08      	cmp	r3, #8
 800656a:	d10b      	bne.n	8006584 <_printf_i+0x144>
 800656c:	6823      	ldr	r3, [r4, #0]
 800656e:	07df      	lsls	r7, r3, #31
 8006570:	d508      	bpl.n	8006584 <_printf_i+0x144>
 8006572:	6923      	ldr	r3, [r4, #16]
 8006574:	6861      	ldr	r1, [r4, #4]
 8006576:	4299      	cmp	r1, r3
 8006578:	bfde      	ittt	le
 800657a:	2330      	movle	r3, #48	@ 0x30
 800657c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006580:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006584:	1b92      	subs	r2, r2, r6
 8006586:	6122      	str	r2, [r4, #16]
 8006588:	f8cd a000 	str.w	sl, [sp]
 800658c:	464b      	mov	r3, r9
 800658e:	aa03      	add	r2, sp, #12
 8006590:	4621      	mov	r1, r4
 8006592:	4640      	mov	r0, r8
 8006594:	f7ff fee6 	bl	8006364 <_printf_common>
 8006598:	3001      	adds	r0, #1
 800659a:	d14a      	bne.n	8006632 <_printf_i+0x1f2>
 800659c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065a0:	b004      	add	sp, #16
 80065a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065a6:	6823      	ldr	r3, [r4, #0]
 80065a8:	f043 0320 	orr.w	r3, r3, #32
 80065ac:	6023      	str	r3, [r4, #0]
 80065ae:	4833      	ldr	r0, [pc, #204]	@ (800667c <_printf_i+0x23c>)
 80065b0:	2778      	movs	r7, #120	@ 0x78
 80065b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80065b6:	6823      	ldr	r3, [r4, #0]
 80065b8:	6831      	ldr	r1, [r6, #0]
 80065ba:	061f      	lsls	r7, r3, #24
 80065bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80065c0:	d402      	bmi.n	80065c8 <_printf_i+0x188>
 80065c2:	065f      	lsls	r7, r3, #25
 80065c4:	bf48      	it	mi
 80065c6:	b2ad      	uxthmi	r5, r5
 80065c8:	6031      	str	r1, [r6, #0]
 80065ca:	07d9      	lsls	r1, r3, #31
 80065cc:	bf44      	itt	mi
 80065ce:	f043 0320 	orrmi.w	r3, r3, #32
 80065d2:	6023      	strmi	r3, [r4, #0]
 80065d4:	b11d      	cbz	r5, 80065de <_printf_i+0x19e>
 80065d6:	2310      	movs	r3, #16
 80065d8:	e7ac      	b.n	8006534 <_printf_i+0xf4>
 80065da:	4827      	ldr	r0, [pc, #156]	@ (8006678 <_printf_i+0x238>)
 80065dc:	e7e9      	b.n	80065b2 <_printf_i+0x172>
 80065de:	6823      	ldr	r3, [r4, #0]
 80065e0:	f023 0320 	bic.w	r3, r3, #32
 80065e4:	6023      	str	r3, [r4, #0]
 80065e6:	e7f6      	b.n	80065d6 <_printf_i+0x196>
 80065e8:	4616      	mov	r6, r2
 80065ea:	e7bd      	b.n	8006568 <_printf_i+0x128>
 80065ec:	6833      	ldr	r3, [r6, #0]
 80065ee:	6825      	ldr	r5, [r4, #0]
 80065f0:	6961      	ldr	r1, [r4, #20]
 80065f2:	1d18      	adds	r0, r3, #4
 80065f4:	6030      	str	r0, [r6, #0]
 80065f6:	062e      	lsls	r6, r5, #24
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	d501      	bpl.n	8006600 <_printf_i+0x1c0>
 80065fc:	6019      	str	r1, [r3, #0]
 80065fe:	e002      	b.n	8006606 <_printf_i+0x1c6>
 8006600:	0668      	lsls	r0, r5, #25
 8006602:	d5fb      	bpl.n	80065fc <_printf_i+0x1bc>
 8006604:	8019      	strh	r1, [r3, #0]
 8006606:	2300      	movs	r3, #0
 8006608:	6123      	str	r3, [r4, #16]
 800660a:	4616      	mov	r6, r2
 800660c:	e7bc      	b.n	8006588 <_printf_i+0x148>
 800660e:	6833      	ldr	r3, [r6, #0]
 8006610:	1d1a      	adds	r2, r3, #4
 8006612:	6032      	str	r2, [r6, #0]
 8006614:	681e      	ldr	r6, [r3, #0]
 8006616:	6862      	ldr	r2, [r4, #4]
 8006618:	2100      	movs	r1, #0
 800661a:	4630      	mov	r0, r6
 800661c:	f7f9 fdf8 	bl	8000210 <memchr>
 8006620:	b108      	cbz	r0, 8006626 <_printf_i+0x1e6>
 8006622:	1b80      	subs	r0, r0, r6
 8006624:	6060      	str	r0, [r4, #4]
 8006626:	6863      	ldr	r3, [r4, #4]
 8006628:	6123      	str	r3, [r4, #16]
 800662a:	2300      	movs	r3, #0
 800662c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006630:	e7aa      	b.n	8006588 <_printf_i+0x148>
 8006632:	6923      	ldr	r3, [r4, #16]
 8006634:	4632      	mov	r2, r6
 8006636:	4649      	mov	r1, r9
 8006638:	4640      	mov	r0, r8
 800663a:	47d0      	blx	sl
 800663c:	3001      	adds	r0, #1
 800663e:	d0ad      	beq.n	800659c <_printf_i+0x15c>
 8006640:	6823      	ldr	r3, [r4, #0]
 8006642:	079b      	lsls	r3, r3, #30
 8006644:	d413      	bmi.n	800666e <_printf_i+0x22e>
 8006646:	68e0      	ldr	r0, [r4, #12]
 8006648:	9b03      	ldr	r3, [sp, #12]
 800664a:	4298      	cmp	r0, r3
 800664c:	bfb8      	it	lt
 800664e:	4618      	movlt	r0, r3
 8006650:	e7a6      	b.n	80065a0 <_printf_i+0x160>
 8006652:	2301      	movs	r3, #1
 8006654:	4632      	mov	r2, r6
 8006656:	4649      	mov	r1, r9
 8006658:	4640      	mov	r0, r8
 800665a:	47d0      	blx	sl
 800665c:	3001      	adds	r0, #1
 800665e:	d09d      	beq.n	800659c <_printf_i+0x15c>
 8006660:	3501      	adds	r5, #1
 8006662:	68e3      	ldr	r3, [r4, #12]
 8006664:	9903      	ldr	r1, [sp, #12]
 8006666:	1a5b      	subs	r3, r3, r1
 8006668:	42ab      	cmp	r3, r5
 800666a:	dcf2      	bgt.n	8006652 <_printf_i+0x212>
 800666c:	e7eb      	b.n	8006646 <_printf_i+0x206>
 800666e:	2500      	movs	r5, #0
 8006670:	f104 0619 	add.w	r6, r4, #25
 8006674:	e7f5      	b.n	8006662 <_printf_i+0x222>
 8006676:	bf00      	nop
 8006678:	0800b5a6 	.word	0x0800b5a6
 800667c:	0800b5b7 	.word	0x0800b5b7

08006680 <_scanf_float>:
 8006680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006684:	b087      	sub	sp, #28
 8006686:	4617      	mov	r7, r2
 8006688:	9303      	str	r3, [sp, #12]
 800668a:	688b      	ldr	r3, [r1, #8]
 800668c:	1e5a      	subs	r2, r3, #1
 800668e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006692:	bf81      	itttt	hi
 8006694:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006698:	eb03 0b05 	addhi.w	fp, r3, r5
 800669c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80066a0:	608b      	strhi	r3, [r1, #8]
 80066a2:	680b      	ldr	r3, [r1, #0]
 80066a4:	460a      	mov	r2, r1
 80066a6:	f04f 0500 	mov.w	r5, #0
 80066aa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80066ae:	f842 3b1c 	str.w	r3, [r2], #28
 80066b2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80066b6:	4680      	mov	r8, r0
 80066b8:	460c      	mov	r4, r1
 80066ba:	bf98      	it	ls
 80066bc:	f04f 0b00 	movls.w	fp, #0
 80066c0:	9201      	str	r2, [sp, #4]
 80066c2:	4616      	mov	r6, r2
 80066c4:	46aa      	mov	sl, r5
 80066c6:	46a9      	mov	r9, r5
 80066c8:	9502      	str	r5, [sp, #8]
 80066ca:	68a2      	ldr	r2, [r4, #8]
 80066cc:	b152      	cbz	r2, 80066e4 <_scanf_float+0x64>
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	2b4e      	cmp	r3, #78	@ 0x4e
 80066d4:	d864      	bhi.n	80067a0 <_scanf_float+0x120>
 80066d6:	2b40      	cmp	r3, #64	@ 0x40
 80066d8:	d83c      	bhi.n	8006754 <_scanf_float+0xd4>
 80066da:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80066de:	b2c8      	uxtb	r0, r1
 80066e0:	280e      	cmp	r0, #14
 80066e2:	d93a      	bls.n	800675a <_scanf_float+0xda>
 80066e4:	f1b9 0f00 	cmp.w	r9, #0
 80066e8:	d003      	beq.n	80066f2 <_scanf_float+0x72>
 80066ea:	6823      	ldr	r3, [r4, #0]
 80066ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066f0:	6023      	str	r3, [r4, #0]
 80066f2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80066f6:	f1ba 0f01 	cmp.w	sl, #1
 80066fa:	f200 8117 	bhi.w	800692c <_scanf_float+0x2ac>
 80066fe:	9b01      	ldr	r3, [sp, #4]
 8006700:	429e      	cmp	r6, r3
 8006702:	f200 8108 	bhi.w	8006916 <_scanf_float+0x296>
 8006706:	2001      	movs	r0, #1
 8006708:	b007      	add	sp, #28
 800670a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800670e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006712:	2a0d      	cmp	r2, #13
 8006714:	d8e6      	bhi.n	80066e4 <_scanf_float+0x64>
 8006716:	a101      	add	r1, pc, #4	@ (adr r1, 800671c <_scanf_float+0x9c>)
 8006718:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800671c:	08006863 	.word	0x08006863
 8006720:	080066e5 	.word	0x080066e5
 8006724:	080066e5 	.word	0x080066e5
 8006728:	080066e5 	.word	0x080066e5
 800672c:	080068c3 	.word	0x080068c3
 8006730:	0800689b 	.word	0x0800689b
 8006734:	080066e5 	.word	0x080066e5
 8006738:	080066e5 	.word	0x080066e5
 800673c:	08006871 	.word	0x08006871
 8006740:	080066e5 	.word	0x080066e5
 8006744:	080066e5 	.word	0x080066e5
 8006748:	080066e5 	.word	0x080066e5
 800674c:	080066e5 	.word	0x080066e5
 8006750:	08006829 	.word	0x08006829
 8006754:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006758:	e7db      	b.n	8006712 <_scanf_float+0x92>
 800675a:	290e      	cmp	r1, #14
 800675c:	d8c2      	bhi.n	80066e4 <_scanf_float+0x64>
 800675e:	a001      	add	r0, pc, #4	@ (adr r0, 8006764 <_scanf_float+0xe4>)
 8006760:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006764:	08006819 	.word	0x08006819
 8006768:	080066e5 	.word	0x080066e5
 800676c:	08006819 	.word	0x08006819
 8006770:	080068af 	.word	0x080068af
 8006774:	080066e5 	.word	0x080066e5
 8006778:	080067c1 	.word	0x080067c1
 800677c:	080067ff 	.word	0x080067ff
 8006780:	080067ff 	.word	0x080067ff
 8006784:	080067ff 	.word	0x080067ff
 8006788:	080067ff 	.word	0x080067ff
 800678c:	080067ff 	.word	0x080067ff
 8006790:	080067ff 	.word	0x080067ff
 8006794:	080067ff 	.word	0x080067ff
 8006798:	080067ff 	.word	0x080067ff
 800679c:	080067ff 	.word	0x080067ff
 80067a0:	2b6e      	cmp	r3, #110	@ 0x6e
 80067a2:	d809      	bhi.n	80067b8 <_scanf_float+0x138>
 80067a4:	2b60      	cmp	r3, #96	@ 0x60
 80067a6:	d8b2      	bhi.n	800670e <_scanf_float+0x8e>
 80067a8:	2b54      	cmp	r3, #84	@ 0x54
 80067aa:	d07b      	beq.n	80068a4 <_scanf_float+0x224>
 80067ac:	2b59      	cmp	r3, #89	@ 0x59
 80067ae:	d199      	bne.n	80066e4 <_scanf_float+0x64>
 80067b0:	2d07      	cmp	r5, #7
 80067b2:	d197      	bne.n	80066e4 <_scanf_float+0x64>
 80067b4:	2508      	movs	r5, #8
 80067b6:	e02c      	b.n	8006812 <_scanf_float+0x192>
 80067b8:	2b74      	cmp	r3, #116	@ 0x74
 80067ba:	d073      	beq.n	80068a4 <_scanf_float+0x224>
 80067bc:	2b79      	cmp	r3, #121	@ 0x79
 80067be:	e7f6      	b.n	80067ae <_scanf_float+0x12e>
 80067c0:	6821      	ldr	r1, [r4, #0]
 80067c2:	05c8      	lsls	r0, r1, #23
 80067c4:	d51b      	bpl.n	80067fe <_scanf_float+0x17e>
 80067c6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80067ca:	6021      	str	r1, [r4, #0]
 80067cc:	f109 0901 	add.w	r9, r9, #1
 80067d0:	f1bb 0f00 	cmp.w	fp, #0
 80067d4:	d003      	beq.n	80067de <_scanf_float+0x15e>
 80067d6:	3201      	adds	r2, #1
 80067d8:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80067dc:	60a2      	str	r2, [r4, #8]
 80067de:	68a3      	ldr	r3, [r4, #8]
 80067e0:	3b01      	subs	r3, #1
 80067e2:	60a3      	str	r3, [r4, #8]
 80067e4:	6923      	ldr	r3, [r4, #16]
 80067e6:	3301      	adds	r3, #1
 80067e8:	6123      	str	r3, [r4, #16]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	3b01      	subs	r3, #1
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	607b      	str	r3, [r7, #4]
 80067f2:	f340 8087 	ble.w	8006904 <_scanf_float+0x284>
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	3301      	adds	r3, #1
 80067fa:	603b      	str	r3, [r7, #0]
 80067fc:	e765      	b.n	80066ca <_scanf_float+0x4a>
 80067fe:	eb1a 0105 	adds.w	r1, sl, r5
 8006802:	f47f af6f 	bne.w	80066e4 <_scanf_float+0x64>
 8006806:	6822      	ldr	r2, [r4, #0]
 8006808:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800680c:	6022      	str	r2, [r4, #0]
 800680e:	460d      	mov	r5, r1
 8006810:	468a      	mov	sl, r1
 8006812:	f806 3b01 	strb.w	r3, [r6], #1
 8006816:	e7e2      	b.n	80067de <_scanf_float+0x15e>
 8006818:	6822      	ldr	r2, [r4, #0]
 800681a:	0610      	lsls	r0, r2, #24
 800681c:	f57f af62 	bpl.w	80066e4 <_scanf_float+0x64>
 8006820:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006824:	6022      	str	r2, [r4, #0]
 8006826:	e7f4      	b.n	8006812 <_scanf_float+0x192>
 8006828:	f1ba 0f00 	cmp.w	sl, #0
 800682c:	d10e      	bne.n	800684c <_scanf_float+0x1cc>
 800682e:	f1b9 0f00 	cmp.w	r9, #0
 8006832:	d10e      	bne.n	8006852 <_scanf_float+0x1d2>
 8006834:	6822      	ldr	r2, [r4, #0]
 8006836:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800683a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800683e:	d108      	bne.n	8006852 <_scanf_float+0x1d2>
 8006840:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006844:	6022      	str	r2, [r4, #0]
 8006846:	f04f 0a01 	mov.w	sl, #1
 800684a:	e7e2      	b.n	8006812 <_scanf_float+0x192>
 800684c:	f1ba 0f02 	cmp.w	sl, #2
 8006850:	d055      	beq.n	80068fe <_scanf_float+0x27e>
 8006852:	2d01      	cmp	r5, #1
 8006854:	d002      	beq.n	800685c <_scanf_float+0x1dc>
 8006856:	2d04      	cmp	r5, #4
 8006858:	f47f af44 	bne.w	80066e4 <_scanf_float+0x64>
 800685c:	3501      	adds	r5, #1
 800685e:	b2ed      	uxtb	r5, r5
 8006860:	e7d7      	b.n	8006812 <_scanf_float+0x192>
 8006862:	f1ba 0f01 	cmp.w	sl, #1
 8006866:	f47f af3d 	bne.w	80066e4 <_scanf_float+0x64>
 800686a:	f04f 0a02 	mov.w	sl, #2
 800686e:	e7d0      	b.n	8006812 <_scanf_float+0x192>
 8006870:	b97d      	cbnz	r5, 8006892 <_scanf_float+0x212>
 8006872:	f1b9 0f00 	cmp.w	r9, #0
 8006876:	f47f af38 	bne.w	80066ea <_scanf_float+0x6a>
 800687a:	6822      	ldr	r2, [r4, #0]
 800687c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006880:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006884:	f040 8108 	bne.w	8006a98 <_scanf_float+0x418>
 8006888:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800688c:	6022      	str	r2, [r4, #0]
 800688e:	2501      	movs	r5, #1
 8006890:	e7bf      	b.n	8006812 <_scanf_float+0x192>
 8006892:	2d03      	cmp	r5, #3
 8006894:	d0e2      	beq.n	800685c <_scanf_float+0x1dc>
 8006896:	2d05      	cmp	r5, #5
 8006898:	e7de      	b.n	8006858 <_scanf_float+0x1d8>
 800689a:	2d02      	cmp	r5, #2
 800689c:	f47f af22 	bne.w	80066e4 <_scanf_float+0x64>
 80068a0:	2503      	movs	r5, #3
 80068a2:	e7b6      	b.n	8006812 <_scanf_float+0x192>
 80068a4:	2d06      	cmp	r5, #6
 80068a6:	f47f af1d 	bne.w	80066e4 <_scanf_float+0x64>
 80068aa:	2507      	movs	r5, #7
 80068ac:	e7b1      	b.n	8006812 <_scanf_float+0x192>
 80068ae:	6822      	ldr	r2, [r4, #0]
 80068b0:	0591      	lsls	r1, r2, #22
 80068b2:	f57f af17 	bpl.w	80066e4 <_scanf_float+0x64>
 80068b6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80068ba:	6022      	str	r2, [r4, #0]
 80068bc:	f8cd 9008 	str.w	r9, [sp, #8]
 80068c0:	e7a7      	b.n	8006812 <_scanf_float+0x192>
 80068c2:	6822      	ldr	r2, [r4, #0]
 80068c4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80068c8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80068cc:	d006      	beq.n	80068dc <_scanf_float+0x25c>
 80068ce:	0550      	lsls	r0, r2, #21
 80068d0:	f57f af08 	bpl.w	80066e4 <_scanf_float+0x64>
 80068d4:	f1b9 0f00 	cmp.w	r9, #0
 80068d8:	f000 80de 	beq.w	8006a98 <_scanf_float+0x418>
 80068dc:	0591      	lsls	r1, r2, #22
 80068de:	bf58      	it	pl
 80068e0:	9902      	ldrpl	r1, [sp, #8]
 80068e2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80068e6:	bf58      	it	pl
 80068e8:	eba9 0101 	subpl.w	r1, r9, r1
 80068ec:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80068f0:	bf58      	it	pl
 80068f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80068f6:	6022      	str	r2, [r4, #0]
 80068f8:	f04f 0900 	mov.w	r9, #0
 80068fc:	e789      	b.n	8006812 <_scanf_float+0x192>
 80068fe:	f04f 0a03 	mov.w	sl, #3
 8006902:	e786      	b.n	8006812 <_scanf_float+0x192>
 8006904:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006908:	4639      	mov	r1, r7
 800690a:	4640      	mov	r0, r8
 800690c:	4798      	blx	r3
 800690e:	2800      	cmp	r0, #0
 8006910:	f43f aedb 	beq.w	80066ca <_scanf_float+0x4a>
 8006914:	e6e6      	b.n	80066e4 <_scanf_float+0x64>
 8006916:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800691a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800691e:	463a      	mov	r2, r7
 8006920:	4640      	mov	r0, r8
 8006922:	4798      	blx	r3
 8006924:	6923      	ldr	r3, [r4, #16]
 8006926:	3b01      	subs	r3, #1
 8006928:	6123      	str	r3, [r4, #16]
 800692a:	e6e8      	b.n	80066fe <_scanf_float+0x7e>
 800692c:	1e6b      	subs	r3, r5, #1
 800692e:	2b06      	cmp	r3, #6
 8006930:	d824      	bhi.n	800697c <_scanf_float+0x2fc>
 8006932:	2d02      	cmp	r5, #2
 8006934:	d836      	bhi.n	80069a4 <_scanf_float+0x324>
 8006936:	9b01      	ldr	r3, [sp, #4]
 8006938:	429e      	cmp	r6, r3
 800693a:	f67f aee4 	bls.w	8006706 <_scanf_float+0x86>
 800693e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006942:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006946:	463a      	mov	r2, r7
 8006948:	4640      	mov	r0, r8
 800694a:	4798      	blx	r3
 800694c:	6923      	ldr	r3, [r4, #16]
 800694e:	3b01      	subs	r3, #1
 8006950:	6123      	str	r3, [r4, #16]
 8006952:	e7f0      	b.n	8006936 <_scanf_float+0x2b6>
 8006954:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006958:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800695c:	463a      	mov	r2, r7
 800695e:	4640      	mov	r0, r8
 8006960:	4798      	blx	r3
 8006962:	6923      	ldr	r3, [r4, #16]
 8006964:	3b01      	subs	r3, #1
 8006966:	6123      	str	r3, [r4, #16]
 8006968:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800696c:	fa5f fa8a 	uxtb.w	sl, sl
 8006970:	f1ba 0f02 	cmp.w	sl, #2
 8006974:	d1ee      	bne.n	8006954 <_scanf_float+0x2d4>
 8006976:	3d03      	subs	r5, #3
 8006978:	b2ed      	uxtb	r5, r5
 800697a:	1b76      	subs	r6, r6, r5
 800697c:	6823      	ldr	r3, [r4, #0]
 800697e:	05da      	lsls	r2, r3, #23
 8006980:	d530      	bpl.n	80069e4 <_scanf_float+0x364>
 8006982:	055b      	lsls	r3, r3, #21
 8006984:	d511      	bpl.n	80069aa <_scanf_float+0x32a>
 8006986:	9b01      	ldr	r3, [sp, #4]
 8006988:	429e      	cmp	r6, r3
 800698a:	f67f aebc 	bls.w	8006706 <_scanf_float+0x86>
 800698e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006992:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006996:	463a      	mov	r2, r7
 8006998:	4640      	mov	r0, r8
 800699a:	4798      	blx	r3
 800699c:	6923      	ldr	r3, [r4, #16]
 800699e:	3b01      	subs	r3, #1
 80069a0:	6123      	str	r3, [r4, #16]
 80069a2:	e7f0      	b.n	8006986 <_scanf_float+0x306>
 80069a4:	46aa      	mov	sl, r5
 80069a6:	46b3      	mov	fp, r6
 80069a8:	e7de      	b.n	8006968 <_scanf_float+0x2e8>
 80069aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80069ae:	6923      	ldr	r3, [r4, #16]
 80069b0:	2965      	cmp	r1, #101	@ 0x65
 80069b2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80069b6:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 80069ba:	6123      	str	r3, [r4, #16]
 80069bc:	d00c      	beq.n	80069d8 <_scanf_float+0x358>
 80069be:	2945      	cmp	r1, #69	@ 0x45
 80069c0:	d00a      	beq.n	80069d8 <_scanf_float+0x358>
 80069c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80069c6:	463a      	mov	r2, r7
 80069c8:	4640      	mov	r0, r8
 80069ca:	4798      	blx	r3
 80069cc:	6923      	ldr	r3, [r4, #16]
 80069ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80069d2:	3b01      	subs	r3, #1
 80069d4:	1eb5      	subs	r5, r6, #2
 80069d6:	6123      	str	r3, [r4, #16]
 80069d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80069dc:	463a      	mov	r2, r7
 80069de:	4640      	mov	r0, r8
 80069e0:	4798      	blx	r3
 80069e2:	462e      	mov	r6, r5
 80069e4:	6822      	ldr	r2, [r4, #0]
 80069e6:	f012 0210 	ands.w	r2, r2, #16
 80069ea:	d001      	beq.n	80069f0 <_scanf_float+0x370>
 80069ec:	2000      	movs	r0, #0
 80069ee:	e68b      	b.n	8006708 <_scanf_float+0x88>
 80069f0:	7032      	strb	r2, [r6, #0]
 80069f2:	6823      	ldr	r3, [r4, #0]
 80069f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80069f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069fc:	d11c      	bne.n	8006a38 <_scanf_float+0x3b8>
 80069fe:	9b02      	ldr	r3, [sp, #8]
 8006a00:	454b      	cmp	r3, r9
 8006a02:	eba3 0209 	sub.w	r2, r3, r9
 8006a06:	d123      	bne.n	8006a50 <_scanf_float+0x3d0>
 8006a08:	9901      	ldr	r1, [sp, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	4640      	mov	r0, r8
 8006a0e:	f002 fc0b 	bl	8009228 <_strtod_r>
 8006a12:	9b03      	ldr	r3, [sp, #12]
 8006a14:	6821      	ldr	r1, [r4, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f011 0f02 	tst.w	r1, #2
 8006a1c:	ec57 6b10 	vmov	r6, r7, d0
 8006a20:	f103 0204 	add.w	r2, r3, #4
 8006a24:	d01f      	beq.n	8006a66 <_scanf_float+0x3e6>
 8006a26:	9903      	ldr	r1, [sp, #12]
 8006a28:	600a      	str	r2, [r1, #0]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	e9c3 6700 	strd	r6, r7, [r3]
 8006a30:	68e3      	ldr	r3, [r4, #12]
 8006a32:	3301      	adds	r3, #1
 8006a34:	60e3      	str	r3, [r4, #12]
 8006a36:	e7d9      	b.n	80069ec <_scanf_float+0x36c>
 8006a38:	9b04      	ldr	r3, [sp, #16]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d0e4      	beq.n	8006a08 <_scanf_float+0x388>
 8006a3e:	9905      	ldr	r1, [sp, #20]
 8006a40:	230a      	movs	r3, #10
 8006a42:	3101      	adds	r1, #1
 8006a44:	4640      	mov	r0, r8
 8006a46:	f002 fc6f 	bl	8009328 <_strtol_r>
 8006a4a:	9b04      	ldr	r3, [sp, #16]
 8006a4c:	9e05      	ldr	r6, [sp, #20]
 8006a4e:	1ac2      	subs	r2, r0, r3
 8006a50:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006a54:	429e      	cmp	r6, r3
 8006a56:	bf28      	it	cs
 8006a58:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006a5c:	4910      	ldr	r1, [pc, #64]	@ (8006aa0 <_scanf_float+0x420>)
 8006a5e:	4630      	mov	r0, r6
 8006a60:	f000 f8f6 	bl	8006c50 <siprintf>
 8006a64:	e7d0      	b.n	8006a08 <_scanf_float+0x388>
 8006a66:	f011 0f04 	tst.w	r1, #4
 8006a6a:	9903      	ldr	r1, [sp, #12]
 8006a6c:	600a      	str	r2, [r1, #0]
 8006a6e:	d1dc      	bne.n	8006a2a <_scanf_float+0x3aa>
 8006a70:	681d      	ldr	r5, [r3, #0]
 8006a72:	4632      	mov	r2, r6
 8006a74:	463b      	mov	r3, r7
 8006a76:	4630      	mov	r0, r6
 8006a78:	4639      	mov	r1, r7
 8006a7a:	f7fa f877 	bl	8000b6c <__aeabi_dcmpun>
 8006a7e:	b128      	cbz	r0, 8006a8c <_scanf_float+0x40c>
 8006a80:	4808      	ldr	r0, [pc, #32]	@ (8006aa4 <_scanf_float+0x424>)
 8006a82:	f000 f9c9 	bl	8006e18 <nanf>
 8006a86:	ed85 0a00 	vstr	s0, [r5]
 8006a8a:	e7d1      	b.n	8006a30 <_scanf_float+0x3b0>
 8006a8c:	4630      	mov	r0, r6
 8006a8e:	4639      	mov	r1, r7
 8006a90:	f7fa f8ca 	bl	8000c28 <__aeabi_d2f>
 8006a94:	6028      	str	r0, [r5, #0]
 8006a96:	e7cb      	b.n	8006a30 <_scanf_float+0x3b0>
 8006a98:	f04f 0900 	mov.w	r9, #0
 8006a9c:	e629      	b.n	80066f2 <_scanf_float+0x72>
 8006a9e:	bf00      	nop
 8006aa0:	0800b5c8 	.word	0x0800b5c8
 8006aa4:	0800b95d 	.word	0x0800b95d

08006aa8 <std>:
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	b510      	push	{r4, lr}
 8006aac:	4604      	mov	r4, r0
 8006aae:	e9c0 3300 	strd	r3, r3, [r0]
 8006ab2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ab6:	6083      	str	r3, [r0, #8]
 8006ab8:	8181      	strh	r1, [r0, #12]
 8006aba:	6643      	str	r3, [r0, #100]	@ 0x64
 8006abc:	81c2      	strh	r2, [r0, #14]
 8006abe:	6183      	str	r3, [r0, #24]
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	2208      	movs	r2, #8
 8006ac4:	305c      	adds	r0, #92	@ 0x5c
 8006ac6:	f000 f926 	bl	8006d16 <memset>
 8006aca:	4b0d      	ldr	r3, [pc, #52]	@ (8006b00 <std+0x58>)
 8006acc:	6263      	str	r3, [r4, #36]	@ 0x24
 8006ace:	4b0d      	ldr	r3, [pc, #52]	@ (8006b04 <std+0x5c>)
 8006ad0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8006b08 <std+0x60>)
 8006ad4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8006b0c <std+0x64>)
 8006ad8:	6323      	str	r3, [r4, #48]	@ 0x30
 8006ada:	4b0d      	ldr	r3, [pc, #52]	@ (8006b10 <std+0x68>)
 8006adc:	6224      	str	r4, [r4, #32]
 8006ade:	429c      	cmp	r4, r3
 8006ae0:	d006      	beq.n	8006af0 <std+0x48>
 8006ae2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006ae6:	4294      	cmp	r4, r2
 8006ae8:	d002      	beq.n	8006af0 <std+0x48>
 8006aea:	33d0      	adds	r3, #208	@ 0xd0
 8006aec:	429c      	cmp	r4, r3
 8006aee:	d105      	bne.n	8006afc <std+0x54>
 8006af0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006af8:	f000 b98a 	b.w	8006e10 <__retarget_lock_init_recursive>
 8006afc:	bd10      	pop	{r4, pc}
 8006afe:	bf00      	nop
 8006b00:	08006c91 	.word	0x08006c91
 8006b04:	08006cb3 	.word	0x08006cb3
 8006b08:	08006ceb 	.word	0x08006ceb
 8006b0c:	08006d0f 	.word	0x08006d0f
 8006b10:	200003e8 	.word	0x200003e8

08006b14 <stdio_exit_handler>:
 8006b14:	4a02      	ldr	r2, [pc, #8]	@ (8006b20 <stdio_exit_handler+0xc>)
 8006b16:	4903      	ldr	r1, [pc, #12]	@ (8006b24 <stdio_exit_handler+0x10>)
 8006b18:	4803      	ldr	r0, [pc, #12]	@ (8006b28 <stdio_exit_handler+0x14>)
 8006b1a:	f000 b869 	b.w	8006bf0 <_fwalk_sglue>
 8006b1e:	bf00      	nop
 8006b20:	2000000c 	.word	0x2000000c
 8006b24:	08009969 	.word	0x08009969
 8006b28:	2000001c 	.word	0x2000001c

08006b2c <cleanup_stdio>:
 8006b2c:	6841      	ldr	r1, [r0, #4]
 8006b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8006b60 <cleanup_stdio+0x34>)
 8006b30:	4299      	cmp	r1, r3
 8006b32:	b510      	push	{r4, lr}
 8006b34:	4604      	mov	r4, r0
 8006b36:	d001      	beq.n	8006b3c <cleanup_stdio+0x10>
 8006b38:	f002 ff16 	bl	8009968 <_fflush_r>
 8006b3c:	68a1      	ldr	r1, [r4, #8]
 8006b3e:	4b09      	ldr	r3, [pc, #36]	@ (8006b64 <cleanup_stdio+0x38>)
 8006b40:	4299      	cmp	r1, r3
 8006b42:	d002      	beq.n	8006b4a <cleanup_stdio+0x1e>
 8006b44:	4620      	mov	r0, r4
 8006b46:	f002 ff0f 	bl	8009968 <_fflush_r>
 8006b4a:	68e1      	ldr	r1, [r4, #12]
 8006b4c:	4b06      	ldr	r3, [pc, #24]	@ (8006b68 <cleanup_stdio+0x3c>)
 8006b4e:	4299      	cmp	r1, r3
 8006b50:	d004      	beq.n	8006b5c <cleanup_stdio+0x30>
 8006b52:	4620      	mov	r0, r4
 8006b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b58:	f002 bf06 	b.w	8009968 <_fflush_r>
 8006b5c:	bd10      	pop	{r4, pc}
 8006b5e:	bf00      	nop
 8006b60:	200003e8 	.word	0x200003e8
 8006b64:	20000450 	.word	0x20000450
 8006b68:	200004b8 	.word	0x200004b8

08006b6c <global_stdio_init.part.0>:
 8006b6c:	b510      	push	{r4, lr}
 8006b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8006b9c <global_stdio_init.part.0+0x30>)
 8006b70:	4c0b      	ldr	r4, [pc, #44]	@ (8006ba0 <global_stdio_init.part.0+0x34>)
 8006b72:	4a0c      	ldr	r2, [pc, #48]	@ (8006ba4 <global_stdio_init.part.0+0x38>)
 8006b74:	601a      	str	r2, [r3, #0]
 8006b76:	4620      	mov	r0, r4
 8006b78:	2200      	movs	r2, #0
 8006b7a:	2104      	movs	r1, #4
 8006b7c:	f7ff ff94 	bl	8006aa8 <std>
 8006b80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006b84:	2201      	movs	r2, #1
 8006b86:	2109      	movs	r1, #9
 8006b88:	f7ff ff8e 	bl	8006aa8 <std>
 8006b8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006b90:	2202      	movs	r2, #2
 8006b92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b96:	2112      	movs	r1, #18
 8006b98:	f7ff bf86 	b.w	8006aa8 <std>
 8006b9c:	20000520 	.word	0x20000520
 8006ba0:	200003e8 	.word	0x200003e8
 8006ba4:	08006b15 	.word	0x08006b15

08006ba8 <__sfp_lock_acquire>:
 8006ba8:	4801      	ldr	r0, [pc, #4]	@ (8006bb0 <__sfp_lock_acquire+0x8>)
 8006baa:	f000 b932 	b.w	8006e12 <__retarget_lock_acquire_recursive>
 8006bae:	bf00      	nop
 8006bb0:	20000529 	.word	0x20000529

08006bb4 <__sfp_lock_release>:
 8006bb4:	4801      	ldr	r0, [pc, #4]	@ (8006bbc <__sfp_lock_release+0x8>)
 8006bb6:	f000 b92d 	b.w	8006e14 <__retarget_lock_release_recursive>
 8006bba:	bf00      	nop
 8006bbc:	20000529 	.word	0x20000529

08006bc0 <__sinit>:
 8006bc0:	b510      	push	{r4, lr}
 8006bc2:	4604      	mov	r4, r0
 8006bc4:	f7ff fff0 	bl	8006ba8 <__sfp_lock_acquire>
 8006bc8:	6a23      	ldr	r3, [r4, #32]
 8006bca:	b11b      	cbz	r3, 8006bd4 <__sinit+0x14>
 8006bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bd0:	f7ff bff0 	b.w	8006bb4 <__sfp_lock_release>
 8006bd4:	4b04      	ldr	r3, [pc, #16]	@ (8006be8 <__sinit+0x28>)
 8006bd6:	6223      	str	r3, [r4, #32]
 8006bd8:	4b04      	ldr	r3, [pc, #16]	@ (8006bec <__sinit+0x2c>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1f5      	bne.n	8006bcc <__sinit+0xc>
 8006be0:	f7ff ffc4 	bl	8006b6c <global_stdio_init.part.0>
 8006be4:	e7f2      	b.n	8006bcc <__sinit+0xc>
 8006be6:	bf00      	nop
 8006be8:	08006b2d 	.word	0x08006b2d
 8006bec:	20000520 	.word	0x20000520

08006bf0 <_fwalk_sglue>:
 8006bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bf4:	4607      	mov	r7, r0
 8006bf6:	4688      	mov	r8, r1
 8006bf8:	4614      	mov	r4, r2
 8006bfa:	2600      	movs	r6, #0
 8006bfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c00:	f1b9 0901 	subs.w	r9, r9, #1
 8006c04:	d505      	bpl.n	8006c12 <_fwalk_sglue+0x22>
 8006c06:	6824      	ldr	r4, [r4, #0]
 8006c08:	2c00      	cmp	r4, #0
 8006c0a:	d1f7      	bne.n	8006bfc <_fwalk_sglue+0xc>
 8006c0c:	4630      	mov	r0, r6
 8006c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c12:	89ab      	ldrh	r3, [r5, #12]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d907      	bls.n	8006c28 <_fwalk_sglue+0x38>
 8006c18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	d003      	beq.n	8006c28 <_fwalk_sglue+0x38>
 8006c20:	4629      	mov	r1, r5
 8006c22:	4638      	mov	r0, r7
 8006c24:	47c0      	blx	r8
 8006c26:	4306      	orrs	r6, r0
 8006c28:	3568      	adds	r5, #104	@ 0x68
 8006c2a:	e7e9      	b.n	8006c00 <_fwalk_sglue+0x10>

08006c2c <iprintf>:
 8006c2c:	b40f      	push	{r0, r1, r2, r3}
 8006c2e:	b507      	push	{r0, r1, r2, lr}
 8006c30:	4906      	ldr	r1, [pc, #24]	@ (8006c4c <iprintf+0x20>)
 8006c32:	ab04      	add	r3, sp, #16
 8006c34:	6808      	ldr	r0, [r1, #0]
 8006c36:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c3a:	6881      	ldr	r1, [r0, #8]
 8006c3c:	9301      	str	r3, [sp, #4]
 8006c3e:	f002 fcf7 	bl	8009630 <_vfiprintf_r>
 8006c42:	b003      	add	sp, #12
 8006c44:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c48:	b004      	add	sp, #16
 8006c4a:	4770      	bx	lr
 8006c4c:	20000018 	.word	0x20000018

08006c50 <siprintf>:
 8006c50:	b40e      	push	{r1, r2, r3}
 8006c52:	b500      	push	{lr}
 8006c54:	b09c      	sub	sp, #112	@ 0x70
 8006c56:	ab1d      	add	r3, sp, #116	@ 0x74
 8006c58:	9002      	str	r0, [sp, #8]
 8006c5a:	9006      	str	r0, [sp, #24]
 8006c5c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006c60:	4809      	ldr	r0, [pc, #36]	@ (8006c88 <siprintf+0x38>)
 8006c62:	9107      	str	r1, [sp, #28]
 8006c64:	9104      	str	r1, [sp, #16]
 8006c66:	4909      	ldr	r1, [pc, #36]	@ (8006c8c <siprintf+0x3c>)
 8006c68:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c6c:	9105      	str	r1, [sp, #20]
 8006c6e:	6800      	ldr	r0, [r0, #0]
 8006c70:	9301      	str	r3, [sp, #4]
 8006c72:	a902      	add	r1, sp, #8
 8006c74:	f002 fbb6 	bl	80093e4 <_svfiprintf_r>
 8006c78:	9b02      	ldr	r3, [sp, #8]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	701a      	strb	r2, [r3, #0]
 8006c7e:	b01c      	add	sp, #112	@ 0x70
 8006c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c84:	b003      	add	sp, #12
 8006c86:	4770      	bx	lr
 8006c88:	20000018 	.word	0x20000018
 8006c8c:	ffff0208 	.word	0xffff0208

08006c90 <__sread>:
 8006c90:	b510      	push	{r4, lr}
 8006c92:	460c      	mov	r4, r1
 8006c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c98:	f000 f86c 	bl	8006d74 <_read_r>
 8006c9c:	2800      	cmp	r0, #0
 8006c9e:	bfab      	itete	ge
 8006ca0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006ca2:	89a3      	ldrhlt	r3, [r4, #12]
 8006ca4:	181b      	addge	r3, r3, r0
 8006ca6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006caa:	bfac      	ite	ge
 8006cac:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006cae:	81a3      	strhlt	r3, [r4, #12]
 8006cb0:	bd10      	pop	{r4, pc}

08006cb2 <__swrite>:
 8006cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cb6:	461f      	mov	r7, r3
 8006cb8:	898b      	ldrh	r3, [r1, #12]
 8006cba:	05db      	lsls	r3, r3, #23
 8006cbc:	4605      	mov	r5, r0
 8006cbe:	460c      	mov	r4, r1
 8006cc0:	4616      	mov	r6, r2
 8006cc2:	d505      	bpl.n	8006cd0 <__swrite+0x1e>
 8006cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cc8:	2302      	movs	r3, #2
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f000 f840 	bl	8006d50 <_lseek_r>
 8006cd0:	89a3      	ldrh	r3, [r4, #12]
 8006cd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cd6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006cda:	81a3      	strh	r3, [r4, #12]
 8006cdc:	4632      	mov	r2, r6
 8006cde:	463b      	mov	r3, r7
 8006ce0:	4628      	mov	r0, r5
 8006ce2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ce6:	f000 b857 	b.w	8006d98 <_write_r>

08006cea <__sseek>:
 8006cea:	b510      	push	{r4, lr}
 8006cec:	460c      	mov	r4, r1
 8006cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cf2:	f000 f82d 	bl	8006d50 <_lseek_r>
 8006cf6:	1c43      	adds	r3, r0, #1
 8006cf8:	89a3      	ldrh	r3, [r4, #12]
 8006cfa:	bf15      	itete	ne
 8006cfc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006cfe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006d02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006d06:	81a3      	strheq	r3, [r4, #12]
 8006d08:	bf18      	it	ne
 8006d0a:	81a3      	strhne	r3, [r4, #12]
 8006d0c:	bd10      	pop	{r4, pc}

08006d0e <__sclose>:
 8006d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d12:	f000 b80d 	b.w	8006d30 <_close_r>

08006d16 <memset>:
 8006d16:	4402      	add	r2, r0
 8006d18:	4603      	mov	r3, r0
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d100      	bne.n	8006d20 <memset+0xa>
 8006d1e:	4770      	bx	lr
 8006d20:	f803 1b01 	strb.w	r1, [r3], #1
 8006d24:	e7f9      	b.n	8006d1a <memset+0x4>
	...

08006d28 <_localeconv_r>:
 8006d28:	4800      	ldr	r0, [pc, #0]	@ (8006d2c <_localeconv_r+0x4>)
 8006d2a:	4770      	bx	lr
 8006d2c:	20000158 	.word	0x20000158

08006d30 <_close_r>:
 8006d30:	b538      	push	{r3, r4, r5, lr}
 8006d32:	4d06      	ldr	r5, [pc, #24]	@ (8006d4c <_close_r+0x1c>)
 8006d34:	2300      	movs	r3, #0
 8006d36:	4604      	mov	r4, r0
 8006d38:	4608      	mov	r0, r1
 8006d3a:	602b      	str	r3, [r5, #0]
 8006d3c:	f7fb f906 	bl	8001f4c <_close>
 8006d40:	1c43      	adds	r3, r0, #1
 8006d42:	d102      	bne.n	8006d4a <_close_r+0x1a>
 8006d44:	682b      	ldr	r3, [r5, #0]
 8006d46:	b103      	cbz	r3, 8006d4a <_close_r+0x1a>
 8006d48:	6023      	str	r3, [r4, #0]
 8006d4a:	bd38      	pop	{r3, r4, r5, pc}
 8006d4c:	20000524 	.word	0x20000524

08006d50 <_lseek_r>:
 8006d50:	b538      	push	{r3, r4, r5, lr}
 8006d52:	4d07      	ldr	r5, [pc, #28]	@ (8006d70 <_lseek_r+0x20>)
 8006d54:	4604      	mov	r4, r0
 8006d56:	4608      	mov	r0, r1
 8006d58:	4611      	mov	r1, r2
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	602a      	str	r2, [r5, #0]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	f7fb f91b 	bl	8001f9a <_lseek>
 8006d64:	1c43      	adds	r3, r0, #1
 8006d66:	d102      	bne.n	8006d6e <_lseek_r+0x1e>
 8006d68:	682b      	ldr	r3, [r5, #0]
 8006d6a:	b103      	cbz	r3, 8006d6e <_lseek_r+0x1e>
 8006d6c:	6023      	str	r3, [r4, #0]
 8006d6e:	bd38      	pop	{r3, r4, r5, pc}
 8006d70:	20000524 	.word	0x20000524

08006d74 <_read_r>:
 8006d74:	b538      	push	{r3, r4, r5, lr}
 8006d76:	4d07      	ldr	r5, [pc, #28]	@ (8006d94 <_read_r+0x20>)
 8006d78:	4604      	mov	r4, r0
 8006d7a:	4608      	mov	r0, r1
 8006d7c:	4611      	mov	r1, r2
 8006d7e:	2200      	movs	r2, #0
 8006d80:	602a      	str	r2, [r5, #0]
 8006d82:	461a      	mov	r2, r3
 8006d84:	f7fb f8c5 	bl	8001f12 <_read>
 8006d88:	1c43      	adds	r3, r0, #1
 8006d8a:	d102      	bne.n	8006d92 <_read_r+0x1e>
 8006d8c:	682b      	ldr	r3, [r5, #0]
 8006d8e:	b103      	cbz	r3, 8006d92 <_read_r+0x1e>
 8006d90:	6023      	str	r3, [r4, #0]
 8006d92:	bd38      	pop	{r3, r4, r5, pc}
 8006d94:	20000524 	.word	0x20000524

08006d98 <_write_r>:
 8006d98:	b538      	push	{r3, r4, r5, lr}
 8006d9a:	4d07      	ldr	r5, [pc, #28]	@ (8006db8 <_write_r+0x20>)
 8006d9c:	4604      	mov	r4, r0
 8006d9e:	4608      	mov	r0, r1
 8006da0:	4611      	mov	r1, r2
 8006da2:	2200      	movs	r2, #0
 8006da4:	602a      	str	r2, [r5, #0]
 8006da6:	461a      	mov	r2, r3
 8006da8:	f7fa fe8a 	bl	8001ac0 <_write>
 8006dac:	1c43      	adds	r3, r0, #1
 8006dae:	d102      	bne.n	8006db6 <_write_r+0x1e>
 8006db0:	682b      	ldr	r3, [r5, #0]
 8006db2:	b103      	cbz	r3, 8006db6 <_write_r+0x1e>
 8006db4:	6023      	str	r3, [r4, #0]
 8006db6:	bd38      	pop	{r3, r4, r5, pc}
 8006db8:	20000524 	.word	0x20000524

08006dbc <__errno>:
 8006dbc:	4b01      	ldr	r3, [pc, #4]	@ (8006dc4 <__errno+0x8>)
 8006dbe:	6818      	ldr	r0, [r3, #0]
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	20000018 	.word	0x20000018

08006dc8 <__libc_init_array>:
 8006dc8:	b570      	push	{r4, r5, r6, lr}
 8006dca:	4d0d      	ldr	r5, [pc, #52]	@ (8006e00 <__libc_init_array+0x38>)
 8006dcc:	4c0d      	ldr	r4, [pc, #52]	@ (8006e04 <__libc_init_array+0x3c>)
 8006dce:	1b64      	subs	r4, r4, r5
 8006dd0:	10a4      	asrs	r4, r4, #2
 8006dd2:	2600      	movs	r6, #0
 8006dd4:	42a6      	cmp	r6, r4
 8006dd6:	d109      	bne.n	8006dec <__libc_init_array+0x24>
 8006dd8:	4d0b      	ldr	r5, [pc, #44]	@ (8006e08 <__libc_init_array+0x40>)
 8006dda:	4c0c      	ldr	r4, [pc, #48]	@ (8006e0c <__libc_init_array+0x44>)
 8006ddc:	f004 fba8 	bl	800b530 <_init>
 8006de0:	1b64      	subs	r4, r4, r5
 8006de2:	10a4      	asrs	r4, r4, #2
 8006de4:	2600      	movs	r6, #0
 8006de6:	42a6      	cmp	r6, r4
 8006de8:	d105      	bne.n	8006df6 <__libc_init_array+0x2e>
 8006dea:	bd70      	pop	{r4, r5, r6, pc}
 8006dec:	f855 3b04 	ldr.w	r3, [r5], #4
 8006df0:	4798      	blx	r3
 8006df2:	3601      	adds	r6, #1
 8006df4:	e7ee      	b.n	8006dd4 <__libc_init_array+0xc>
 8006df6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dfa:	4798      	blx	r3
 8006dfc:	3601      	adds	r6, #1
 8006dfe:	e7f2      	b.n	8006de6 <__libc_init_array+0x1e>
 8006e00:	0800bba0 	.word	0x0800bba0
 8006e04:	0800bba0 	.word	0x0800bba0
 8006e08:	0800bba0 	.word	0x0800bba0
 8006e0c:	0800bba4 	.word	0x0800bba4

08006e10 <__retarget_lock_init_recursive>:
 8006e10:	4770      	bx	lr

08006e12 <__retarget_lock_acquire_recursive>:
 8006e12:	4770      	bx	lr

08006e14 <__retarget_lock_release_recursive>:
 8006e14:	4770      	bx	lr
	...

08006e18 <nanf>:
 8006e18:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006e20 <nanf+0x8>
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	7fc00000 	.word	0x7fc00000

08006e24 <quorem>:
 8006e24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e28:	6903      	ldr	r3, [r0, #16]
 8006e2a:	690c      	ldr	r4, [r1, #16]
 8006e2c:	42a3      	cmp	r3, r4
 8006e2e:	4607      	mov	r7, r0
 8006e30:	db7e      	blt.n	8006f30 <quorem+0x10c>
 8006e32:	3c01      	subs	r4, #1
 8006e34:	f101 0814 	add.w	r8, r1, #20
 8006e38:	00a3      	lsls	r3, r4, #2
 8006e3a:	f100 0514 	add.w	r5, r0, #20
 8006e3e:	9300      	str	r3, [sp, #0]
 8006e40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e44:	9301      	str	r3, [sp, #4]
 8006e46:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006e4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	429a      	cmp	r2, r3
 8006e52:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006e56:	fbb2 f6f3 	udiv	r6, r2, r3
 8006e5a:	d32e      	bcc.n	8006eba <quorem+0x96>
 8006e5c:	f04f 0a00 	mov.w	sl, #0
 8006e60:	46c4      	mov	ip, r8
 8006e62:	46ae      	mov	lr, r5
 8006e64:	46d3      	mov	fp, sl
 8006e66:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006e6a:	b298      	uxth	r0, r3
 8006e6c:	fb06 a000 	mla	r0, r6, r0, sl
 8006e70:	0c02      	lsrs	r2, r0, #16
 8006e72:	0c1b      	lsrs	r3, r3, #16
 8006e74:	fb06 2303 	mla	r3, r6, r3, r2
 8006e78:	f8de 2000 	ldr.w	r2, [lr]
 8006e7c:	b280      	uxth	r0, r0
 8006e7e:	b292      	uxth	r2, r2
 8006e80:	1a12      	subs	r2, r2, r0
 8006e82:	445a      	add	r2, fp
 8006e84:	f8de 0000 	ldr.w	r0, [lr]
 8006e88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006e92:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006e96:	b292      	uxth	r2, r2
 8006e98:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006e9c:	45e1      	cmp	r9, ip
 8006e9e:	f84e 2b04 	str.w	r2, [lr], #4
 8006ea2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006ea6:	d2de      	bcs.n	8006e66 <quorem+0x42>
 8006ea8:	9b00      	ldr	r3, [sp, #0]
 8006eaa:	58eb      	ldr	r3, [r5, r3]
 8006eac:	b92b      	cbnz	r3, 8006eba <quorem+0x96>
 8006eae:	9b01      	ldr	r3, [sp, #4]
 8006eb0:	3b04      	subs	r3, #4
 8006eb2:	429d      	cmp	r5, r3
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	d32f      	bcc.n	8006f18 <quorem+0xf4>
 8006eb8:	613c      	str	r4, [r7, #16]
 8006eba:	4638      	mov	r0, r7
 8006ebc:	f001 f9c4 	bl	8008248 <__mcmp>
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	db25      	blt.n	8006f10 <quorem+0xec>
 8006ec4:	4629      	mov	r1, r5
 8006ec6:	2000      	movs	r0, #0
 8006ec8:	f858 2b04 	ldr.w	r2, [r8], #4
 8006ecc:	f8d1 c000 	ldr.w	ip, [r1]
 8006ed0:	fa1f fe82 	uxth.w	lr, r2
 8006ed4:	fa1f f38c 	uxth.w	r3, ip
 8006ed8:	eba3 030e 	sub.w	r3, r3, lr
 8006edc:	4403      	add	r3, r0
 8006ede:	0c12      	lsrs	r2, r2, #16
 8006ee0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006ee4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006eee:	45c1      	cmp	r9, r8
 8006ef0:	f841 3b04 	str.w	r3, [r1], #4
 8006ef4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006ef8:	d2e6      	bcs.n	8006ec8 <quorem+0xa4>
 8006efa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006efe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f02:	b922      	cbnz	r2, 8006f0e <quorem+0xea>
 8006f04:	3b04      	subs	r3, #4
 8006f06:	429d      	cmp	r5, r3
 8006f08:	461a      	mov	r2, r3
 8006f0a:	d30b      	bcc.n	8006f24 <quorem+0x100>
 8006f0c:	613c      	str	r4, [r7, #16]
 8006f0e:	3601      	adds	r6, #1
 8006f10:	4630      	mov	r0, r6
 8006f12:	b003      	add	sp, #12
 8006f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f18:	6812      	ldr	r2, [r2, #0]
 8006f1a:	3b04      	subs	r3, #4
 8006f1c:	2a00      	cmp	r2, #0
 8006f1e:	d1cb      	bne.n	8006eb8 <quorem+0x94>
 8006f20:	3c01      	subs	r4, #1
 8006f22:	e7c6      	b.n	8006eb2 <quorem+0x8e>
 8006f24:	6812      	ldr	r2, [r2, #0]
 8006f26:	3b04      	subs	r3, #4
 8006f28:	2a00      	cmp	r2, #0
 8006f2a:	d1ef      	bne.n	8006f0c <quorem+0xe8>
 8006f2c:	3c01      	subs	r4, #1
 8006f2e:	e7ea      	b.n	8006f06 <quorem+0xe2>
 8006f30:	2000      	movs	r0, #0
 8006f32:	e7ee      	b.n	8006f12 <quorem+0xee>
 8006f34:	0000      	movs	r0, r0
	...

08006f38 <_dtoa_r>:
 8006f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f3c:	69c7      	ldr	r7, [r0, #28]
 8006f3e:	b099      	sub	sp, #100	@ 0x64
 8006f40:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006f44:	ec55 4b10 	vmov	r4, r5, d0
 8006f48:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006f4a:	9109      	str	r1, [sp, #36]	@ 0x24
 8006f4c:	4683      	mov	fp, r0
 8006f4e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006f50:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006f52:	b97f      	cbnz	r7, 8006f74 <_dtoa_r+0x3c>
 8006f54:	2010      	movs	r0, #16
 8006f56:	f000 fdfd 	bl	8007b54 <malloc>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006f60:	b920      	cbnz	r0, 8006f6c <_dtoa_r+0x34>
 8006f62:	4ba7      	ldr	r3, [pc, #668]	@ (8007200 <_dtoa_r+0x2c8>)
 8006f64:	21ef      	movs	r1, #239	@ 0xef
 8006f66:	48a7      	ldr	r0, [pc, #668]	@ (8007204 <_dtoa_r+0x2cc>)
 8006f68:	f002 fe0e 	bl	8009b88 <__assert_func>
 8006f6c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006f70:	6007      	str	r7, [r0, #0]
 8006f72:	60c7      	str	r7, [r0, #12]
 8006f74:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006f78:	6819      	ldr	r1, [r3, #0]
 8006f7a:	b159      	cbz	r1, 8006f94 <_dtoa_r+0x5c>
 8006f7c:	685a      	ldr	r2, [r3, #4]
 8006f7e:	604a      	str	r2, [r1, #4]
 8006f80:	2301      	movs	r3, #1
 8006f82:	4093      	lsls	r3, r2
 8006f84:	608b      	str	r3, [r1, #8]
 8006f86:	4658      	mov	r0, fp
 8006f88:	f000 feda 	bl	8007d40 <_Bfree>
 8006f8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006f90:	2200      	movs	r2, #0
 8006f92:	601a      	str	r2, [r3, #0]
 8006f94:	1e2b      	subs	r3, r5, #0
 8006f96:	bfb9      	ittee	lt
 8006f98:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006f9c:	9303      	strlt	r3, [sp, #12]
 8006f9e:	2300      	movge	r3, #0
 8006fa0:	6033      	strge	r3, [r6, #0]
 8006fa2:	9f03      	ldr	r7, [sp, #12]
 8006fa4:	4b98      	ldr	r3, [pc, #608]	@ (8007208 <_dtoa_r+0x2d0>)
 8006fa6:	bfbc      	itt	lt
 8006fa8:	2201      	movlt	r2, #1
 8006faa:	6032      	strlt	r2, [r6, #0]
 8006fac:	43bb      	bics	r3, r7
 8006fae:	d112      	bne.n	8006fd6 <_dtoa_r+0x9e>
 8006fb0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006fb2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006fb6:	6013      	str	r3, [r2, #0]
 8006fb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006fbc:	4323      	orrs	r3, r4
 8006fbe:	f000 854d 	beq.w	8007a5c <_dtoa_r+0xb24>
 8006fc2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006fc4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800721c <_dtoa_r+0x2e4>
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f000 854f 	beq.w	8007a6c <_dtoa_r+0xb34>
 8006fce:	f10a 0303 	add.w	r3, sl, #3
 8006fd2:	f000 bd49 	b.w	8007a68 <_dtoa_r+0xb30>
 8006fd6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	ec51 0b17 	vmov	r0, r1, d7
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006fe6:	f7f9 fd8f 	bl	8000b08 <__aeabi_dcmpeq>
 8006fea:	4680      	mov	r8, r0
 8006fec:	b158      	cbz	r0, 8007006 <_dtoa_r+0xce>
 8006fee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	6013      	str	r3, [r2, #0]
 8006ff4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006ff6:	b113      	cbz	r3, 8006ffe <_dtoa_r+0xc6>
 8006ff8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006ffa:	4b84      	ldr	r3, [pc, #528]	@ (800720c <_dtoa_r+0x2d4>)
 8006ffc:	6013      	str	r3, [r2, #0]
 8006ffe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007220 <_dtoa_r+0x2e8>
 8007002:	f000 bd33 	b.w	8007a6c <_dtoa_r+0xb34>
 8007006:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800700a:	aa16      	add	r2, sp, #88	@ 0x58
 800700c:	a917      	add	r1, sp, #92	@ 0x5c
 800700e:	4658      	mov	r0, fp
 8007010:	f001 fa3a 	bl	8008488 <__d2b>
 8007014:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007018:	4681      	mov	r9, r0
 800701a:	2e00      	cmp	r6, #0
 800701c:	d077      	beq.n	800710e <_dtoa_r+0x1d6>
 800701e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007020:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007024:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007028:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800702c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007030:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007034:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007038:	4619      	mov	r1, r3
 800703a:	2200      	movs	r2, #0
 800703c:	4b74      	ldr	r3, [pc, #464]	@ (8007210 <_dtoa_r+0x2d8>)
 800703e:	f7f9 f943 	bl	80002c8 <__aeabi_dsub>
 8007042:	a369      	add	r3, pc, #420	@ (adr r3, 80071e8 <_dtoa_r+0x2b0>)
 8007044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007048:	f7f9 faf6 	bl	8000638 <__aeabi_dmul>
 800704c:	a368      	add	r3, pc, #416	@ (adr r3, 80071f0 <_dtoa_r+0x2b8>)
 800704e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007052:	f7f9 f93b 	bl	80002cc <__adddf3>
 8007056:	4604      	mov	r4, r0
 8007058:	4630      	mov	r0, r6
 800705a:	460d      	mov	r5, r1
 800705c:	f7f9 fa82 	bl	8000564 <__aeabi_i2d>
 8007060:	a365      	add	r3, pc, #404	@ (adr r3, 80071f8 <_dtoa_r+0x2c0>)
 8007062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007066:	f7f9 fae7 	bl	8000638 <__aeabi_dmul>
 800706a:	4602      	mov	r2, r0
 800706c:	460b      	mov	r3, r1
 800706e:	4620      	mov	r0, r4
 8007070:	4629      	mov	r1, r5
 8007072:	f7f9 f92b 	bl	80002cc <__adddf3>
 8007076:	4604      	mov	r4, r0
 8007078:	460d      	mov	r5, r1
 800707a:	f7f9 fd8d 	bl	8000b98 <__aeabi_d2iz>
 800707e:	2200      	movs	r2, #0
 8007080:	4607      	mov	r7, r0
 8007082:	2300      	movs	r3, #0
 8007084:	4620      	mov	r0, r4
 8007086:	4629      	mov	r1, r5
 8007088:	f7f9 fd48 	bl	8000b1c <__aeabi_dcmplt>
 800708c:	b140      	cbz	r0, 80070a0 <_dtoa_r+0x168>
 800708e:	4638      	mov	r0, r7
 8007090:	f7f9 fa68 	bl	8000564 <__aeabi_i2d>
 8007094:	4622      	mov	r2, r4
 8007096:	462b      	mov	r3, r5
 8007098:	f7f9 fd36 	bl	8000b08 <__aeabi_dcmpeq>
 800709c:	b900      	cbnz	r0, 80070a0 <_dtoa_r+0x168>
 800709e:	3f01      	subs	r7, #1
 80070a0:	2f16      	cmp	r7, #22
 80070a2:	d851      	bhi.n	8007148 <_dtoa_r+0x210>
 80070a4:	4b5b      	ldr	r3, [pc, #364]	@ (8007214 <_dtoa_r+0x2dc>)
 80070a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80070aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070b2:	f7f9 fd33 	bl	8000b1c <__aeabi_dcmplt>
 80070b6:	2800      	cmp	r0, #0
 80070b8:	d048      	beq.n	800714c <_dtoa_r+0x214>
 80070ba:	3f01      	subs	r7, #1
 80070bc:	2300      	movs	r3, #0
 80070be:	9312      	str	r3, [sp, #72]	@ 0x48
 80070c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80070c2:	1b9b      	subs	r3, r3, r6
 80070c4:	1e5a      	subs	r2, r3, #1
 80070c6:	bf44      	itt	mi
 80070c8:	f1c3 0801 	rsbmi	r8, r3, #1
 80070cc:	2300      	movmi	r3, #0
 80070ce:	9208      	str	r2, [sp, #32]
 80070d0:	bf54      	ite	pl
 80070d2:	f04f 0800 	movpl.w	r8, #0
 80070d6:	9308      	strmi	r3, [sp, #32]
 80070d8:	2f00      	cmp	r7, #0
 80070da:	db39      	blt.n	8007150 <_dtoa_r+0x218>
 80070dc:	9b08      	ldr	r3, [sp, #32]
 80070de:	970f      	str	r7, [sp, #60]	@ 0x3c
 80070e0:	443b      	add	r3, r7
 80070e2:	9308      	str	r3, [sp, #32]
 80070e4:	2300      	movs	r3, #0
 80070e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80070e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070ea:	2b09      	cmp	r3, #9
 80070ec:	d864      	bhi.n	80071b8 <_dtoa_r+0x280>
 80070ee:	2b05      	cmp	r3, #5
 80070f0:	bfc4      	itt	gt
 80070f2:	3b04      	subgt	r3, #4
 80070f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80070f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070f8:	f1a3 0302 	sub.w	r3, r3, #2
 80070fc:	bfcc      	ite	gt
 80070fe:	2400      	movgt	r4, #0
 8007100:	2401      	movle	r4, #1
 8007102:	2b03      	cmp	r3, #3
 8007104:	d863      	bhi.n	80071ce <_dtoa_r+0x296>
 8007106:	e8df f003 	tbb	[pc, r3]
 800710a:	372a      	.short	0x372a
 800710c:	5535      	.short	0x5535
 800710e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007112:	441e      	add	r6, r3
 8007114:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007118:	2b20      	cmp	r3, #32
 800711a:	bfc1      	itttt	gt
 800711c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007120:	409f      	lslgt	r7, r3
 8007122:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007126:	fa24 f303 	lsrgt.w	r3, r4, r3
 800712a:	bfd6      	itet	le
 800712c:	f1c3 0320 	rsble	r3, r3, #32
 8007130:	ea47 0003 	orrgt.w	r0, r7, r3
 8007134:	fa04 f003 	lslle.w	r0, r4, r3
 8007138:	f7f9 fa04 	bl	8000544 <__aeabi_ui2d>
 800713c:	2201      	movs	r2, #1
 800713e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007142:	3e01      	subs	r6, #1
 8007144:	9214      	str	r2, [sp, #80]	@ 0x50
 8007146:	e777      	b.n	8007038 <_dtoa_r+0x100>
 8007148:	2301      	movs	r3, #1
 800714a:	e7b8      	b.n	80070be <_dtoa_r+0x186>
 800714c:	9012      	str	r0, [sp, #72]	@ 0x48
 800714e:	e7b7      	b.n	80070c0 <_dtoa_r+0x188>
 8007150:	427b      	negs	r3, r7
 8007152:	930a      	str	r3, [sp, #40]	@ 0x28
 8007154:	2300      	movs	r3, #0
 8007156:	eba8 0807 	sub.w	r8, r8, r7
 800715a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800715c:	e7c4      	b.n	80070e8 <_dtoa_r+0x1b0>
 800715e:	2300      	movs	r3, #0
 8007160:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007162:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007164:	2b00      	cmp	r3, #0
 8007166:	dc35      	bgt.n	80071d4 <_dtoa_r+0x29c>
 8007168:	2301      	movs	r3, #1
 800716a:	9300      	str	r3, [sp, #0]
 800716c:	9307      	str	r3, [sp, #28]
 800716e:	461a      	mov	r2, r3
 8007170:	920e      	str	r2, [sp, #56]	@ 0x38
 8007172:	e00b      	b.n	800718c <_dtoa_r+0x254>
 8007174:	2301      	movs	r3, #1
 8007176:	e7f3      	b.n	8007160 <_dtoa_r+0x228>
 8007178:	2300      	movs	r3, #0
 800717a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800717c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800717e:	18fb      	adds	r3, r7, r3
 8007180:	9300      	str	r3, [sp, #0]
 8007182:	3301      	adds	r3, #1
 8007184:	2b01      	cmp	r3, #1
 8007186:	9307      	str	r3, [sp, #28]
 8007188:	bfb8      	it	lt
 800718a:	2301      	movlt	r3, #1
 800718c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007190:	2100      	movs	r1, #0
 8007192:	2204      	movs	r2, #4
 8007194:	f102 0514 	add.w	r5, r2, #20
 8007198:	429d      	cmp	r5, r3
 800719a:	d91f      	bls.n	80071dc <_dtoa_r+0x2a4>
 800719c:	6041      	str	r1, [r0, #4]
 800719e:	4658      	mov	r0, fp
 80071a0:	f000 fd8e 	bl	8007cc0 <_Balloc>
 80071a4:	4682      	mov	sl, r0
 80071a6:	2800      	cmp	r0, #0
 80071a8:	d13c      	bne.n	8007224 <_dtoa_r+0x2ec>
 80071aa:	4b1b      	ldr	r3, [pc, #108]	@ (8007218 <_dtoa_r+0x2e0>)
 80071ac:	4602      	mov	r2, r0
 80071ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80071b2:	e6d8      	b.n	8006f66 <_dtoa_r+0x2e>
 80071b4:	2301      	movs	r3, #1
 80071b6:	e7e0      	b.n	800717a <_dtoa_r+0x242>
 80071b8:	2401      	movs	r4, #1
 80071ba:	2300      	movs	r3, #0
 80071bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80071be:	940b      	str	r4, [sp, #44]	@ 0x2c
 80071c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80071c4:	9300      	str	r3, [sp, #0]
 80071c6:	9307      	str	r3, [sp, #28]
 80071c8:	2200      	movs	r2, #0
 80071ca:	2312      	movs	r3, #18
 80071cc:	e7d0      	b.n	8007170 <_dtoa_r+0x238>
 80071ce:	2301      	movs	r3, #1
 80071d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80071d2:	e7f5      	b.n	80071c0 <_dtoa_r+0x288>
 80071d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071d6:	9300      	str	r3, [sp, #0]
 80071d8:	9307      	str	r3, [sp, #28]
 80071da:	e7d7      	b.n	800718c <_dtoa_r+0x254>
 80071dc:	3101      	adds	r1, #1
 80071de:	0052      	lsls	r2, r2, #1
 80071e0:	e7d8      	b.n	8007194 <_dtoa_r+0x25c>
 80071e2:	bf00      	nop
 80071e4:	f3af 8000 	nop.w
 80071e8:	636f4361 	.word	0x636f4361
 80071ec:	3fd287a7 	.word	0x3fd287a7
 80071f0:	8b60c8b3 	.word	0x8b60c8b3
 80071f4:	3fc68a28 	.word	0x3fc68a28
 80071f8:	509f79fb 	.word	0x509f79fb
 80071fc:	3fd34413 	.word	0x3fd34413
 8007200:	0800b5da 	.word	0x0800b5da
 8007204:	0800b5f1 	.word	0x0800b5f1
 8007208:	7ff00000 	.word	0x7ff00000
 800720c:	0800b5a5 	.word	0x0800b5a5
 8007210:	3ff80000 	.word	0x3ff80000
 8007214:	0800b6e8 	.word	0x0800b6e8
 8007218:	0800b649 	.word	0x0800b649
 800721c:	0800b5d6 	.word	0x0800b5d6
 8007220:	0800b5a4 	.word	0x0800b5a4
 8007224:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007228:	6018      	str	r0, [r3, #0]
 800722a:	9b07      	ldr	r3, [sp, #28]
 800722c:	2b0e      	cmp	r3, #14
 800722e:	f200 80a4 	bhi.w	800737a <_dtoa_r+0x442>
 8007232:	2c00      	cmp	r4, #0
 8007234:	f000 80a1 	beq.w	800737a <_dtoa_r+0x442>
 8007238:	2f00      	cmp	r7, #0
 800723a:	dd33      	ble.n	80072a4 <_dtoa_r+0x36c>
 800723c:	4bad      	ldr	r3, [pc, #692]	@ (80074f4 <_dtoa_r+0x5bc>)
 800723e:	f007 020f 	and.w	r2, r7, #15
 8007242:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007246:	ed93 7b00 	vldr	d7, [r3]
 800724a:	05f8      	lsls	r0, r7, #23
 800724c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007250:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007254:	d516      	bpl.n	8007284 <_dtoa_r+0x34c>
 8007256:	4ba8      	ldr	r3, [pc, #672]	@ (80074f8 <_dtoa_r+0x5c0>)
 8007258:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800725c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007260:	f7f9 fb14 	bl	800088c <__aeabi_ddiv>
 8007264:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007268:	f004 040f 	and.w	r4, r4, #15
 800726c:	2603      	movs	r6, #3
 800726e:	4da2      	ldr	r5, [pc, #648]	@ (80074f8 <_dtoa_r+0x5c0>)
 8007270:	b954      	cbnz	r4, 8007288 <_dtoa_r+0x350>
 8007272:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007276:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800727a:	f7f9 fb07 	bl	800088c <__aeabi_ddiv>
 800727e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007282:	e028      	b.n	80072d6 <_dtoa_r+0x39e>
 8007284:	2602      	movs	r6, #2
 8007286:	e7f2      	b.n	800726e <_dtoa_r+0x336>
 8007288:	07e1      	lsls	r1, r4, #31
 800728a:	d508      	bpl.n	800729e <_dtoa_r+0x366>
 800728c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007290:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007294:	f7f9 f9d0 	bl	8000638 <__aeabi_dmul>
 8007298:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800729c:	3601      	adds	r6, #1
 800729e:	1064      	asrs	r4, r4, #1
 80072a0:	3508      	adds	r5, #8
 80072a2:	e7e5      	b.n	8007270 <_dtoa_r+0x338>
 80072a4:	f000 80d2 	beq.w	800744c <_dtoa_r+0x514>
 80072a8:	427c      	negs	r4, r7
 80072aa:	4b92      	ldr	r3, [pc, #584]	@ (80074f4 <_dtoa_r+0x5bc>)
 80072ac:	4d92      	ldr	r5, [pc, #584]	@ (80074f8 <_dtoa_r+0x5c0>)
 80072ae:	f004 020f 	and.w	r2, r4, #15
 80072b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80072be:	f7f9 f9bb 	bl	8000638 <__aeabi_dmul>
 80072c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072c6:	1124      	asrs	r4, r4, #4
 80072c8:	2300      	movs	r3, #0
 80072ca:	2602      	movs	r6, #2
 80072cc:	2c00      	cmp	r4, #0
 80072ce:	f040 80b2 	bne.w	8007436 <_dtoa_r+0x4fe>
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1d3      	bne.n	800727e <_dtoa_r+0x346>
 80072d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80072d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	f000 80b7 	beq.w	8007450 <_dtoa_r+0x518>
 80072e2:	4b86      	ldr	r3, [pc, #536]	@ (80074fc <_dtoa_r+0x5c4>)
 80072e4:	2200      	movs	r2, #0
 80072e6:	4620      	mov	r0, r4
 80072e8:	4629      	mov	r1, r5
 80072ea:	f7f9 fc17 	bl	8000b1c <__aeabi_dcmplt>
 80072ee:	2800      	cmp	r0, #0
 80072f0:	f000 80ae 	beq.w	8007450 <_dtoa_r+0x518>
 80072f4:	9b07      	ldr	r3, [sp, #28]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	f000 80aa 	beq.w	8007450 <_dtoa_r+0x518>
 80072fc:	9b00      	ldr	r3, [sp, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	dd37      	ble.n	8007372 <_dtoa_r+0x43a>
 8007302:	1e7b      	subs	r3, r7, #1
 8007304:	9304      	str	r3, [sp, #16]
 8007306:	4620      	mov	r0, r4
 8007308:	4b7d      	ldr	r3, [pc, #500]	@ (8007500 <_dtoa_r+0x5c8>)
 800730a:	2200      	movs	r2, #0
 800730c:	4629      	mov	r1, r5
 800730e:	f7f9 f993 	bl	8000638 <__aeabi_dmul>
 8007312:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007316:	9c00      	ldr	r4, [sp, #0]
 8007318:	3601      	adds	r6, #1
 800731a:	4630      	mov	r0, r6
 800731c:	f7f9 f922 	bl	8000564 <__aeabi_i2d>
 8007320:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007324:	f7f9 f988 	bl	8000638 <__aeabi_dmul>
 8007328:	4b76      	ldr	r3, [pc, #472]	@ (8007504 <_dtoa_r+0x5cc>)
 800732a:	2200      	movs	r2, #0
 800732c:	f7f8 ffce 	bl	80002cc <__adddf3>
 8007330:	4605      	mov	r5, r0
 8007332:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007336:	2c00      	cmp	r4, #0
 8007338:	f040 808d 	bne.w	8007456 <_dtoa_r+0x51e>
 800733c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007340:	4b71      	ldr	r3, [pc, #452]	@ (8007508 <_dtoa_r+0x5d0>)
 8007342:	2200      	movs	r2, #0
 8007344:	f7f8 ffc0 	bl	80002c8 <__aeabi_dsub>
 8007348:	4602      	mov	r2, r0
 800734a:	460b      	mov	r3, r1
 800734c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007350:	462a      	mov	r2, r5
 8007352:	4633      	mov	r3, r6
 8007354:	f7f9 fc00 	bl	8000b58 <__aeabi_dcmpgt>
 8007358:	2800      	cmp	r0, #0
 800735a:	f040 828b 	bne.w	8007874 <_dtoa_r+0x93c>
 800735e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007362:	462a      	mov	r2, r5
 8007364:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007368:	f7f9 fbd8 	bl	8000b1c <__aeabi_dcmplt>
 800736c:	2800      	cmp	r0, #0
 800736e:	f040 8128 	bne.w	80075c2 <_dtoa_r+0x68a>
 8007372:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007376:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800737a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800737c:	2b00      	cmp	r3, #0
 800737e:	f2c0 815a 	blt.w	8007636 <_dtoa_r+0x6fe>
 8007382:	2f0e      	cmp	r7, #14
 8007384:	f300 8157 	bgt.w	8007636 <_dtoa_r+0x6fe>
 8007388:	4b5a      	ldr	r3, [pc, #360]	@ (80074f4 <_dtoa_r+0x5bc>)
 800738a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800738e:	ed93 7b00 	vldr	d7, [r3]
 8007392:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007394:	2b00      	cmp	r3, #0
 8007396:	ed8d 7b00 	vstr	d7, [sp]
 800739a:	da03      	bge.n	80073a4 <_dtoa_r+0x46c>
 800739c:	9b07      	ldr	r3, [sp, #28]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f340 8101 	ble.w	80075a6 <_dtoa_r+0x66e>
 80073a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80073a8:	4656      	mov	r6, sl
 80073aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073ae:	4620      	mov	r0, r4
 80073b0:	4629      	mov	r1, r5
 80073b2:	f7f9 fa6b 	bl	800088c <__aeabi_ddiv>
 80073b6:	f7f9 fbef 	bl	8000b98 <__aeabi_d2iz>
 80073ba:	4680      	mov	r8, r0
 80073bc:	f7f9 f8d2 	bl	8000564 <__aeabi_i2d>
 80073c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073c4:	f7f9 f938 	bl	8000638 <__aeabi_dmul>
 80073c8:	4602      	mov	r2, r0
 80073ca:	460b      	mov	r3, r1
 80073cc:	4620      	mov	r0, r4
 80073ce:	4629      	mov	r1, r5
 80073d0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80073d4:	f7f8 ff78 	bl	80002c8 <__aeabi_dsub>
 80073d8:	f806 4b01 	strb.w	r4, [r6], #1
 80073dc:	9d07      	ldr	r5, [sp, #28]
 80073de:	eba6 040a 	sub.w	r4, r6, sl
 80073e2:	42a5      	cmp	r5, r4
 80073e4:	4602      	mov	r2, r0
 80073e6:	460b      	mov	r3, r1
 80073e8:	f040 8117 	bne.w	800761a <_dtoa_r+0x6e2>
 80073ec:	f7f8 ff6e 	bl	80002cc <__adddf3>
 80073f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073f4:	4604      	mov	r4, r0
 80073f6:	460d      	mov	r5, r1
 80073f8:	f7f9 fbae 	bl	8000b58 <__aeabi_dcmpgt>
 80073fc:	2800      	cmp	r0, #0
 80073fe:	f040 80f9 	bne.w	80075f4 <_dtoa_r+0x6bc>
 8007402:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007406:	4620      	mov	r0, r4
 8007408:	4629      	mov	r1, r5
 800740a:	f7f9 fb7d 	bl	8000b08 <__aeabi_dcmpeq>
 800740e:	b118      	cbz	r0, 8007418 <_dtoa_r+0x4e0>
 8007410:	f018 0f01 	tst.w	r8, #1
 8007414:	f040 80ee 	bne.w	80075f4 <_dtoa_r+0x6bc>
 8007418:	4649      	mov	r1, r9
 800741a:	4658      	mov	r0, fp
 800741c:	f000 fc90 	bl	8007d40 <_Bfree>
 8007420:	2300      	movs	r3, #0
 8007422:	7033      	strb	r3, [r6, #0]
 8007424:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007426:	3701      	adds	r7, #1
 8007428:	601f      	str	r7, [r3, #0]
 800742a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800742c:	2b00      	cmp	r3, #0
 800742e:	f000 831d 	beq.w	8007a6c <_dtoa_r+0xb34>
 8007432:	601e      	str	r6, [r3, #0]
 8007434:	e31a      	b.n	8007a6c <_dtoa_r+0xb34>
 8007436:	07e2      	lsls	r2, r4, #31
 8007438:	d505      	bpl.n	8007446 <_dtoa_r+0x50e>
 800743a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800743e:	f7f9 f8fb 	bl	8000638 <__aeabi_dmul>
 8007442:	3601      	adds	r6, #1
 8007444:	2301      	movs	r3, #1
 8007446:	1064      	asrs	r4, r4, #1
 8007448:	3508      	adds	r5, #8
 800744a:	e73f      	b.n	80072cc <_dtoa_r+0x394>
 800744c:	2602      	movs	r6, #2
 800744e:	e742      	b.n	80072d6 <_dtoa_r+0x39e>
 8007450:	9c07      	ldr	r4, [sp, #28]
 8007452:	9704      	str	r7, [sp, #16]
 8007454:	e761      	b.n	800731a <_dtoa_r+0x3e2>
 8007456:	4b27      	ldr	r3, [pc, #156]	@ (80074f4 <_dtoa_r+0x5bc>)
 8007458:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800745a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800745e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007462:	4454      	add	r4, sl
 8007464:	2900      	cmp	r1, #0
 8007466:	d053      	beq.n	8007510 <_dtoa_r+0x5d8>
 8007468:	4928      	ldr	r1, [pc, #160]	@ (800750c <_dtoa_r+0x5d4>)
 800746a:	2000      	movs	r0, #0
 800746c:	f7f9 fa0e 	bl	800088c <__aeabi_ddiv>
 8007470:	4633      	mov	r3, r6
 8007472:	462a      	mov	r2, r5
 8007474:	f7f8 ff28 	bl	80002c8 <__aeabi_dsub>
 8007478:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800747c:	4656      	mov	r6, sl
 800747e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007482:	f7f9 fb89 	bl	8000b98 <__aeabi_d2iz>
 8007486:	4605      	mov	r5, r0
 8007488:	f7f9 f86c 	bl	8000564 <__aeabi_i2d>
 800748c:	4602      	mov	r2, r0
 800748e:	460b      	mov	r3, r1
 8007490:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007494:	f7f8 ff18 	bl	80002c8 <__aeabi_dsub>
 8007498:	3530      	adds	r5, #48	@ 0x30
 800749a:	4602      	mov	r2, r0
 800749c:	460b      	mov	r3, r1
 800749e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80074a2:	f806 5b01 	strb.w	r5, [r6], #1
 80074a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80074aa:	f7f9 fb37 	bl	8000b1c <__aeabi_dcmplt>
 80074ae:	2800      	cmp	r0, #0
 80074b0:	d171      	bne.n	8007596 <_dtoa_r+0x65e>
 80074b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074b6:	4911      	ldr	r1, [pc, #68]	@ (80074fc <_dtoa_r+0x5c4>)
 80074b8:	2000      	movs	r0, #0
 80074ba:	f7f8 ff05 	bl	80002c8 <__aeabi_dsub>
 80074be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80074c2:	f7f9 fb2b 	bl	8000b1c <__aeabi_dcmplt>
 80074c6:	2800      	cmp	r0, #0
 80074c8:	f040 8095 	bne.w	80075f6 <_dtoa_r+0x6be>
 80074cc:	42a6      	cmp	r6, r4
 80074ce:	f43f af50 	beq.w	8007372 <_dtoa_r+0x43a>
 80074d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80074d6:	4b0a      	ldr	r3, [pc, #40]	@ (8007500 <_dtoa_r+0x5c8>)
 80074d8:	2200      	movs	r2, #0
 80074da:	f7f9 f8ad 	bl	8000638 <__aeabi_dmul>
 80074de:	4b08      	ldr	r3, [pc, #32]	@ (8007500 <_dtoa_r+0x5c8>)
 80074e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80074e4:	2200      	movs	r2, #0
 80074e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074ea:	f7f9 f8a5 	bl	8000638 <__aeabi_dmul>
 80074ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074f2:	e7c4      	b.n	800747e <_dtoa_r+0x546>
 80074f4:	0800b6e8 	.word	0x0800b6e8
 80074f8:	0800b6c0 	.word	0x0800b6c0
 80074fc:	3ff00000 	.word	0x3ff00000
 8007500:	40240000 	.word	0x40240000
 8007504:	401c0000 	.word	0x401c0000
 8007508:	40140000 	.word	0x40140000
 800750c:	3fe00000 	.word	0x3fe00000
 8007510:	4631      	mov	r1, r6
 8007512:	4628      	mov	r0, r5
 8007514:	f7f9 f890 	bl	8000638 <__aeabi_dmul>
 8007518:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800751c:	9415      	str	r4, [sp, #84]	@ 0x54
 800751e:	4656      	mov	r6, sl
 8007520:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007524:	f7f9 fb38 	bl	8000b98 <__aeabi_d2iz>
 8007528:	4605      	mov	r5, r0
 800752a:	f7f9 f81b 	bl	8000564 <__aeabi_i2d>
 800752e:	4602      	mov	r2, r0
 8007530:	460b      	mov	r3, r1
 8007532:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007536:	f7f8 fec7 	bl	80002c8 <__aeabi_dsub>
 800753a:	3530      	adds	r5, #48	@ 0x30
 800753c:	f806 5b01 	strb.w	r5, [r6], #1
 8007540:	4602      	mov	r2, r0
 8007542:	460b      	mov	r3, r1
 8007544:	42a6      	cmp	r6, r4
 8007546:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800754a:	f04f 0200 	mov.w	r2, #0
 800754e:	d124      	bne.n	800759a <_dtoa_r+0x662>
 8007550:	4bac      	ldr	r3, [pc, #688]	@ (8007804 <_dtoa_r+0x8cc>)
 8007552:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007556:	f7f8 feb9 	bl	80002cc <__adddf3>
 800755a:	4602      	mov	r2, r0
 800755c:	460b      	mov	r3, r1
 800755e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007562:	f7f9 faf9 	bl	8000b58 <__aeabi_dcmpgt>
 8007566:	2800      	cmp	r0, #0
 8007568:	d145      	bne.n	80075f6 <_dtoa_r+0x6be>
 800756a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800756e:	49a5      	ldr	r1, [pc, #660]	@ (8007804 <_dtoa_r+0x8cc>)
 8007570:	2000      	movs	r0, #0
 8007572:	f7f8 fea9 	bl	80002c8 <__aeabi_dsub>
 8007576:	4602      	mov	r2, r0
 8007578:	460b      	mov	r3, r1
 800757a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800757e:	f7f9 facd 	bl	8000b1c <__aeabi_dcmplt>
 8007582:	2800      	cmp	r0, #0
 8007584:	f43f aef5 	beq.w	8007372 <_dtoa_r+0x43a>
 8007588:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800758a:	1e73      	subs	r3, r6, #1
 800758c:	9315      	str	r3, [sp, #84]	@ 0x54
 800758e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007592:	2b30      	cmp	r3, #48	@ 0x30
 8007594:	d0f8      	beq.n	8007588 <_dtoa_r+0x650>
 8007596:	9f04      	ldr	r7, [sp, #16]
 8007598:	e73e      	b.n	8007418 <_dtoa_r+0x4e0>
 800759a:	4b9b      	ldr	r3, [pc, #620]	@ (8007808 <_dtoa_r+0x8d0>)
 800759c:	f7f9 f84c 	bl	8000638 <__aeabi_dmul>
 80075a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075a4:	e7bc      	b.n	8007520 <_dtoa_r+0x5e8>
 80075a6:	d10c      	bne.n	80075c2 <_dtoa_r+0x68a>
 80075a8:	4b98      	ldr	r3, [pc, #608]	@ (800780c <_dtoa_r+0x8d4>)
 80075aa:	2200      	movs	r2, #0
 80075ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075b0:	f7f9 f842 	bl	8000638 <__aeabi_dmul>
 80075b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075b8:	f7f9 fac4 	bl	8000b44 <__aeabi_dcmpge>
 80075bc:	2800      	cmp	r0, #0
 80075be:	f000 8157 	beq.w	8007870 <_dtoa_r+0x938>
 80075c2:	2400      	movs	r4, #0
 80075c4:	4625      	mov	r5, r4
 80075c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075c8:	43db      	mvns	r3, r3
 80075ca:	9304      	str	r3, [sp, #16]
 80075cc:	4656      	mov	r6, sl
 80075ce:	2700      	movs	r7, #0
 80075d0:	4621      	mov	r1, r4
 80075d2:	4658      	mov	r0, fp
 80075d4:	f000 fbb4 	bl	8007d40 <_Bfree>
 80075d8:	2d00      	cmp	r5, #0
 80075da:	d0dc      	beq.n	8007596 <_dtoa_r+0x65e>
 80075dc:	b12f      	cbz	r7, 80075ea <_dtoa_r+0x6b2>
 80075de:	42af      	cmp	r7, r5
 80075e0:	d003      	beq.n	80075ea <_dtoa_r+0x6b2>
 80075e2:	4639      	mov	r1, r7
 80075e4:	4658      	mov	r0, fp
 80075e6:	f000 fbab 	bl	8007d40 <_Bfree>
 80075ea:	4629      	mov	r1, r5
 80075ec:	4658      	mov	r0, fp
 80075ee:	f000 fba7 	bl	8007d40 <_Bfree>
 80075f2:	e7d0      	b.n	8007596 <_dtoa_r+0x65e>
 80075f4:	9704      	str	r7, [sp, #16]
 80075f6:	4633      	mov	r3, r6
 80075f8:	461e      	mov	r6, r3
 80075fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075fe:	2a39      	cmp	r2, #57	@ 0x39
 8007600:	d107      	bne.n	8007612 <_dtoa_r+0x6da>
 8007602:	459a      	cmp	sl, r3
 8007604:	d1f8      	bne.n	80075f8 <_dtoa_r+0x6c0>
 8007606:	9a04      	ldr	r2, [sp, #16]
 8007608:	3201      	adds	r2, #1
 800760a:	9204      	str	r2, [sp, #16]
 800760c:	2230      	movs	r2, #48	@ 0x30
 800760e:	f88a 2000 	strb.w	r2, [sl]
 8007612:	781a      	ldrb	r2, [r3, #0]
 8007614:	3201      	adds	r2, #1
 8007616:	701a      	strb	r2, [r3, #0]
 8007618:	e7bd      	b.n	8007596 <_dtoa_r+0x65e>
 800761a:	4b7b      	ldr	r3, [pc, #492]	@ (8007808 <_dtoa_r+0x8d0>)
 800761c:	2200      	movs	r2, #0
 800761e:	f7f9 f80b 	bl	8000638 <__aeabi_dmul>
 8007622:	2200      	movs	r2, #0
 8007624:	2300      	movs	r3, #0
 8007626:	4604      	mov	r4, r0
 8007628:	460d      	mov	r5, r1
 800762a:	f7f9 fa6d 	bl	8000b08 <__aeabi_dcmpeq>
 800762e:	2800      	cmp	r0, #0
 8007630:	f43f aebb 	beq.w	80073aa <_dtoa_r+0x472>
 8007634:	e6f0      	b.n	8007418 <_dtoa_r+0x4e0>
 8007636:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007638:	2a00      	cmp	r2, #0
 800763a:	f000 80db 	beq.w	80077f4 <_dtoa_r+0x8bc>
 800763e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007640:	2a01      	cmp	r2, #1
 8007642:	f300 80bf 	bgt.w	80077c4 <_dtoa_r+0x88c>
 8007646:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007648:	2a00      	cmp	r2, #0
 800764a:	f000 80b7 	beq.w	80077bc <_dtoa_r+0x884>
 800764e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007652:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007654:	4646      	mov	r6, r8
 8007656:	9a08      	ldr	r2, [sp, #32]
 8007658:	2101      	movs	r1, #1
 800765a:	441a      	add	r2, r3
 800765c:	4658      	mov	r0, fp
 800765e:	4498      	add	r8, r3
 8007660:	9208      	str	r2, [sp, #32]
 8007662:	f000 fc6b 	bl	8007f3c <__i2b>
 8007666:	4605      	mov	r5, r0
 8007668:	b15e      	cbz	r6, 8007682 <_dtoa_r+0x74a>
 800766a:	9b08      	ldr	r3, [sp, #32]
 800766c:	2b00      	cmp	r3, #0
 800766e:	dd08      	ble.n	8007682 <_dtoa_r+0x74a>
 8007670:	42b3      	cmp	r3, r6
 8007672:	9a08      	ldr	r2, [sp, #32]
 8007674:	bfa8      	it	ge
 8007676:	4633      	movge	r3, r6
 8007678:	eba8 0803 	sub.w	r8, r8, r3
 800767c:	1af6      	subs	r6, r6, r3
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	9308      	str	r3, [sp, #32]
 8007682:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007684:	b1f3      	cbz	r3, 80076c4 <_dtoa_r+0x78c>
 8007686:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 80b7 	beq.w	80077fc <_dtoa_r+0x8c4>
 800768e:	b18c      	cbz	r4, 80076b4 <_dtoa_r+0x77c>
 8007690:	4629      	mov	r1, r5
 8007692:	4622      	mov	r2, r4
 8007694:	4658      	mov	r0, fp
 8007696:	f000 fd11 	bl	80080bc <__pow5mult>
 800769a:	464a      	mov	r2, r9
 800769c:	4601      	mov	r1, r0
 800769e:	4605      	mov	r5, r0
 80076a0:	4658      	mov	r0, fp
 80076a2:	f000 fc61 	bl	8007f68 <__multiply>
 80076a6:	4649      	mov	r1, r9
 80076a8:	9004      	str	r0, [sp, #16]
 80076aa:	4658      	mov	r0, fp
 80076ac:	f000 fb48 	bl	8007d40 <_Bfree>
 80076b0:	9b04      	ldr	r3, [sp, #16]
 80076b2:	4699      	mov	r9, r3
 80076b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076b6:	1b1a      	subs	r2, r3, r4
 80076b8:	d004      	beq.n	80076c4 <_dtoa_r+0x78c>
 80076ba:	4649      	mov	r1, r9
 80076bc:	4658      	mov	r0, fp
 80076be:	f000 fcfd 	bl	80080bc <__pow5mult>
 80076c2:	4681      	mov	r9, r0
 80076c4:	2101      	movs	r1, #1
 80076c6:	4658      	mov	r0, fp
 80076c8:	f000 fc38 	bl	8007f3c <__i2b>
 80076cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076ce:	4604      	mov	r4, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f000 81cf 	beq.w	8007a74 <_dtoa_r+0xb3c>
 80076d6:	461a      	mov	r2, r3
 80076d8:	4601      	mov	r1, r0
 80076da:	4658      	mov	r0, fp
 80076dc:	f000 fcee 	bl	80080bc <__pow5mult>
 80076e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	4604      	mov	r4, r0
 80076e6:	f300 8095 	bgt.w	8007814 <_dtoa_r+0x8dc>
 80076ea:	9b02      	ldr	r3, [sp, #8]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f040 8087 	bne.w	8007800 <_dtoa_r+0x8c8>
 80076f2:	9b03      	ldr	r3, [sp, #12]
 80076f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f040 8089 	bne.w	8007810 <_dtoa_r+0x8d8>
 80076fe:	9b03      	ldr	r3, [sp, #12]
 8007700:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007704:	0d1b      	lsrs	r3, r3, #20
 8007706:	051b      	lsls	r3, r3, #20
 8007708:	b12b      	cbz	r3, 8007716 <_dtoa_r+0x7de>
 800770a:	9b08      	ldr	r3, [sp, #32]
 800770c:	3301      	adds	r3, #1
 800770e:	9308      	str	r3, [sp, #32]
 8007710:	f108 0801 	add.w	r8, r8, #1
 8007714:	2301      	movs	r3, #1
 8007716:	930a      	str	r3, [sp, #40]	@ 0x28
 8007718:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800771a:	2b00      	cmp	r3, #0
 800771c:	f000 81b0 	beq.w	8007a80 <_dtoa_r+0xb48>
 8007720:	6923      	ldr	r3, [r4, #16]
 8007722:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007726:	6918      	ldr	r0, [r3, #16]
 8007728:	f000 fbbc 	bl	8007ea4 <__hi0bits>
 800772c:	f1c0 0020 	rsb	r0, r0, #32
 8007730:	9b08      	ldr	r3, [sp, #32]
 8007732:	4418      	add	r0, r3
 8007734:	f010 001f 	ands.w	r0, r0, #31
 8007738:	d077      	beq.n	800782a <_dtoa_r+0x8f2>
 800773a:	f1c0 0320 	rsb	r3, r0, #32
 800773e:	2b04      	cmp	r3, #4
 8007740:	dd6b      	ble.n	800781a <_dtoa_r+0x8e2>
 8007742:	9b08      	ldr	r3, [sp, #32]
 8007744:	f1c0 001c 	rsb	r0, r0, #28
 8007748:	4403      	add	r3, r0
 800774a:	4480      	add	r8, r0
 800774c:	4406      	add	r6, r0
 800774e:	9308      	str	r3, [sp, #32]
 8007750:	f1b8 0f00 	cmp.w	r8, #0
 8007754:	dd05      	ble.n	8007762 <_dtoa_r+0x82a>
 8007756:	4649      	mov	r1, r9
 8007758:	4642      	mov	r2, r8
 800775a:	4658      	mov	r0, fp
 800775c:	f000 fd08 	bl	8008170 <__lshift>
 8007760:	4681      	mov	r9, r0
 8007762:	9b08      	ldr	r3, [sp, #32]
 8007764:	2b00      	cmp	r3, #0
 8007766:	dd05      	ble.n	8007774 <_dtoa_r+0x83c>
 8007768:	4621      	mov	r1, r4
 800776a:	461a      	mov	r2, r3
 800776c:	4658      	mov	r0, fp
 800776e:	f000 fcff 	bl	8008170 <__lshift>
 8007772:	4604      	mov	r4, r0
 8007774:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007776:	2b00      	cmp	r3, #0
 8007778:	d059      	beq.n	800782e <_dtoa_r+0x8f6>
 800777a:	4621      	mov	r1, r4
 800777c:	4648      	mov	r0, r9
 800777e:	f000 fd63 	bl	8008248 <__mcmp>
 8007782:	2800      	cmp	r0, #0
 8007784:	da53      	bge.n	800782e <_dtoa_r+0x8f6>
 8007786:	1e7b      	subs	r3, r7, #1
 8007788:	9304      	str	r3, [sp, #16]
 800778a:	4649      	mov	r1, r9
 800778c:	2300      	movs	r3, #0
 800778e:	220a      	movs	r2, #10
 8007790:	4658      	mov	r0, fp
 8007792:	f000 faf7 	bl	8007d84 <__multadd>
 8007796:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007798:	4681      	mov	r9, r0
 800779a:	2b00      	cmp	r3, #0
 800779c:	f000 8172 	beq.w	8007a84 <_dtoa_r+0xb4c>
 80077a0:	2300      	movs	r3, #0
 80077a2:	4629      	mov	r1, r5
 80077a4:	220a      	movs	r2, #10
 80077a6:	4658      	mov	r0, fp
 80077a8:	f000 faec 	bl	8007d84 <__multadd>
 80077ac:	9b00      	ldr	r3, [sp, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	4605      	mov	r5, r0
 80077b2:	dc67      	bgt.n	8007884 <_dtoa_r+0x94c>
 80077b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	dc41      	bgt.n	800783e <_dtoa_r+0x906>
 80077ba:	e063      	b.n	8007884 <_dtoa_r+0x94c>
 80077bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80077be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80077c2:	e746      	b.n	8007652 <_dtoa_r+0x71a>
 80077c4:	9b07      	ldr	r3, [sp, #28]
 80077c6:	1e5c      	subs	r4, r3, #1
 80077c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077ca:	42a3      	cmp	r3, r4
 80077cc:	bfbf      	itttt	lt
 80077ce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80077d0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80077d2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80077d4:	1ae3      	sublt	r3, r4, r3
 80077d6:	bfb4      	ite	lt
 80077d8:	18d2      	addlt	r2, r2, r3
 80077da:	1b1c      	subge	r4, r3, r4
 80077dc:	9b07      	ldr	r3, [sp, #28]
 80077de:	bfbc      	itt	lt
 80077e0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80077e2:	2400      	movlt	r4, #0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	bfb5      	itete	lt
 80077e8:	eba8 0603 	sublt.w	r6, r8, r3
 80077ec:	9b07      	ldrge	r3, [sp, #28]
 80077ee:	2300      	movlt	r3, #0
 80077f0:	4646      	movge	r6, r8
 80077f2:	e730      	b.n	8007656 <_dtoa_r+0x71e>
 80077f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80077f6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80077f8:	4646      	mov	r6, r8
 80077fa:	e735      	b.n	8007668 <_dtoa_r+0x730>
 80077fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80077fe:	e75c      	b.n	80076ba <_dtoa_r+0x782>
 8007800:	2300      	movs	r3, #0
 8007802:	e788      	b.n	8007716 <_dtoa_r+0x7de>
 8007804:	3fe00000 	.word	0x3fe00000
 8007808:	40240000 	.word	0x40240000
 800780c:	40140000 	.word	0x40140000
 8007810:	9b02      	ldr	r3, [sp, #8]
 8007812:	e780      	b.n	8007716 <_dtoa_r+0x7de>
 8007814:	2300      	movs	r3, #0
 8007816:	930a      	str	r3, [sp, #40]	@ 0x28
 8007818:	e782      	b.n	8007720 <_dtoa_r+0x7e8>
 800781a:	d099      	beq.n	8007750 <_dtoa_r+0x818>
 800781c:	9a08      	ldr	r2, [sp, #32]
 800781e:	331c      	adds	r3, #28
 8007820:	441a      	add	r2, r3
 8007822:	4498      	add	r8, r3
 8007824:	441e      	add	r6, r3
 8007826:	9208      	str	r2, [sp, #32]
 8007828:	e792      	b.n	8007750 <_dtoa_r+0x818>
 800782a:	4603      	mov	r3, r0
 800782c:	e7f6      	b.n	800781c <_dtoa_r+0x8e4>
 800782e:	9b07      	ldr	r3, [sp, #28]
 8007830:	9704      	str	r7, [sp, #16]
 8007832:	2b00      	cmp	r3, #0
 8007834:	dc20      	bgt.n	8007878 <_dtoa_r+0x940>
 8007836:	9300      	str	r3, [sp, #0]
 8007838:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800783a:	2b02      	cmp	r3, #2
 800783c:	dd1e      	ble.n	800787c <_dtoa_r+0x944>
 800783e:	9b00      	ldr	r3, [sp, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	f47f aec0 	bne.w	80075c6 <_dtoa_r+0x68e>
 8007846:	4621      	mov	r1, r4
 8007848:	2205      	movs	r2, #5
 800784a:	4658      	mov	r0, fp
 800784c:	f000 fa9a 	bl	8007d84 <__multadd>
 8007850:	4601      	mov	r1, r0
 8007852:	4604      	mov	r4, r0
 8007854:	4648      	mov	r0, r9
 8007856:	f000 fcf7 	bl	8008248 <__mcmp>
 800785a:	2800      	cmp	r0, #0
 800785c:	f77f aeb3 	ble.w	80075c6 <_dtoa_r+0x68e>
 8007860:	4656      	mov	r6, sl
 8007862:	2331      	movs	r3, #49	@ 0x31
 8007864:	f806 3b01 	strb.w	r3, [r6], #1
 8007868:	9b04      	ldr	r3, [sp, #16]
 800786a:	3301      	adds	r3, #1
 800786c:	9304      	str	r3, [sp, #16]
 800786e:	e6ae      	b.n	80075ce <_dtoa_r+0x696>
 8007870:	9c07      	ldr	r4, [sp, #28]
 8007872:	9704      	str	r7, [sp, #16]
 8007874:	4625      	mov	r5, r4
 8007876:	e7f3      	b.n	8007860 <_dtoa_r+0x928>
 8007878:	9b07      	ldr	r3, [sp, #28]
 800787a:	9300      	str	r3, [sp, #0]
 800787c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800787e:	2b00      	cmp	r3, #0
 8007880:	f000 8104 	beq.w	8007a8c <_dtoa_r+0xb54>
 8007884:	2e00      	cmp	r6, #0
 8007886:	dd05      	ble.n	8007894 <_dtoa_r+0x95c>
 8007888:	4629      	mov	r1, r5
 800788a:	4632      	mov	r2, r6
 800788c:	4658      	mov	r0, fp
 800788e:	f000 fc6f 	bl	8008170 <__lshift>
 8007892:	4605      	mov	r5, r0
 8007894:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007896:	2b00      	cmp	r3, #0
 8007898:	d05a      	beq.n	8007950 <_dtoa_r+0xa18>
 800789a:	6869      	ldr	r1, [r5, #4]
 800789c:	4658      	mov	r0, fp
 800789e:	f000 fa0f 	bl	8007cc0 <_Balloc>
 80078a2:	4606      	mov	r6, r0
 80078a4:	b928      	cbnz	r0, 80078b2 <_dtoa_r+0x97a>
 80078a6:	4b84      	ldr	r3, [pc, #528]	@ (8007ab8 <_dtoa_r+0xb80>)
 80078a8:	4602      	mov	r2, r0
 80078aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80078ae:	f7ff bb5a 	b.w	8006f66 <_dtoa_r+0x2e>
 80078b2:	692a      	ldr	r2, [r5, #16]
 80078b4:	3202      	adds	r2, #2
 80078b6:	0092      	lsls	r2, r2, #2
 80078b8:	f105 010c 	add.w	r1, r5, #12
 80078bc:	300c      	adds	r0, #12
 80078be:	f002 f94b 	bl	8009b58 <memcpy>
 80078c2:	2201      	movs	r2, #1
 80078c4:	4631      	mov	r1, r6
 80078c6:	4658      	mov	r0, fp
 80078c8:	f000 fc52 	bl	8008170 <__lshift>
 80078cc:	f10a 0301 	add.w	r3, sl, #1
 80078d0:	9307      	str	r3, [sp, #28]
 80078d2:	9b00      	ldr	r3, [sp, #0]
 80078d4:	4453      	add	r3, sl
 80078d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078d8:	9b02      	ldr	r3, [sp, #8]
 80078da:	f003 0301 	and.w	r3, r3, #1
 80078de:	462f      	mov	r7, r5
 80078e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80078e2:	4605      	mov	r5, r0
 80078e4:	9b07      	ldr	r3, [sp, #28]
 80078e6:	4621      	mov	r1, r4
 80078e8:	3b01      	subs	r3, #1
 80078ea:	4648      	mov	r0, r9
 80078ec:	9300      	str	r3, [sp, #0]
 80078ee:	f7ff fa99 	bl	8006e24 <quorem>
 80078f2:	4639      	mov	r1, r7
 80078f4:	9002      	str	r0, [sp, #8]
 80078f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80078fa:	4648      	mov	r0, r9
 80078fc:	f000 fca4 	bl	8008248 <__mcmp>
 8007900:	462a      	mov	r2, r5
 8007902:	9008      	str	r0, [sp, #32]
 8007904:	4621      	mov	r1, r4
 8007906:	4658      	mov	r0, fp
 8007908:	f000 fcba 	bl	8008280 <__mdiff>
 800790c:	68c2      	ldr	r2, [r0, #12]
 800790e:	4606      	mov	r6, r0
 8007910:	bb02      	cbnz	r2, 8007954 <_dtoa_r+0xa1c>
 8007912:	4601      	mov	r1, r0
 8007914:	4648      	mov	r0, r9
 8007916:	f000 fc97 	bl	8008248 <__mcmp>
 800791a:	4602      	mov	r2, r0
 800791c:	4631      	mov	r1, r6
 800791e:	4658      	mov	r0, fp
 8007920:	920e      	str	r2, [sp, #56]	@ 0x38
 8007922:	f000 fa0d 	bl	8007d40 <_Bfree>
 8007926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007928:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800792a:	9e07      	ldr	r6, [sp, #28]
 800792c:	ea43 0102 	orr.w	r1, r3, r2
 8007930:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007932:	4319      	orrs	r1, r3
 8007934:	d110      	bne.n	8007958 <_dtoa_r+0xa20>
 8007936:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800793a:	d029      	beq.n	8007990 <_dtoa_r+0xa58>
 800793c:	9b08      	ldr	r3, [sp, #32]
 800793e:	2b00      	cmp	r3, #0
 8007940:	dd02      	ble.n	8007948 <_dtoa_r+0xa10>
 8007942:	9b02      	ldr	r3, [sp, #8]
 8007944:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007948:	9b00      	ldr	r3, [sp, #0]
 800794a:	f883 8000 	strb.w	r8, [r3]
 800794e:	e63f      	b.n	80075d0 <_dtoa_r+0x698>
 8007950:	4628      	mov	r0, r5
 8007952:	e7bb      	b.n	80078cc <_dtoa_r+0x994>
 8007954:	2201      	movs	r2, #1
 8007956:	e7e1      	b.n	800791c <_dtoa_r+0x9e4>
 8007958:	9b08      	ldr	r3, [sp, #32]
 800795a:	2b00      	cmp	r3, #0
 800795c:	db04      	blt.n	8007968 <_dtoa_r+0xa30>
 800795e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007960:	430b      	orrs	r3, r1
 8007962:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007964:	430b      	orrs	r3, r1
 8007966:	d120      	bne.n	80079aa <_dtoa_r+0xa72>
 8007968:	2a00      	cmp	r2, #0
 800796a:	dded      	ble.n	8007948 <_dtoa_r+0xa10>
 800796c:	4649      	mov	r1, r9
 800796e:	2201      	movs	r2, #1
 8007970:	4658      	mov	r0, fp
 8007972:	f000 fbfd 	bl	8008170 <__lshift>
 8007976:	4621      	mov	r1, r4
 8007978:	4681      	mov	r9, r0
 800797a:	f000 fc65 	bl	8008248 <__mcmp>
 800797e:	2800      	cmp	r0, #0
 8007980:	dc03      	bgt.n	800798a <_dtoa_r+0xa52>
 8007982:	d1e1      	bne.n	8007948 <_dtoa_r+0xa10>
 8007984:	f018 0f01 	tst.w	r8, #1
 8007988:	d0de      	beq.n	8007948 <_dtoa_r+0xa10>
 800798a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800798e:	d1d8      	bne.n	8007942 <_dtoa_r+0xa0a>
 8007990:	9a00      	ldr	r2, [sp, #0]
 8007992:	2339      	movs	r3, #57	@ 0x39
 8007994:	7013      	strb	r3, [r2, #0]
 8007996:	4633      	mov	r3, r6
 8007998:	461e      	mov	r6, r3
 800799a:	3b01      	subs	r3, #1
 800799c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80079a0:	2a39      	cmp	r2, #57	@ 0x39
 80079a2:	d052      	beq.n	8007a4a <_dtoa_r+0xb12>
 80079a4:	3201      	adds	r2, #1
 80079a6:	701a      	strb	r2, [r3, #0]
 80079a8:	e612      	b.n	80075d0 <_dtoa_r+0x698>
 80079aa:	2a00      	cmp	r2, #0
 80079ac:	dd07      	ble.n	80079be <_dtoa_r+0xa86>
 80079ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80079b2:	d0ed      	beq.n	8007990 <_dtoa_r+0xa58>
 80079b4:	9a00      	ldr	r2, [sp, #0]
 80079b6:	f108 0301 	add.w	r3, r8, #1
 80079ba:	7013      	strb	r3, [r2, #0]
 80079bc:	e608      	b.n	80075d0 <_dtoa_r+0x698>
 80079be:	9b07      	ldr	r3, [sp, #28]
 80079c0:	9a07      	ldr	r2, [sp, #28]
 80079c2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80079c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d028      	beq.n	8007a1e <_dtoa_r+0xae6>
 80079cc:	4649      	mov	r1, r9
 80079ce:	2300      	movs	r3, #0
 80079d0:	220a      	movs	r2, #10
 80079d2:	4658      	mov	r0, fp
 80079d4:	f000 f9d6 	bl	8007d84 <__multadd>
 80079d8:	42af      	cmp	r7, r5
 80079da:	4681      	mov	r9, r0
 80079dc:	f04f 0300 	mov.w	r3, #0
 80079e0:	f04f 020a 	mov.w	r2, #10
 80079e4:	4639      	mov	r1, r7
 80079e6:	4658      	mov	r0, fp
 80079e8:	d107      	bne.n	80079fa <_dtoa_r+0xac2>
 80079ea:	f000 f9cb 	bl	8007d84 <__multadd>
 80079ee:	4607      	mov	r7, r0
 80079f0:	4605      	mov	r5, r0
 80079f2:	9b07      	ldr	r3, [sp, #28]
 80079f4:	3301      	adds	r3, #1
 80079f6:	9307      	str	r3, [sp, #28]
 80079f8:	e774      	b.n	80078e4 <_dtoa_r+0x9ac>
 80079fa:	f000 f9c3 	bl	8007d84 <__multadd>
 80079fe:	4629      	mov	r1, r5
 8007a00:	4607      	mov	r7, r0
 8007a02:	2300      	movs	r3, #0
 8007a04:	220a      	movs	r2, #10
 8007a06:	4658      	mov	r0, fp
 8007a08:	f000 f9bc 	bl	8007d84 <__multadd>
 8007a0c:	4605      	mov	r5, r0
 8007a0e:	e7f0      	b.n	80079f2 <_dtoa_r+0xaba>
 8007a10:	9b00      	ldr	r3, [sp, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	bfcc      	ite	gt
 8007a16:	461e      	movgt	r6, r3
 8007a18:	2601      	movle	r6, #1
 8007a1a:	4456      	add	r6, sl
 8007a1c:	2700      	movs	r7, #0
 8007a1e:	4649      	mov	r1, r9
 8007a20:	2201      	movs	r2, #1
 8007a22:	4658      	mov	r0, fp
 8007a24:	f000 fba4 	bl	8008170 <__lshift>
 8007a28:	4621      	mov	r1, r4
 8007a2a:	4681      	mov	r9, r0
 8007a2c:	f000 fc0c 	bl	8008248 <__mcmp>
 8007a30:	2800      	cmp	r0, #0
 8007a32:	dcb0      	bgt.n	8007996 <_dtoa_r+0xa5e>
 8007a34:	d102      	bne.n	8007a3c <_dtoa_r+0xb04>
 8007a36:	f018 0f01 	tst.w	r8, #1
 8007a3a:	d1ac      	bne.n	8007996 <_dtoa_r+0xa5e>
 8007a3c:	4633      	mov	r3, r6
 8007a3e:	461e      	mov	r6, r3
 8007a40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a44:	2a30      	cmp	r2, #48	@ 0x30
 8007a46:	d0fa      	beq.n	8007a3e <_dtoa_r+0xb06>
 8007a48:	e5c2      	b.n	80075d0 <_dtoa_r+0x698>
 8007a4a:	459a      	cmp	sl, r3
 8007a4c:	d1a4      	bne.n	8007998 <_dtoa_r+0xa60>
 8007a4e:	9b04      	ldr	r3, [sp, #16]
 8007a50:	3301      	adds	r3, #1
 8007a52:	9304      	str	r3, [sp, #16]
 8007a54:	2331      	movs	r3, #49	@ 0x31
 8007a56:	f88a 3000 	strb.w	r3, [sl]
 8007a5a:	e5b9      	b.n	80075d0 <_dtoa_r+0x698>
 8007a5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007a5e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007abc <_dtoa_r+0xb84>
 8007a62:	b11b      	cbz	r3, 8007a6c <_dtoa_r+0xb34>
 8007a64:	f10a 0308 	add.w	r3, sl, #8
 8007a68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007a6a:	6013      	str	r3, [r2, #0]
 8007a6c:	4650      	mov	r0, sl
 8007a6e:	b019      	add	sp, #100	@ 0x64
 8007a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	f77f ae37 	ble.w	80076ea <_dtoa_r+0x7b2>
 8007a7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a80:	2001      	movs	r0, #1
 8007a82:	e655      	b.n	8007730 <_dtoa_r+0x7f8>
 8007a84:	9b00      	ldr	r3, [sp, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	f77f aed6 	ble.w	8007838 <_dtoa_r+0x900>
 8007a8c:	4656      	mov	r6, sl
 8007a8e:	4621      	mov	r1, r4
 8007a90:	4648      	mov	r0, r9
 8007a92:	f7ff f9c7 	bl	8006e24 <quorem>
 8007a96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007a9a:	f806 8b01 	strb.w	r8, [r6], #1
 8007a9e:	9b00      	ldr	r3, [sp, #0]
 8007aa0:	eba6 020a 	sub.w	r2, r6, sl
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	ddb3      	ble.n	8007a10 <_dtoa_r+0xad8>
 8007aa8:	4649      	mov	r1, r9
 8007aaa:	2300      	movs	r3, #0
 8007aac:	220a      	movs	r2, #10
 8007aae:	4658      	mov	r0, fp
 8007ab0:	f000 f968 	bl	8007d84 <__multadd>
 8007ab4:	4681      	mov	r9, r0
 8007ab6:	e7ea      	b.n	8007a8e <_dtoa_r+0xb56>
 8007ab8:	0800b649 	.word	0x0800b649
 8007abc:	0800b5cd 	.word	0x0800b5cd

08007ac0 <_free_r>:
 8007ac0:	b538      	push	{r3, r4, r5, lr}
 8007ac2:	4605      	mov	r5, r0
 8007ac4:	2900      	cmp	r1, #0
 8007ac6:	d041      	beq.n	8007b4c <_free_r+0x8c>
 8007ac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007acc:	1f0c      	subs	r4, r1, #4
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	bfb8      	it	lt
 8007ad2:	18e4      	addlt	r4, r4, r3
 8007ad4:	f000 f8e8 	bl	8007ca8 <__malloc_lock>
 8007ad8:	4a1d      	ldr	r2, [pc, #116]	@ (8007b50 <_free_r+0x90>)
 8007ada:	6813      	ldr	r3, [r2, #0]
 8007adc:	b933      	cbnz	r3, 8007aec <_free_r+0x2c>
 8007ade:	6063      	str	r3, [r4, #4]
 8007ae0:	6014      	str	r4, [r2, #0]
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ae8:	f000 b8e4 	b.w	8007cb4 <__malloc_unlock>
 8007aec:	42a3      	cmp	r3, r4
 8007aee:	d908      	bls.n	8007b02 <_free_r+0x42>
 8007af0:	6820      	ldr	r0, [r4, #0]
 8007af2:	1821      	adds	r1, r4, r0
 8007af4:	428b      	cmp	r3, r1
 8007af6:	bf01      	itttt	eq
 8007af8:	6819      	ldreq	r1, [r3, #0]
 8007afa:	685b      	ldreq	r3, [r3, #4]
 8007afc:	1809      	addeq	r1, r1, r0
 8007afe:	6021      	streq	r1, [r4, #0]
 8007b00:	e7ed      	b.n	8007ade <_free_r+0x1e>
 8007b02:	461a      	mov	r2, r3
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	b10b      	cbz	r3, 8007b0c <_free_r+0x4c>
 8007b08:	42a3      	cmp	r3, r4
 8007b0a:	d9fa      	bls.n	8007b02 <_free_r+0x42>
 8007b0c:	6811      	ldr	r1, [r2, #0]
 8007b0e:	1850      	adds	r0, r2, r1
 8007b10:	42a0      	cmp	r0, r4
 8007b12:	d10b      	bne.n	8007b2c <_free_r+0x6c>
 8007b14:	6820      	ldr	r0, [r4, #0]
 8007b16:	4401      	add	r1, r0
 8007b18:	1850      	adds	r0, r2, r1
 8007b1a:	4283      	cmp	r3, r0
 8007b1c:	6011      	str	r1, [r2, #0]
 8007b1e:	d1e0      	bne.n	8007ae2 <_free_r+0x22>
 8007b20:	6818      	ldr	r0, [r3, #0]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	6053      	str	r3, [r2, #4]
 8007b26:	4408      	add	r0, r1
 8007b28:	6010      	str	r0, [r2, #0]
 8007b2a:	e7da      	b.n	8007ae2 <_free_r+0x22>
 8007b2c:	d902      	bls.n	8007b34 <_free_r+0x74>
 8007b2e:	230c      	movs	r3, #12
 8007b30:	602b      	str	r3, [r5, #0]
 8007b32:	e7d6      	b.n	8007ae2 <_free_r+0x22>
 8007b34:	6820      	ldr	r0, [r4, #0]
 8007b36:	1821      	adds	r1, r4, r0
 8007b38:	428b      	cmp	r3, r1
 8007b3a:	bf04      	itt	eq
 8007b3c:	6819      	ldreq	r1, [r3, #0]
 8007b3e:	685b      	ldreq	r3, [r3, #4]
 8007b40:	6063      	str	r3, [r4, #4]
 8007b42:	bf04      	itt	eq
 8007b44:	1809      	addeq	r1, r1, r0
 8007b46:	6021      	streq	r1, [r4, #0]
 8007b48:	6054      	str	r4, [r2, #4]
 8007b4a:	e7ca      	b.n	8007ae2 <_free_r+0x22>
 8007b4c:	bd38      	pop	{r3, r4, r5, pc}
 8007b4e:	bf00      	nop
 8007b50:	20000530 	.word	0x20000530

08007b54 <malloc>:
 8007b54:	4b02      	ldr	r3, [pc, #8]	@ (8007b60 <malloc+0xc>)
 8007b56:	4601      	mov	r1, r0
 8007b58:	6818      	ldr	r0, [r3, #0]
 8007b5a:	f000 b825 	b.w	8007ba8 <_malloc_r>
 8007b5e:	bf00      	nop
 8007b60:	20000018 	.word	0x20000018

08007b64 <sbrk_aligned>:
 8007b64:	b570      	push	{r4, r5, r6, lr}
 8007b66:	4e0f      	ldr	r6, [pc, #60]	@ (8007ba4 <sbrk_aligned+0x40>)
 8007b68:	460c      	mov	r4, r1
 8007b6a:	6831      	ldr	r1, [r6, #0]
 8007b6c:	4605      	mov	r5, r0
 8007b6e:	b911      	cbnz	r1, 8007b76 <sbrk_aligned+0x12>
 8007b70:	f001 ffe2 	bl	8009b38 <_sbrk_r>
 8007b74:	6030      	str	r0, [r6, #0]
 8007b76:	4621      	mov	r1, r4
 8007b78:	4628      	mov	r0, r5
 8007b7a:	f001 ffdd 	bl	8009b38 <_sbrk_r>
 8007b7e:	1c43      	adds	r3, r0, #1
 8007b80:	d103      	bne.n	8007b8a <sbrk_aligned+0x26>
 8007b82:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007b86:	4620      	mov	r0, r4
 8007b88:	bd70      	pop	{r4, r5, r6, pc}
 8007b8a:	1cc4      	adds	r4, r0, #3
 8007b8c:	f024 0403 	bic.w	r4, r4, #3
 8007b90:	42a0      	cmp	r0, r4
 8007b92:	d0f8      	beq.n	8007b86 <sbrk_aligned+0x22>
 8007b94:	1a21      	subs	r1, r4, r0
 8007b96:	4628      	mov	r0, r5
 8007b98:	f001 ffce 	bl	8009b38 <_sbrk_r>
 8007b9c:	3001      	adds	r0, #1
 8007b9e:	d1f2      	bne.n	8007b86 <sbrk_aligned+0x22>
 8007ba0:	e7ef      	b.n	8007b82 <sbrk_aligned+0x1e>
 8007ba2:	bf00      	nop
 8007ba4:	2000052c 	.word	0x2000052c

08007ba8 <_malloc_r>:
 8007ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bac:	1ccd      	adds	r5, r1, #3
 8007bae:	f025 0503 	bic.w	r5, r5, #3
 8007bb2:	3508      	adds	r5, #8
 8007bb4:	2d0c      	cmp	r5, #12
 8007bb6:	bf38      	it	cc
 8007bb8:	250c      	movcc	r5, #12
 8007bba:	2d00      	cmp	r5, #0
 8007bbc:	4606      	mov	r6, r0
 8007bbe:	db01      	blt.n	8007bc4 <_malloc_r+0x1c>
 8007bc0:	42a9      	cmp	r1, r5
 8007bc2:	d904      	bls.n	8007bce <_malloc_r+0x26>
 8007bc4:	230c      	movs	r3, #12
 8007bc6:	6033      	str	r3, [r6, #0]
 8007bc8:	2000      	movs	r0, #0
 8007bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ca4 <_malloc_r+0xfc>
 8007bd2:	f000 f869 	bl	8007ca8 <__malloc_lock>
 8007bd6:	f8d8 3000 	ldr.w	r3, [r8]
 8007bda:	461c      	mov	r4, r3
 8007bdc:	bb44      	cbnz	r4, 8007c30 <_malloc_r+0x88>
 8007bde:	4629      	mov	r1, r5
 8007be0:	4630      	mov	r0, r6
 8007be2:	f7ff ffbf 	bl	8007b64 <sbrk_aligned>
 8007be6:	1c43      	adds	r3, r0, #1
 8007be8:	4604      	mov	r4, r0
 8007bea:	d158      	bne.n	8007c9e <_malloc_r+0xf6>
 8007bec:	f8d8 4000 	ldr.w	r4, [r8]
 8007bf0:	4627      	mov	r7, r4
 8007bf2:	2f00      	cmp	r7, #0
 8007bf4:	d143      	bne.n	8007c7e <_malloc_r+0xd6>
 8007bf6:	2c00      	cmp	r4, #0
 8007bf8:	d04b      	beq.n	8007c92 <_malloc_r+0xea>
 8007bfa:	6823      	ldr	r3, [r4, #0]
 8007bfc:	4639      	mov	r1, r7
 8007bfe:	4630      	mov	r0, r6
 8007c00:	eb04 0903 	add.w	r9, r4, r3
 8007c04:	f001 ff98 	bl	8009b38 <_sbrk_r>
 8007c08:	4581      	cmp	r9, r0
 8007c0a:	d142      	bne.n	8007c92 <_malloc_r+0xea>
 8007c0c:	6821      	ldr	r1, [r4, #0]
 8007c0e:	1a6d      	subs	r5, r5, r1
 8007c10:	4629      	mov	r1, r5
 8007c12:	4630      	mov	r0, r6
 8007c14:	f7ff ffa6 	bl	8007b64 <sbrk_aligned>
 8007c18:	3001      	adds	r0, #1
 8007c1a:	d03a      	beq.n	8007c92 <_malloc_r+0xea>
 8007c1c:	6823      	ldr	r3, [r4, #0]
 8007c1e:	442b      	add	r3, r5
 8007c20:	6023      	str	r3, [r4, #0]
 8007c22:	f8d8 3000 	ldr.w	r3, [r8]
 8007c26:	685a      	ldr	r2, [r3, #4]
 8007c28:	bb62      	cbnz	r2, 8007c84 <_malloc_r+0xdc>
 8007c2a:	f8c8 7000 	str.w	r7, [r8]
 8007c2e:	e00f      	b.n	8007c50 <_malloc_r+0xa8>
 8007c30:	6822      	ldr	r2, [r4, #0]
 8007c32:	1b52      	subs	r2, r2, r5
 8007c34:	d420      	bmi.n	8007c78 <_malloc_r+0xd0>
 8007c36:	2a0b      	cmp	r2, #11
 8007c38:	d917      	bls.n	8007c6a <_malloc_r+0xc2>
 8007c3a:	1961      	adds	r1, r4, r5
 8007c3c:	42a3      	cmp	r3, r4
 8007c3e:	6025      	str	r5, [r4, #0]
 8007c40:	bf18      	it	ne
 8007c42:	6059      	strne	r1, [r3, #4]
 8007c44:	6863      	ldr	r3, [r4, #4]
 8007c46:	bf08      	it	eq
 8007c48:	f8c8 1000 	streq.w	r1, [r8]
 8007c4c:	5162      	str	r2, [r4, r5]
 8007c4e:	604b      	str	r3, [r1, #4]
 8007c50:	4630      	mov	r0, r6
 8007c52:	f000 f82f 	bl	8007cb4 <__malloc_unlock>
 8007c56:	f104 000b 	add.w	r0, r4, #11
 8007c5a:	1d23      	adds	r3, r4, #4
 8007c5c:	f020 0007 	bic.w	r0, r0, #7
 8007c60:	1ac2      	subs	r2, r0, r3
 8007c62:	bf1c      	itt	ne
 8007c64:	1a1b      	subne	r3, r3, r0
 8007c66:	50a3      	strne	r3, [r4, r2]
 8007c68:	e7af      	b.n	8007bca <_malloc_r+0x22>
 8007c6a:	6862      	ldr	r2, [r4, #4]
 8007c6c:	42a3      	cmp	r3, r4
 8007c6e:	bf0c      	ite	eq
 8007c70:	f8c8 2000 	streq.w	r2, [r8]
 8007c74:	605a      	strne	r2, [r3, #4]
 8007c76:	e7eb      	b.n	8007c50 <_malloc_r+0xa8>
 8007c78:	4623      	mov	r3, r4
 8007c7a:	6864      	ldr	r4, [r4, #4]
 8007c7c:	e7ae      	b.n	8007bdc <_malloc_r+0x34>
 8007c7e:	463c      	mov	r4, r7
 8007c80:	687f      	ldr	r7, [r7, #4]
 8007c82:	e7b6      	b.n	8007bf2 <_malloc_r+0x4a>
 8007c84:	461a      	mov	r2, r3
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	42a3      	cmp	r3, r4
 8007c8a:	d1fb      	bne.n	8007c84 <_malloc_r+0xdc>
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	6053      	str	r3, [r2, #4]
 8007c90:	e7de      	b.n	8007c50 <_malloc_r+0xa8>
 8007c92:	230c      	movs	r3, #12
 8007c94:	6033      	str	r3, [r6, #0]
 8007c96:	4630      	mov	r0, r6
 8007c98:	f000 f80c 	bl	8007cb4 <__malloc_unlock>
 8007c9c:	e794      	b.n	8007bc8 <_malloc_r+0x20>
 8007c9e:	6005      	str	r5, [r0, #0]
 8007ca0:	e7d6      	b.n	8007c50 <_malloc_r+0xa8>
 8007ca2:	bf00      	nop
 8007ca4:	20000530 	.word	0x20000530

08007ca8 <__malloc_lock>:
 8007ca8:	4801      	ldr	r0, [pc, #4]	@ (8007cb0 <__malloc_lock+0x8>)
 8007caa:	f7ff b8b2 	b.w	8006e12 <__retarget_lock_acquire_recursive>
 8007cae:	bf00      	nop
 8007cb0:	20000528 	.word	0x20000528

08007cb4 <__malloc_unlock>:
 8007cb4:	4801      	ldr	r0, [pc, #4]	@ (8007cbc <__malloc_unlock+0x8>)
 8007cb6:	f7ff b8ad 	b.w	8006e14 <__retarget_lock_release_recursive>
 8007cba:	bf00      	nop
 8007cbc:	20000528 	.word	0x20000528

08007cc0 <_Balloc>:
 8007cc0:	b570      	push	{r4, r5, r6, lr}
 8007cc2:	69c6      	ldr	r6, [r0, #28]
 8007cc4:	4604      	mov	r4, r0
 8007cc6:	460d      	mov	r5, r1
 8007cc8:	b976      	cbnz	r6, 8007ce8 <_Balloc+0x28>
 8007cca:	2010      	movs	r0, #16
 8007ccc:	f7ff ff42 	bl	8007b54 <malloc>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	61e0      	str	r0, [r4, #28]
 8007cd4:	b920      	cbnz	r0, 8007ce0 <_Balloc+0x20>
 8007cd6:	4b18      	ldr	r3, [pc, #96]	@ (8007d38 <_Balloc+0x78>)
 8007cd8:	4818      	ldr	r0, [pc, #96]	@ (8007d3c <_Balloc+0x7c>)
 8007cda:	216b      	movs	r1, #107	@ 0x6b
 8007cdc:	f001 ff54 	bl	8009b88 <__assert_func>
 8007ce0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ce4:	6006      	str	r6, [r0, #0]
 8007ce6:	60c6      	str	r6, [r0, #12]
 8007ce8:	69e6      	ldr	r6, [r4, #28]
 8007cea:	68f3      	ldr	r3, [r6, #12]
 8007cec:	b183      	cbz	r3, 8007d10 <_Balloc+0x50>
 8007cee:	69e3      	ldr	r3, [r4, #28]
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007cf6:	b9b8      	cbnz	r0, 8007d28 <_Balloc+0x68>
 8007cf8:	2101      	movs	r1, #1
 8007cfa:	fa01 f605 	lsl.w	r6, r1, r5
 8007cfe:	1d72      	adds	r2, r6, #5
 8007d00:	0092      	lsls	r2, r2, #2
 8007d02:	4620      	mov	r0, r4
 8007d04:	f001 ff5e 	bl	8009bc4 <_calloc_r>
 8007d08:	b160      	cbz	r0, 8007d24 <_Balloc+0x64>
 8007d0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007d0e:	e00e      	b.n	8007d2e <_Balloc+0x6e>
 8007d10:	2221      	movs	r2, #33	@ 0x21
 8007d12:	2104      	movs	r1, #4
 8007d14:	4620      	mov	r0, r4
 8007d16:	f001 ff55 	bl	8009bc4 <_calloc_r>
 8007d1a:	69e3      	ldr	r3, [r4, #28]
 8007d1c:	60f0      	str	r0, [r6, #12]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1e4      	bne.n	8007cee <_Balloc+0x2e>
 8007d24:	2000      	movs	r0, #0
 8007d26:	bd70      	pop	{r4, r5, r6, pc}
 8007d28:	6802      	ldr	r2, [r0, #0]
 8007d2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007d2e:	2300      	movs	r3, #0
 8007d30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007d34:	e7f7      	b.n	8007d26 <_Balloc+0x66>
 8007d36:	bf00      	nop
 8007d38:	0800b5da 	.word	0x0800b5da
 8007d3c:	0800b65a 	.word	0x0800b65a

08007d40 <_Bfree>:
 8007d40:	b570      	push	{r4, r5, r6, lr}
 8007d42:	69c6      	ldr	r6, [r0, #28]
 8007d44:	4605      	mov	r5, r0
 8007d46:	460c      	mov	r4, r1
 8007d48:	b976      	cbnz	r6, 8007d68 <_Bfree+0x28>
 8007d4a:	2010      	movs	r0, #16
 8007d4c:	f7ff ff02 	bl	8007b54 <malloc>
 8007d50:	4602      	mov	r2, r0
 8007d52:	61e8      	str	r0, [r5, #28]
 8007d54:	b920      	cbnz	r0, 8007d60 <_Bfree+0x20>
 8007d56:	4b09      	ldr	r3, [pc, #36]	@ (8007d7c <_Bfree+0x3c>)
 8007d58:	4809      	ldr	r0, [pc, #36]	@ (8007d80 <_Bfree+0x40>)
 8007d5a:	218f      	movs	r1, #143	@ 0x8f
 8007d5c:	f001 ff14 	bl	8009b88 <__assert_func>
 8007d60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d64:	6006      	str	r6, [r0, #0]
 8007d66:	60c6      	str	r6, [r0, #12]
 8007d68:	b13c      	cbz	r4, 8007d7a <_Bfree+0x3a>
 8007d6a:	69eb      	ldr	r3, [r5, #28]
 8007d6c:	6862      	ldr	r2, [r4, #4]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d74:	6021      	str	r1, [r4, #0]
 8007d76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007d7a:	bd70      	pop	{r4, r5, r6, pc}
 8007d7c:	0800b5da 	.word	0x0800b5da
 8007d80:	0800b65a 	.word	0x0800b65a

08007d84 <__multadd>:
 8007d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d88:	690d      	ldr	r5, [r1, #16]
 8007d8a:	4607      	mov	r7, r0
 8007d8c:	460c      	mov	r4, r1
 8007d8e:	461e      	mov	r6, r3
 8007d90:	f101 0c14 	add.w	ip, r1, #20
 8007d94:	2000      	movs	r0, #0
 8007d96:	f8dc 3000 	ldr.w	r3, [ip]
 8007d9a:	b299      	uxth	r1, r3
 8007d9c:	fb02 6101 	mla	r1, r2, r1, r6
 8007da0:	0c1e      	lsrs	r6, r3, #16
 8007da2:	0c0b      	lsrs	r3, r1, #16
 8007da4:	fb02 3306 	mla	r3, r2, r6, r3
 8007da8:	b289      	uxth	r1, r1
 8007daa:	3001      	adds	r0, #1
 8007dac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007db0:	4285      	cmp	r5, r0
 8007db2:	f84c 1b04 	str.w	r1, [ip], #4
 8007db6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007dba:	dcec      	bgt.n	8007d96 <__multadd+0x12>
 8007dbc:	b30e      	cbz	r6, 8007e02 <__multadd+0x7e>
 8007dbe:	68a3      	ldr	r3, [r4, #8]
 8007dc0:	42ab      	cmp	r3, r5
 8007dc2:	dc19      	bgt.n	8007df8 <__multadd+0x74>
 8007dc4:	6861      	ldr	r1, [r4, #4]
 8007dc6:	4638      	mov	r0, r7
 8007dc8:	3101      	adds	r1, #1
 8007dca:	f7ff ff79 	bl	8007cc0 <_Balloc>
 8007dce:	4680      	mov	r8, r0
 8007dd0:	b928      	cbnz	r0, 8007dde <__multadd+0x5a>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8007e08 <__multadd+0x84>)
 8007dd6:	480d      	ldr	r0, [pc, #52]	@ (8007e0c <__multadd+0x88>)
 8007dd8:	21ba      	movs	r1, #186	@ 0xba
 8007dda:	f001 fed5 	bl	8009b88 <__assert_func>
 8007dde:	6922      	ldr	r2, [r4, #16]
 8007de0:	3202      	adds	r2, #2
 8007de2:	f104 010c 	add.w	r1, r4, #12
 8007de6:	0092      	lsls	r2, r2, #2
 8007de8:	300c      	adds	r0, #12
 8007dea:	f001 feb5 	bl	8009b58 <memcpy>
 8007dee:	4621      	mov	r1, r4
 8007df0:	4638      	mov	r0, r7
 8007df2:	f7ff ffa5 	bl	8007d40 <_Bfree>
 8007df6:	4644      	mov	r4, r8
 8007df8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007dfc:	3501      	adds	r5, #1
 8007dfe:	615e      	str	r6, [r3, #20]
 8007e00:	6125      	str	r5, [r4, #16]
 8007e02:	4620      	mov	r0, r4
 8007e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e08:	0800b649 	.word	0x0800b649
 8007e0c:	0800b65a 	.word	0x0800b65a

08007e10 <__s2b>:
 8007e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e14:	460c      	mov	r4, r1
 8007e16:	4615      	mov	r5, r2
 8007e18:	461f      	mov	r7, r3
 8007e1a:	2209      	movs	r2, #9
 8007e1c:	3308      	adds	r3, #8
 8007e1e:	4606      	mov	r6, r0
 8007e20:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e24:	2100      	movs	r1, #0
 8007e26:	2201      	movs	r2, #1
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	db09      	blt.n	8007e40 <__s2b+0x30>
 8007e2c:	4630      	mov	r0, r6
 8007e2e:	f7ff ff47 	bl	8007cc0 <_Balloc>
 8007e32:	b940      	cbnz	r0, 8007e46 <__s2b+0x36>
 8007e34:	4602      	mov	r2, r0
 8007e36:	4b19      	ldr	r3, [pc, #100]	@ (8007e9c <__s2b+0x8c>)
 8007e38:	4819      	ldr	r0, [pc, #100]	@ (8007ea0 <__s2b+0x90>)
 8007e3a:	21d3      	movs	r1, #211	@ 0xd3
 8007e3c:	f001 fea4 	bl	8009b88 <__assert_func>
 8007e40:	0052      	lsls	r2, r2, #1
 8007e42:	3101      	adds	r1, #1
 8007e44:	e7f0      	b.n	8007e28 <__s2b+0x18>
 8007e46:	9b08      	ldr	r3, [sp, #32]
 8007e48:	6143      	str	r3, [r0, #20]
 8007e4a:	2d09      	cmp	r5, #9
 8007e4c:	f04f 0301 	mov.w	r3, #1
 8007e50:	6103      	str	r3, [r0, #16]
 8007e52:	dd16      	ble.n	8007e82 <__s2b+0x72>
 8007e54:	f104 0909 	add.w	r9, r4, #9
 8007e58:	46c8      	mov	r8, r9
 8007e5a:	442c      	add	r4, r5
 8007e5c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007e60:	4601      	mov	r1, r0
 8007e62:	3b30      	subs	r3, #48	@ 0x30
 8007e64:	220a      	movs	r2, #10
 8007e66:	4630      	mov	r0, r6
 8007e68:	f7ff ff8c 	bl	8007d84 <__multadd>
 8007e6c:	45a0      	cmp	r8, r4
 8007e6e:	d1f5      	bne.n	8007e5c <__s2b+0x4c>
 8007e70:	f1a5 0408 	sub.w	r4, r5, #8
 8007e74:	444c      	add	r4, r9
 8007e76:	1b2d      	subs	r5, r5, r4
 8007e78:	1963      	adds	r3, r4, r5
 8007e7a:	42bb      	cmp	r3, r7
 8007e7c:	db04      	blt.n	8007e88 <__s2b+0x78>
 8007e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e82:	340a      	adds	r4, #10
 8007e84:	2509      	movs	r5, #9
 8007e86:	e7f6      	b.n	8007e76 <__s2b+0x66>
 8007e88:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007e8c:	4601      	mov	r1, r0
 8007e8e:	3b30      	subs	r3, #48	@ 0x30
 8007e90:	220a      	movs	r2, #10
 8007e92:	4630      	mov	r0, r6
 8007e94:	f7ff ff76 	bl	8007d84 <__multadd>
 8007e98:	e7ee      	b.n	8007e78 <__s2b+0x68>
 8007e9a:	bf00      	nop
 8007e9c:	0800b649 	.word	0x0800b649
 8007ea0:	0800b65a 	.word	0x0800b65a

08007ea4 <__hi0bits>:
 8007ea4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	bf36      	itet	cc
 8007eac:	0403      	lslcc	r3, r0, #16
 8007eae:	2000      	movcs	r0, #0
 8007eb0:	2010      	movcc	r0, #16
 8007eb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007eb6:	bf3c      	itt	cc
 8007eb8:	021b      	lslcc	r3, r3, #8
 8007eba:	3008      	addcc	r0, #8
 8007ebc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ec0:	bf3c      	itt	cc
 8007ec2:	011b      	lslcc	r3, r3, #4
 8007ec4:	3004      	addcc	r0, #4
 8007ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007eca:	bf3c      	itt	cc
 8007ecc:	009b      	lslcc	r3, r3, #2
 8007ece:	3002      	addcc	r0, #2
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	db05      	blt.n	8007ee0 <__hi0bits+0x3c>
 8007ed4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007ed8:	f100 0001 	add.w	r0, r0, #1
 8007edc:	bf08      	it	eq
 8007ede:	2020      	moveq	r0, #32
 8007ee0:	4770      	bx	lr

08007ee2 <__lo0bits>:
 8007ee2:	6803      	ldr	r3, [r0, #0]
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	f013 0007 	ands.w	r0, r3, #7
 8007eea:	d00b      	beq.n	8007f04 <__lo0bits+0x22>
 8007eec:	07d9      	lsls	r1, r3, #31
 8007eee:	d421      	bmi.n	8007f34 <__lo0bits+0x52>
 8007ef0:	0798      	lsls	r0, r3, #30
 8007ef2:	bf49      	itett	mi
 8007ef4:	085b      	lsrmi	r3, r3, #1
 8007ef6:	089b      	lsrpl	r3, r3, #2
 8007ef8:	2001      	movmi	r0, #1
 8007efa:	6013      	strmi	r3, [r2, #0]
 8007efc:	bf5c      	itt	pl
 8007efe:	6013      	strpl	r3, [r2, #0]
 8007f00:	2002      	movpl	r0, #2
 8007f02:	4770      	bx	lr
 8007f04:	b299      	uxth	r1, r3
 8007f06:	b909      	cbnz	r1, 8007f0c <__lo0bits+0x2a>
 8007f08:	0c1b      	lsrs	r3, r3, #16
 8007f0a:	2010      	movs	r0, #16
 8007f0c:	b2d9      	uxtb	r1, r3
 8007f0e:	b909      	cbnz	r1, 8007f14 <__lo0bits+0x32>
 8007f10:	3008      	adds	r0, #8
 8007f12:	0a1b      	lsrs	r3, r3, #8
 8007f14:	0719      	lsls	r1, r3, #28
 8007f16:	bf04      	itt	eq
 8007f18:	091b      	lsreq	r3, r3, #4
 8007f1a:	3004      	addeq	r0, #4
 8007f1c:	0799      	lsls	r1, r3, #30
 8007f1e:	bf04      	itt	eq
 8007f20:	089b      	lsreq	r3, r3, #2
 8007f22:	3002      	addeq	r0, #2
 8007f24:	07d9      	lsls	r1, r3, #31
 8007f26:	d403      	bmi.n	8007f30 <__lo0bits+0x4e>
 8007f28:	085b      	lsrs	r3, r3, #1
 8007f2a:	f100 0001 	add.w	r0, r0, #1
 8007f2e:	d003      	beq.n	8007f38 <__lo0bits+0x56>
 8007f30:	6013      	str	r3, [r2, #0]
 8007f32:	4770      	bx	lr
 8007f34:	2000      	movs	r0, #0
 8007f36:	4770      	bx	lr
 8007f38:	2020      	movs	r0, #32
 8007f3a:	4770      	bx	lr

08007f3c <__i2b>:
 8007f3c:	b510      	push	{r4, lr}
 8007f3e:	460c      	mov	r4, r1
 8007f40:	2101      	movs	r1, #1
 8007f42:	f7ff febd 	bl	8007cc0 <_Balloc>
 8007f46:	4602      	mov	r2, r0
 8007f48:	b928      	cbnz	r0, 8007f56 <__i2b+0x1a>
 8007f4a:	4b05      	ldr	r3, [pc, #20]	@ (8007f60 <__i2b+0x24>)
 8007f4c:	4805      	ldr	r0, [pc, #20]	@ (8007f64 <__i2b+0x28>)
 8007f4e:	f240 1145 	movw	r1, #325	@ 0x145
 8007f52:	f001 fe19 	bl	8009b88 <__assert_func>
 8007f56:	2301      	movs	r3, #1
 8007f58:	6144      	str	r4, [r0, #20]
 8007f5a:	6103      	str	r3, [r0, #16]
 8007f5c:	bd10      	pop	{r4, pc}
 8007f5e:	bf00      	nop
 8007f60:	0800b649 	.word	0x0800b649
 8007f64:	0800b65a 	.word	0x0800b65a

08007f68 <__multiply>:
 8007f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f6c:	4614      	mov	r4, r2
 8007f6e:	690a      	ldr	r2, [r1, #16]
 8007f70:	6923      	ldr	r3, [r4, #16]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	bfa8      	it	ge
 8007f76:	4623      	movge	r3, r4
 8007f78:	460f      	mov	r7, r1
 8007f7a:	bfa4      	itt	ge
 8007f7c:	460c      	movge	r4, r1
 8007f7e:	461f      	movge	r7, r3
 8007f80:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007f84:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007f88:	68a3      	ldr	r3, [r4, #8]
 8007f8a:	6861      	ldr	r1, [r4, #4]
 8007f8c:	eb0a 0609 	add.w	r6, sl, r9
 8007f90:	42b3      	cmp	r3, r6
 8007f92:	b085      	sub	sp, #20
 8007f94:	bfb8      	it	lt
 8007f96:	3101      	addlt	r1, #1
 8007f98:	f7ff fe92 	bl	8007cc0 <_Balloc>
 8007f9c:	b930      	cbnz	r0, 8007fac <__multiply+0x44>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	4b44      	ldr	r3, [pc, #272]	@ (80080b4 <__multiply+0x14c>)
 8007fa2:	4845      	ldr	r0, [pc, #276]	@ (80080b8 <__multiply+0x150>)
 8007fa4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007fa8:	f001 fdee 	bl	8009b88 <__assert_func>
 8007fac:	f100 0514 	add.w	r5, r0, #20
 8007fb0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007fb4:	462b      	mov	r3, r5
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	4543      	cmp	r3, r8
 8007fba:	d321      	bcc.n	8008000 <__multiply+0x98>
 8007fbc:	f107 0114 	add.w	r1, r7, #20
 8007fc0:	f104 0214 	add.w	r2, r4, #20
 8007fc4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007fc8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007fcc:	9302      	str	r3, [sp, #8]
 8007fce:	1b13      	subs	r3, r2, r4
 8007fd0:	3b15      	subs	r3, #21
 8007fd2:	f023 0303 	bic.w	r3, r3, #3
 8007fd6:	3304      	adds	r3, #4
 8007fd8:	f104 0715 	add.w	r7, r4, #21
 8007fdc:	42ba      	cmp	r2, r7
 8007fde:	bf38      	it	cc
 8007fe0:	2304      	movcc	r3, #4
 8007fe2:	9301      	str	r3, [sp, #4]
 8007fe4:	9b02      	ldr	r3, [sp, #8]
 8007fe6:	9103      	str	r1, [sp, #12]
 8007fe8:	428b      	cmp	r3, r1
 8007fea:	d80c      	bhi.n	8008006 <__multiply+0x9e>
 8007fec:	2e00      	cmp	r6, #0
 8007fee:	dd03      	ble.n	8007ff8 <__multiply+0x90>
 8007ff0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d05b      	beq.n	80080b0 <__multiply+0x148>
 8007ff8:	6106      	str	r6, [r0, #16]
 8007ffa:	b005      	add	sp, #20
 8007ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008000:	f843 2b04 	str.w	r2, [r3], #4
 8008004:	e7d8      	b.n	8007fb8 <__multiply+0x50>
 8008006:	f8b1 a000 	ldrh.w	sl, [r1]
 800800a:	f1ba 0f00 	cmp.w	sl, #0
 800800e:	d024      	beq.n	800805a <__multiply+0xf2>
 8008010:	f104 0e14 	add.w	lr, r4, #20
 8008014:	46a9      	mov	r9, r5
 8008016:	f04f 0c00 	mov.w	ip, #0
 800801a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800801e:	f8d9 3000 	ldr.w	r3, [r9]
 8008022:	fa1f fb87 	uxth.w	fp, r7
 8008026:	b29b      	uxth	r3, r3
 8008028:	fb0a 330b 	mla	r3, sl, fp, r3
 800802c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008030:	f8d9 7000 	ldr.w	r7, [r9]
 8008034:	4463      	add	r3, ip
 8008036:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800803a:	fb0a c70b 	mla	r7, sl, fp, ip
 800803e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008042:	b29b      	uxth	r3, r3
 8008044:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008048:	4572      	cmp	r2, lr
 800804a:	f849 3b04 	str.w	r3, [r9], #4
 800804e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008052:	d8e2      	bhi.n	800801a <__multiply+0xb2>
 8008054:	9b01      	ldr	r3, [sp, #4]
 8008056:	f845 c003 	str.w	ip, [r5, r3]
 800805a:	9b03      	ldr	r3, [sp, #12]
 800805c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008060:	3104      	adds	r1, #4
 8008062:	f1b9 0f00 	cmp.w	r9, #0
 8008066:	d021      	beq.n	80080ac <__multiply+0x144>
 8008068:	682b      	ldr	r3, [r5, #0]
 800806a:	f104 0c14 	add.w	ip, r4, #20
 800806e:	46ae      	mov	lr, r5
 8008070:	f04f 0a00 	mov.w	sl, #0
 8008074:	f8bc b000 	ldrh.w	fp, [ip]
 8008078:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800807c:	fb09 770b 	mla	r7, r9, fp, r7
 8008080:	4457      	add	r7, sl
 8008082:	b29b      	uxth	r3, r3
 8008084:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008088:	f84e 3b04 	str.w	r3, [lr], #4
 800808c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008090:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008094:	f8be 3000 	ldrh.w	r3, [lr]
 8008098:	fb09 330a 	mla	r3, r9, sl, r3
 800809c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80080a0:	4562      	cmp	r2, ip
 80080a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80080a6:	d8e5      	bhi.n	8008074 <__multiply+0x10c>
 80080a8:	9f01      	ldr	r7, [sp, #4]
 80080aa:	51eb      	str	r3, [r5, r7]
 80080ac:	3504      	adds	r5, #4
 80080ae:	e799      	b.n	8007fe4 <__multiply+0x7c>
 80080b0:	3e01      	subs	r6, #1
 80080b2:	e79b      	b.n	8007fec <__multiply+0x84>
 80080b4:	0800b649 	.word	0x0800b649
 80080b8:	0800b65a 	.word	0x0800b65a

080080bc <__pow5mult>:
 80080bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080c0:	4615      	mov	r5, r2
 80080c2:	f012 0203 	ands.w	r2, r2, #3
 80080c6:	4607      	mov	r7, r0
 80080c8:	460e      	mov	r6, r1
 80080ca:	d007      	beq.n	80080dc <__pow5mult+0x20>
 80080cc:	4c25      	ldr	r4, [pc, #148]	@ (8008164 <__pow5mult+0xa8>)
 80080ce:	3a01      	subs	r2, #1
 80080d0:	2300      	movs	r3, #0
 80080d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80080d6:	f7ff fe55 	bl	8007d84 <__multadd>
 80080da:	4606      	mov	r6, r0
 80080dc:	10ad      	asrs	r5, r5, #2
 80080de:	d03d      	beq.n	800815c <__pow5mult+0xa0>
 80080e0:	69fc      	ldr	r4, [r7, #28]
 80080e2:	b97c      	cbnz	r4, 8008104 <__pow5mult+0x48>
 80080e4:	2010      	movs	r0, #16
 80080e6:	f7ff fd35 	bl	8007b54 <malloc>
 80080ea:	4602      	mov	r2, r0
 80080ec:	61f8      	str	r0, [r7, #28]
 80080ee:	b928      	cbnz	r0, 80080fc <__pow5mult+0x40>
 80080f0:	4b1d      	ldr	r3, [pc, #116]	@ (8008168 <__pow5mult+0xac>)
 80080f2:	481e      	ldr	r0, [pc, #120]	@ (800816c <__pow5mult+0xb0>)
 80080f4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80080f8:	f001 fd46 	bl	8009b88 <__assert_func>
 80080fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008100:	6004      	str	r4, [r0, #0]
 8008102:	60c4      	str	r4, [r0, #12]
 8008104:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008108:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800810c:	b94c      	cbnz	r4, 8008122 <__pow5mult+0x66>
 800810e:	f240 2171 	movw	r1, #625	@ 0x271
 8008112:	4638      	mov	r0, r7
 8008114:	f7ff ff12 	bl	8007f3c <__i2b>
 8008118:	2300      	movs	r3, #0
 800811a:	f8c8 0008 	str.w	r0, [r8, #8]
 800811e:	4604      	mov	r4, r0
 8008120:	6003      	str	r3, [r0, #0]
 8008122:	f04f 0900 	mov.w	r9, #0
 8008126:	07eb      	lsls	r3, r5, #31
 8008128:	d50a      	bpl.n	8008140 <__pow5mult+0x84>
 800812a:	4631      	mov	r1, r6
 800812c:	4622      	mov	r2, r4
 800812e:	4638      	mov	r0, r7
 8008130:	f7ff ff1a 	bl	8007f68 <__multiply>
 8008134:	4631      	mov	r1, r6
 8008136:	4680      	mov	r8, r0
 8008138:	4638      	mov	r0, r7
 800813a:	f7ff fe01 	bl	8007d40 <_Bfree>
 800813e:	4646      	mov	r6, r8
 8008140:	106d      	asrs	r5, r5, #1
 8008142:	d00b      	beq.n	800815c <__pow5mult+0xa0>
 8008144:	6820      	ldr	r0, [r4, #0]
 8008146:	b938      	cbnz	r0, 8008158 <__pow5mult+0x9c>
 8008148:	4622      	mov	r2, r4
 800814a:	4621      	mov	r1, r4
 800814c:	4638      	mov	r0, r7
 800814e:	f7ff ff0b 	bl	8007f68 <__multiply>
 8008152:	6020      	str	r0, [r4, #0]
 8008154:	f8c0 9000 	str.w	r9, [r0]
 8008158:	4604      	mov	r4, r0
 800815a:	e7e4      	b.n	8008126 <__pow5mult+0x6a>
 800815c:	4630      	mov	r0, r6
 800815e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008162:	bf00      	nop
 8008164:	0800b6b4 	.word	0x0800b6b4
 8008168:	0800b5da 	.word	0x0800b5da
 800816c:	0800b65a 	.word	0x0800b65a

08008170 <__lshift>:
 8008170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008174:	460c      	mov	r4, r1
 8008176:	6849      	ldr	r1, [r1, #4]
 8008178:	6923      	ldr	r3, [r4, #16]
 800817a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800817e:	68a3      	ldr	r3, [r4, #8]
 8008180:	4607      	mov	r7, r0
 8008182:	4691      	mov	r9, r2
 8008184:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008188:	f108 0601 	add.w	r6, r8, #1
 800818c:	42b3      	cmp	r3, r6
 800818e:	db0b      	blt.n	80081a8 <__lshift+0x38>
 8008190:	4638      	mov	r0, r7
 8008192:	f7ff fd95 	bl	8007cc0 <_Balloc>
 8008196:	4605      	mov	r5, r0
 8008198:	b948      	cbnz	r0, 80081ae <__lshift+0x3e>
 800819a:	4602      	mov	r2, r0
 800819c:	4b28      	ldr	r3, [pc, #160]	@ (8008240 <__lshift+0xd0>)
 800819e:	4829      	ldr	r0, [pc, #164]	@ (8008244 <__lshift+0xd4>)
 80081a0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80081a4:	f001 fcf0 	bl	8009b88 <__assert_func>
 80081a8:	3101      	adds	r1, #1
 80081aa:	005b      	lsls	r3, r3, #1
 80081ac:	e7ee      	b.n	800818c <__lshift+0x1c>
 80081ae:	2300      	movs	r3, #0
 80081b0:	f100 0114 	add.w	r1, r0, #20
 80081b4:	f100 0210 	add.w	r2, r0, #16
 80081b8:	4618      	mov	r0, r3
 80081ba:	4553      	cmp	r3, sl
 80081bc:	db33      	blt.n	8008226 <__lshift+0xb6>
 80081be:	6920      	ldr	r0, [r4, #16]
 80081c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80081c4:	f104 0314 	add.w	r3, r4, #20
 80081c8:	f019 091f 	ands.w	r9, r9, #31
 80081cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80081d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80081d4:	d02b      	beq.n	800822e <__lshift+0xbe>
 80081d6:	f1c9 0e20 	rsb	lr, r9, #32
 80081da:	468a      	mov	sl, r1
 80081dc:	2200      	movs	r2, #0
 80081de:	6818      	ldr	r0, [r3, #0]
 80081e0:	fa00 f009 	lsl.w	r0, r0, r9
 80081e4:	4310      	orrs	r0, r2
 80081e6:	f84a 0b04 	str.w	r0, [sl], #4
 80081ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80081ee:	459c      	cmp	ip, r3
 80081f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80081f4:	d8f3      	bhi.n	80081de <__lshift+0x6e>
 80081f6:	ebac 0304 	sub.w	r3, ip, r4
 80081fa:	3b15      	subs	r3, #21
 80081fc:	f023 0303 	bic.w	r3, r3, #3
 8008200:	3304      	adds	r3, #4
 8008202:	f104 0015 	add.w	r0, r4, #21
 8008206:	4584      	cmp	ip, r0
 8008208:	bf38      	it	cc
 800820a:	2304      	movcc	r3, #4
 800820c:	50ca      	str	r2, [r1, r3]
 800820e:	b10a      	cbz	r2, 8008214 <__lshift+0xa4>
 8008210:	f108 0602 	add.w	r6, r8, #2
 8008214:	3e01      	subs	r6, #1
 8008216:	4638      	mov	r0, r7
 8008218:	612e      	str	r6, [r5, #16]
 800821a:	4621      	mov	r1, r4
 800821c:	f7ff fd90 	bl	8007d40 <_Bfree>
 8008220:	4628      	mov	r0, r5
 8008222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008226:	f842 0f04 	str.w	r0, [r2, #4]!
 800822a:	3301      	adds	r3, #1
 800822c:	e7c5      	b.n	80081ba <__lshift+0x4a>
 800822e:	3904      	subs	r1, #4
 8008230:	f853 2b04 	ldr.w	r2, [r3], #4
 8008234:	f841 2f04 	str.w	r2, [r1, #4]!
 8008238:	459c      	cmp	ip, r3
 800823a:	d8f9      	bhi.n	8008230 <__lshift+0xc0>
 800823c:	e7ea      	b.n	8008214 <__lshift+0xa4>
 800823e:	bf00      	nop
 8008240:	0800b649 	.word	0x0800b649
 8008244:	0800b65a 	.word	0x0800b65a

08008248 <__mcmp>:
 8008248:	690a      	ldr	r2, [r1, #16]
 800824a:	4603      	mov	r3, r0
 800824c:	6900      	ldr	r0, [r0, #16]
 800824e:	1a80      	subs	r0, r0, r2
 8008250:	b530      	push	{r4, r5, lr}
 8008252:	d10e      	bne.n	8008272 <__mcmp+0x2a>
 8008254:	3314      	adds	r3, #20
 8008256:	3114      	adds	r1, #20
 8008258:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800825c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008260:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008264:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008268:	4295      	cmp	r5, r2
 800826a:	d003      	beq.n	8008274 <__mcmp+0x2c>
 800826c:	d205      	bcs.n	800827a <__mcmp+0x32>
 800826e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008272:	bd30      	pop	{r4, r5, pc}
 8008274:	42a3      	cmp	r3, r4
 8008276:	d3f3      	bcc.n	8008260 <__mcmp+0x18>
 8008278:	e7fb      	b.n	8008272 <__mcmp+0x2a>
 800827a:	2001      	movs	r0, #1
 800827c:	e7f9      	b.n	8008272 <__mcmp+0x2a>
	...

08008280 <__mdiff>:
 8008280:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008284:	4689      	mov	r9, r1
 8008286:	4606      	mov	r6, r0
 8008288:	4611      	mov	r1, r2
 800828a:	4648      	mov	r0, r9
 800828c:	4614      	mov	r4, r2
 800828e:	f7ff ffdb 	bl	8008248 <__mcmp>
 8008292:	1e05      	subs	r5, r0, #0
 8008294:	d112      	bne.n	80082bc <__mdiff+0x3c>
 8008296:	4629      	mov	r1, r5
 8008298:	4630      	mov	r0, r6
 800829a:	f7ff fd11 	bl	8007cc0 <_Balloc>
 800829e:	4602      	mov	r2, r0
 80082a0:	b928      	cbnz	r0, 80082ae <__mdiff+0x2e>
 80082a2:	4b3f      	ldr	r3, [pc, #252]	@ (80083a0 <__mdiff+0x120>)
 80082a4:	f240 2137 	movw	r1, #567	@ 0x237
 80082a8:	483e      	ldr	r0, [pc, #248]	@ (80083a4 <__mdiff+0x124>)
 80082aa:	f001 fc6d 	bl	8009b88 <__assert_func>
 80082ae:	2301      	movs	r3, #1
 80082b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80082b4:	4610      	mov	r0, r2
 80082b6:	b003      	add	sp, #12
 80082b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082bc:	bfbc      	itt	lt
 80082be:	464b      	movlt	r3, r9
 80082c0:	46a1      	movlt	r9, r4
 80082c2:	4630      	mov	r0, r6
 80082c4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80082c8:	bfba      	itte	lt
 80082ca:	461c      	movlt	r4, r3
 80082cc:	2501      	movlt	r5, #1
 80082ce:	2500      	movge	r5, #0
 80082d0:	f7ff fcf6 	bl	8007cc0 <_Balloc>
 80082d4:	4602      	mov	r2, r0
 80082d6:	b918      	cbnz	r0, 80082e0 <__mdiff+0x60>
 80082d8:	4b31      	ldr	r3, [pc, #196]	@ (80083a0 <__mdiff+0x120>)
 80082da:	f240 2145 	movw	r1, #581	@ 0x245
 80082de:	e7e3      	b.n	80082a8 <__mdiff+0x28>
 80082e0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80082e4:	6926      	ldr	r6, [r4, #16]
 80082e6:	60c5      	str	r5, [r0, #12]
 80082e8:	f109 0310 	add.w	r3, r9, #16
 80082ec:	f109 0514 	add.w	r5, r9, #20
 80082f0:	f104 0e14 	add.w	lr, r4, #20
 80082f4:	f100 0b14 	add.w	fp, r0, #20
 80082f8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80082fc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008300:	9301      	str	r3, [sp, #4]
 8008302:	46d9      	mov	r9, fp
 8008304:	f04f 0c00 	mov.w	ip, #0
 8008308:	9b01      	ldr	r3, [sp, #4]
 800830a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800830e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008312:	9301      	str	r3, [sp, #4]
 8008314:	fa1f f38a 	uxth.w	r3, sl
 8008318:	4619      	mov	r1, r3
 800831a:	b283      	uxth	r3, r0
 800831c:	1acb      	subs	r3, r1, r3
 800831e:	0c00      	lsrs	r0, r0, #16
 8008320:	4463      	add	r3, ip
 8008322:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008326:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800832a:	b29b      	uxth	r3, r3
 800832c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008330:	4576      	cmp	r6, lr
 8008332:	f849 3b04 	str.w	r3, [r9], #4
 8008336:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800833a:	d8e5      	bhi.n	8008308 <__mdiff+0x88>
 800833c:	1b33      	subs	r3, r6, r4
 800833e:	3b15      	subs	r3, #21
 8008340:	f023 0303 	bic.w	r3, r3, #3
 8008344:	3415      	adds	r4, #21
 8008346:	3304      	adds	r3, #4
 8008348:	42a6      	cmp	r6, r4
 800834a:	bf38      	it	cc
 800834c:	2304      	movcc	r3, #4
 800834e:	441d      	add	r5, r3
 8008350:	445b      	add	r3, fp
 8008352:	461e      	mov	r6, r3
 8008354:	462c      	mov	r4, r5
 8008356:	4544      	cmp	r4, r8
 8008358:	d30e      	bcc.n	8008378 <__mdiff+0xf8>
 800835a:	f108 0103 	add.w	r1, r8, #3
 800835e:	1b49      	subs	r1, r1, r5
 8008360:	f021 0103 	bic.w	r1, r1, #3
 8008364:	3d03      	subs	r5, #3
 8008366:	45a8      	cmp	r8, r5
 8008368:	bf38      	it	cc
 800836a:	2100      	movcc	r1, #0
 800836c:	440b      	add	r3, r1
 800836e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008372:	b191      	cbz	r1, 800839a <__mdiff+0x11a>
 8008374:	6117      	str	r7, [r2, #16]
 8008376:	e79d      	b.n	80082b4 <__mdiff+0x34>
 8008378:	f854 1b04 	ldr.w	r1, [r4], #4
 800837c:	46e6      	mov	lr, ip
 800837e:	0c08      	lsrs	r0, r1, #16
 8008380:	fa1c fc81 	uxtah	ip, ip, r1
 8008384:	4471      	add	r1, lr
 8008386:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800838a:	b289      	uxth	r1, r1
 800838c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008390:	f846 1b04 	str.w	r1, [r6], #4
 8008394:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008398:	e7dd      	b.n	8008356 <__mdiff+0xd6>
 800839a:	3f01      	subs	r7, #1
 800839c:	e7e7      	b.n	800836e <__mdiff+0xee>
 800839e:	bf00      	nop
 80083a0:	0800b649 	.word	0x0800b649
 80083a4:	0800b65a 	.word	0x0800b65a

080083a8 <__ulp>:
 80083a8:	b082      	sub	sp, #8
 80083aa:	ed8d 0b00 	vstr	d0, [sp]
 80083ae:	9a01      	ldr	r2, [sp, #4]
 80083b0:	4b0f      	ldr	r3, [pc, #60]	@ (80083f0 <__ulp+0x48>)
 80083b2:	4013      	ands	r3, r2
 80083b4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	dc08      	bgt.n	80083ce <__ulp+0x26>
 80083bc:	425b      	negs	r3, r3
 80083be:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80083c2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80083c6:	da04      	bge.n	80083d2 <__ulp+0x2a>
 80083c8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80083cc:	4113      	asrs	r3, r2
 80083ce:	2200      	movs	r2, #0
 80083d0:	e008      	b.n	80083e4 <__ulp+0x3c>
 80083d2:	f1a2 0314 	sub.w	r3, r2, #20
 80083d6:	2b1e      	cmp	r3, #30
 80083d8:	bfda      	itte	le
 80083da:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80083de:	40da      	lsrle	r2, r3
 80083e0:	2201      	movgt	r2, #1
 80083e2:	2300      	movs	r3, #0
 80083e4:	4619      	mov	r1, r3
 80083e6:	4610      	mov	r0, r2
 80083e8:	ec41 0b10 	vmov	d0, r0, r1
 80083ec:	b002      	add	sp, #8
 80083ee:	4770      	bx	lr
 80083f0:	7ff00000 	.word	0x7ff00000

080083f4 <__b2d>:
 80083f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083f8:	6906      	ldr	r6, [r0, #16]
 80083fa:	f100 0814 	add.w	r8, r0, #20
 80083fe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008402:	1f37      	subs	r7, r6, #4
 8008404:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008408:	4610      	mov	r0, r2
 800840a:	f7ff fd4b 	bl	8007ea4 <__hi0bits>
 800840e:	f1c0 0320 	rsb	r3, r0, #32
 8008412:	280a      	cmp	r0, #10
 8008414:	600b      	str	r3, [r1, #0]
 8008416:	491b      	ldr	r1, [pc, #108]	@ (8008484 <__b2d+0x90>)
 8008418:	dc15      	bgt.n	8008446 <__b2d+0x52>
 800841a:	f1c0 0c0b 	rsb	ip, r0, #11
 800841e:	fa22 f30c 	lsr.w	r3, r2, ip
 8008422:	45b8      	cmp	r8, r7
 8008424:	ea43 0501 	orr.w	r5, r3, r1
 8008428:	bf34      	ite	cc
 800842a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800842e:	2300      	movcs	r3, #0
 8008430:	3015      	adds	r0, #21
 8008432:	fa02 f000 	lsl.w	r0, r2, r0
 8008436:	fa23 f30c 	lsr.w	r3, r3, ip
 800843a:	4303      	orrs	r3, r0
 800843c:	461c      	mov	r4, r3
 800843e:	ec45 4b10 	vmov	d0, r4, r5
 8008442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008446:	45b8      	cmp	r8, r7
 8008448:	bf3a      	itte	cc
 800844a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800844e:	f1a6 0708 	subcc.w	r7, r6, #8
 8008452:	2300      	movcs	r3, #0
 8008454:	380b      	subs	r0, #11
 8008456:	d012      	beq.n	800847e <__b2d+0x8a>
 8008458:	f1c0 0120 	rsb	r1, r0, #32
 800845c:	fa23 f401 	lsr.w	r4, r3, r1
 8008460:	4082      	lsls	r2, r0
 8008462:	4322      	orrs	r2, r4
 8008464:	4547      	cmp	r7, r8
 8008466:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800846a:	bf8c      	ite	hi
 800846c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008470:	2200      	movls	r2, #0
 8008472:	4083      	lsls	r3, r0
 8008474:	40ca      	lsrs	r2, r1
 8008476:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800847a:	4313      	orrs	r3, r2
 800847c:	e7de      	b.n	800843c <__b2d+0x48>
 800847e:	ea42 0501 	orr.w	r5, r2, r1
 8008482:	e7db      	b.n	800843c <__b2d+0x48>
 8008484:	3ff00000 	.word	0x3ff00000

08008488 <__d2b>:
 8008488:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800848c:	460f      	mov	r7, r1
 800848e:	2101      	movs	r1, #1
 8008490:	ec59 8b10 	vmov	r8, r9, d0
 8008494:	4616      	mov	r6, r2
 8008496:	f7ff fc13 	bl	8007cc0 <_Balloc>
 800849a:	4604      	mov	r4, r0
 800849c:	b930      	cbnz	r0, 80084ac <__d2b+0x24>
 800849e:	4602      	mov	r2, r0
 80084a0:	4b23      	ldr	r3, [pc, #140]	@ (8008530 <__d2b+0xa8>)
 80084a2:	4824      	ldr	r0, [pc, #144]	@ (8008534 <__d2b+0xac>)
 80084a4:	f240 310f 	movw	r1, #783	@ 0x30f
 80084a8:	f001 fb6e 	bl	8009b88 <__assert_func>
 80084ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80084b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80084b4:	b10d      	cbz	r5, 80084ba <__d2b+0x32>
 80084b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80084ba:	9301      	str	r3, [sp, #4]
 80084bc:	f1b8 0300 	subs.w	r3, r8, #0
 80084c0:	d023      	beq.n	800850a <__d2b+0x82>
 80084c2:	4668      	mov	r0, sp
 80084c4:	9300      	str	r3, [sp, #0]
 80084c6:	f7ff fd0c 	bl	8007ee2 <__lo0bits>
 80084ca:	e9dd 1200 	ldrd	r1, r2, [sp]
 80084ce:	b1d0      	cbz	r0, 8008506 <__d2b+0x7e>
 80084d0:	f1c0 0320 	rsb	r3, r0, #32
 80084d4:	fa02 f303 	lsl.w	r3, r2, r3
 80084d8:	430b      	orrs	r3, r1
 80084da:	40c2      	lsrs	r2, r0
 80084dc:	6163      	str	r3, [r4, #20]
 80084de:	9201      	str	r2, [sp, #4]
 80084e0:	9b01      	ldr	r3, [sp, #4]
 80084e2:	61a3      	str	r3, [r4, #24]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	bf0c      	ite	eq
 80084e8:	2201      	moveq	r2, #1
 80084ea:	2202      	movne	r2, #2
 80084ec:	6122      	str	r2, [r4, #16]
 80084ee:	b1a5      	cbz	r5, 800851a <__d2b+0x92>
 80084f0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80084f4:	4405      	add	r5, r0
 80084f6:	603d      	str	r5, [r7, #0]
 80084f8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80084fc:	6030      	str	r0, [r6, #0]
 80084fe:	4620      	mov	r0, r4
 8008500:	b003      	add	sp, #12
 8008502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008506:	6161      	str	r1, [r4, #20]
 8008508:	e7ea      	b.n	80084e0 <__d2b+0x58>
 800850a:	a801      	add	r0, sp, #4
 800850c:	f7ff fce9 	bl	8007ee2 <__lo0bits>
 8008510:	9b01      	ldr	r3, [sp, #4]
 8008512:	6163      	str	r3, [r4, #20]
 8008514:	3020      	adds	r0, #32
 8008516:	2201      	movs	r2, #1
 8008518:	e7e8      	b.n	80084ec <__d2b+0x64>
 800851a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800851e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008522:	6038      	str	r0, [r7, #0]
 8008524:	6918      	ldr	r0, [r3, #16]
 8008526:	f7ff fcbd 	bl	8007ea4 <__hi0bits>
 800852a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800852e:	e7e5      	b.n	80084fc <__d2b+0x74>
 8008530:	0800b649 	.word	0x0800b649
 8008534:	0800b65a 	.word	0x0800b65a

08008538 <__ratio>:
 8008538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800853c:	b085      	sub	sp, #20
 800853e:	e9cd 1000 	strd	r1, r0, [sp]
 8008542:	a902      	add	r1, sp, #8
 8008544:	f7ff ff56 	bl	80083f4 <__b2d>
 8008548:	9800      	ldr	r0, [sp, #0]
 800854a:	a903      	add	r1, sp, #12
 800854c:	ec55 4b10 	vmov	r4, r5, d0
 8008550:	f7ff ff50 	bl	80083f4 <__b2d>
 8008554:	9b01      	ldr	r3, [sp, #4]
 8008556:	6919      	ldr	r1, [r3, #16]
 8008558:	9b00      	ldr	r3, [sp, #0]
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	1ac9      	subs	r1, r1, r3
 800855e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008562:	1a9b      	subs	r3, r3, r2
 8008564:	ec5b ab10 	vmov	sl, fp, d0
 8008568:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800856c:	2b00      	cmp	r3, #0
 800856e:	bfce      	itee	gt
 8008570:	462a      	movgt	r2, r5
 8008572:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008576:	465a      	movle	r2, fp
 8008578:	462f      	mov	r7, r5
 800857a:	46d9      	mov	r9, fp
 800857c:	bfcc      	ite	gt
 800857e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008582:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008586:	464b      	mov	r3, r9
 8008588:	4652      	mov	r2, sl
 800858a:	4620      	mov	r0, r4
 800858c:	4639      	mov	r1, r7
 800858e:	f7f8 f97d 	bl	800088c <__aeabi_ddiv>
 8008592:	ec41 0b10 	vmov	d0, r0, r1
 8008596:	b005      	add	sp, #20
 8008598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800859c <__copybits>:
 800859c:	3901      	subs	r1, #1
 800859e:	b570      	push	{r4, r5, r6, lr}
 80085a0:	1149      	asrs	r1, r1, #5
 80085a2:	6914      	ldr	r4, [r2, #16]
 80085a4:	3101      	adds	r1, #1
 80085a6:	f102 0314 	add.w	r3, r2, #20
 80085aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80085ae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80085b2:	1f05      	subs	r5, r0, #4
 80085b4:	42a3      	cmp	r3, r4
 80085b6:	d30c      	bcc.n	80085d2 <__copybits+0x36>
 80085b8:	1aa3      	subs	r3, r4, r2
 80085ba:	3b11      	subs	r3, #17
 80085bc:	f023 0303 	bic.w	r3, r3, #3
 80085c0:	3211      	adds	r2, #17
 80085c2:	42a2      	cmp	r2, r4
 80085c4:	bf88      	it	hi
 80085c6:	2300      	movhi	r3, #0
 80085c8:	4418      	add	r0, r3
 80085ca:	2300      	movs	r3, #0
 80085cc:	4288      	cmp	r0, r1
 80085ce:	d305      	bcc.n	80085dc <__copybits+0x40>
 80085d0:	bd70      	pop	{r4, r5, r6, pc}
 80085d2:	f853 6b04 	ldr.w	r6, [r3], #4
 80085d6:	f845 6f04 	str.w	r6, [r5, #4]!
 80085da:	e7eb      	b.n	80085b4 <__copybits+0x18>
 80085dc:	f840 3b04 	str.w	r3, [r0], #4
 80085e0:	e7f4      	b.n	80085cc <__copybits+0x30>

080085e2 <__any_on>:
 80085e2:	f100 0214 	add.w	r2, r0, #20
 80085e6:	6900      	ldr	r0, [r0, #16]
 80085e8:	114b      	asrs	r3, r1, #5
 80085ea:	4298      	cmp	r0, r3
 80085ec:	b510      	push	{r4, lr}
 80085ee:	db11      	blt.n	8008614 <__any_on+0x32>
 80085f0:	dd0a      	ble.n	8008608 <__any_on+0x26>
 80085f2:	f011 011f 	ands.w	r1, r1, #31
 80085f6:	d007      	beq.n	8008608 <__any_on+0x26>
 80085f8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80085fc:	fa24 f001 	lsr.w	r0, r4, r1
 8008600:	fa00 f101 	lsl.w	r1, r0, r1
 8008604:	428c      	cmp	r4, r1
 8008606:	d10b      	bne.n	8008620 <__any_on+0x3e>
 8008608:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800860c:	4293      	cmp	r3, r2
 800860e:	d803      	bhi.n	8008618 <__any_on+0x36>
 8008610:	2000      	movs	r0, #0
 8008612:	bd10      	pop	{r4, pc}
 8008614:	4603      	mov	r3, r0
 8008616:	e7f7      	b.n	8008608 <__any_on+0x26>
 8008618:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800861c:	2900      	cmp	r1, #0
 800861e:	d0f5      	beq.n	800860c <__any_on+0x2a>
 8008620:	2001      	movs	r0, #1
 8008622:	e7f6      	b.n	8008612 <__any_on+0x30>

08008624 <sulp>:
 8008624:	b570      	push	{r4, r5, r6, lr}
 8008626:	4604      	mov	r4, r0
 8008628:	460d      	mov	r5, r1
 800862a:	ec45 4b10 	vmov	d0, r4, r5
 800862e:	4616      	mov	r6, r2
 8008630:	f7ff feba 	bl	80083a8 <__ulp>
 8008634:	ec51 0b10 	vmov	r0, r1, d0
 8008638:	b17e      	cbz	r6, 800865a <sulp+0x36>
 800863a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800863e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008642:	2b00      	cmp	r3, #0
 8008644:	dd09      	ble.n	800865a <sulp+0x36>
 8008646:	051b      	lsls	r3, r3, #20
 8008648:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800864c:	2400      	movs	r4, #0
 800864e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008652:	4622      	mov	r2, r4
 8008654:	462b      	mov	r3, r5
 8008656:	f7f7 ffef 	bl	8000638 <__aeabi_dmul>
 800865a:	ec41 0b10 	vmov	d0, r0, r1
 800865e:	bd70      	pop	{r4, r5, r6, pc}

08008660 <_strtod_l>:
 8008660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008664:	b09f      	sub	sp, #124	@ 0x7c
 8008666:	460c      	mov	r4, r1
 8008668:	9217      	str	r2, [sp, #92]	@ 0x5c
 800866a:	2200      	movs	r2, #0
 800866c:	921a      	str	r2, [sp, #104]	@ 0x68
 800866e:	9005      	str	r0, [sp, #20]
 8008670:	f04f 0a00 	mov.w	sl, #0
 8008674:	f04f 0b00 	mov.w	fp, #0
 8008678:	460a      	mov	r2, r1
 800867a:	9219      	str	r2, [sp, #100]	@ 0x64
 800867c:	7811      	ldrb	r1, [r2, #0]
 800867e:	292b      	cmp	r1, #43	@ 0x2b
 8008680:	d04a      	beq.n	8008718 <_strtod_l+0xb8>
 8008682:	d838      	bhi.n	80086f6 <_strtod_l+0x96>
 8008684:	290d      	cmp	r1, #13
 8008686:	d832      	bhi.n	80086ee <_strtod_l+0x8e>
 8008688:	2908      	cmp	r1, #8
 800868a:	d832      	bhi.n	80086f2 <_strtod_l+0x92>
 800868c:	2900      	cmp	r1, #0
 800868e:	d03b      	beq.n	8008708 <_strtod_l+0xa8>
 8008690:	2200      	movs	r2, #0
 8008692:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008694:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008696:	782a      	ldrb	r2, [r5, #0]
 8008698:	2a30      	cmp	r2, #48	@ 0x30
 800869a:	f040 80b3 	bne.w	8008804 <_strtod_l+0x1a4>
 800869e:	786a      	ldrb	r2, [r5, #1]
 80086a0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80086a4:	2a58      	cmp	r2, #88	@ 0x58
 80086a6:	d16e      	bne.n	8008786 <_strtod_l+0x126>
 80086a8:	9302      	str	r3, [sp, #8]
 80086aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086ac:	9301      	str	r3, [sp, #4]
 80086ae:	ab1a      	add	r3, sp, #104	@ 0x68
 80086b0:	9300      	str	r3, [sp, #0]
 80086b2:	4a8e      	ldr	r2, [pc, #568]	@ (80088ec <_strtod_l+0x28c>)
 80086b4:	9805      	ldr	r0, [sp, #20]
 80086b6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80086b8:	a919      	add	r1, sp, #100	@ 0x64
 80086ba:	f001 faff 	bl	8009cbc <__gethex>
 80086be:	f010 060f 	ands.w	r6, r0, #15
 80086c2:	4604      	mov	r4, r0
 80086c4:	d005      	beq.n	80086d2 <_strtod_l+0x72>
 80086c6:	2e06      	cmp	r6, #6
 80086c8:	d128      	bne.n	800871c <_strtod_l+0xbc>
 80086ca:	3501      	adds	r5, #1
 80086cc:	2300      	movs	r3, #0
 80086ce:	9519      	str	r5, [sp, #100]	@ 0x64
 80086d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80086d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	f040 858e 	bne.w	80091f6 <_strtod_l+0xb96>
 80086da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086dc:	b1cb      	cbz	r3, 8008712 <_strtod_l+0xb2>
 80086de:	4652      	mov	r2, sl
 80086e0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80086e4:	ec43 2b10 	vmov	d0, r2, r3
 80086e8:	b01f      	add	sp, #124	@ 0x7c
 80086ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ee:	2920      	cmp	r1, #32
 80086f0:	d1ce      	bne.n	8008690 <_strtod_l+0x30>
 80086f2:	3201      	adds	r2, #1
 80086f4:	e7c1      	b.n	800867a <_strtod_l+0x1a>
 80086f6:	292d      	cmp	r1, #45	@ 0x2d
 80086f8:	d1ca      	bne.n	8008690 <_strtod_l+0x30>
 80086fa:	2101      	movs	r1, #1
 80086fc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80086fe:	1c51      	adds	r1, r2, #1
 8008700:	9119      	str	r1, [sp, #100]	@ 0x64
 8008702:	7852      	ldrb	r2, [r2, #1]
 8008704:	2a00      	cmp	r2, #0
 8008706:	d1c5      	bne.n	8008694 <_strtod_l+0x34>
 8008708:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800870a:	9419      	str	r4, [sp, #100]	@ 0x64
 800870c:	2b00      	cmp	r3, #0
 800870e:	f040 8570 	bne.w	80091f2 <_strtod_l+0xb92>
 8008712:	4652      	mov	r2, sl
 8008714:	465b      	mov	r3, fp
 8008716:	e7e5      	b.n	80086e4 <_strtod_l+0x84>
 8008718:	2100      	movs	r1, #0
 800871a:	e7ef      	b.n	80086fc <_strtod_l+0x9c>
 800871c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800871e:	b13a      	cbz	r2, 8008730 <_strtod_l+0xd0>
 8008720:	2135      	movs	r1, #53	@ 0x35
 8008722:	a81c      	add	r0, sp, #112	@ 0x70
 8008724:	f7ff ff3a 	bl	800859c <__copybits>
 8008728:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800872a:	9805      	ldr	r0, [sp, #20]
 800872c:	f7ff fb08 	bl	8007d40 <_Bfree>
 8008730:	3e01      	subs	r6, #1
 8008732:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008734:	2e04      	cmp	r6, #4
 8008736:	d806      	bhi.n	8008746 <_strtod_l+0xe6>
 8008738:	e8df f006 	tbb	[pc, r6]
 800873c:	201d0314 	.word	0x201d0314
 8008740:	14          	.byte	0x14
 8008741:	00          	.byte	0x00
 8008742:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008746:	05e1      	lsls	r1, r4, #23
 8008748:	bf48      	it	mi
 800874a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800874e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008752:	0d1b      	lsrs	r3, r3, #20
 8008754:	051b      	lsls	r3, r3, #20
 8008756:	2b00      	cmp	r3, #0
 8008758:	d1bb      	bne.n	80086d2 <_strtod_l+0x72>
 800875a:	f7fe fb2f 	bl	8006dbc <__errno>
 800875e:	2322      	movs	r3, #34	@ 0x22
 8008760:	6003      	str	r3, [r0, #0]
 8008762:	e7b6      	b.n	80086d2 <_strtod_l+0x72>
 8008764:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008768:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800876c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008770:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008774:	e7e7      	b.n	8008746 <_strtod_l+0xe6>
 8008776:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80088f4 <_strtod_l+0x294>
 800877a:	e7e4      	b.n	8008746 <_strtod_l+0xe6>
 800877c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008780:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008784:	e7df      	b.n	8008746 <_strtod_l+0xe6>
 8008786:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008788:	1c5a      	adds	r2, r3, #1
 800878a:	9219      	str	r2, [sp, #100]	@ 0x64
 800878c:	785b      	ldrb	r3, [r3, #1]
 800878e:	2b30      	cmp	r3, #48	@ 0x30
 8008790:	d0f9      	beq.n	8008786 <_strtod_l+0x126>
 8008792:	2b00      	cmp	r3, #0
 8008794:	d09d      	beq.n	80086d2 <_strtod_l+0x72>
 8008796:	2301      	movs	r3, #1
 8008798:	9309      	str	r3, [sp, #36]	@ 0x24
 800879a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800879c:	930c      	str	r3, [sp, #48]	@ 0x30
 800879e:	2300      	movs	r3, #0
 80087a0:	9308      	str	r3, [sp, #32]
 80087a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80087a4:	461f      	mov	r7, r3
 80087a6:	220a      	movs	r2, #10
 80087a8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80087aa:	7805      	ldrb	r5, [r0, #0]
 80087ac:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80087b0:	b2d9      	uxtb	r1, r3
 80087b2:	2909      	cmp	r1, #9
 80087b4:	d928      	bls.n	8008808 <_strtod_l+0x1a8>
 80087b6:	494e      	ldr	r1, [pc, #312]	@ (80088f0 <_strtod_l+0x290>)
 80087b8:	2201      	movs	r2, #1
 80087ba:	f001 f9ab 	bl	8009b14 <strncmp>
 80087be:	2800      	cmp	r0, #0
 80087c0:	d032      	beq.n	8008828 <_strtod_l+0x1c8>
 80087c2:	2000      	movs	r0, #0
 80087c4:	462a      	mov	r2, r5
 80087c6:	4681      	mov	r9, r0
 80087c8:	463d      	mov	r5, r7
 80087ca:	4603      	mov	r3, r0
 80087cc:	2a65      	cmp	r2, #101	@ 0x65
 80087ce:	d001      	beq.n	80087d4 <_strtod_l+0x174>
 80087d0:	2a45      	cmp	r2, #69	@ 0x45
 80087d2:	d114      	bne.n	80087fe <_strtod_l+0x19e>
 80087d4:	b91d      	cbnz	r5, 80087de <_strtod_l+0x17e>
 80087d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087d8:	4302      	orrs	r2, r0
 80087da:	d095      	beq.n	8008708 <_strtod_l+0xa8>
 80087dc:	2500      	movs	r5, #0
 80087de:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80087e0:	1c62      	adds	r2, r4, #1
 80087e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80087e4:	7862      	ldrb	r2, [r4, #1]
 80087e6:	2a2b      	cmp	r2, #43	@ 0x2b
 80087e8:	d077      	beq.n	80088da <_strtod_l+0x27a>
 80087ea:	2a2d      	cmp	r2, #45	@ 0x2d
 80087ec:	d07b      	beq.n	80088e6 <_strtod_l+0x286>
 80087ee:	f04f 0c00 	mov.w	ip, #0
 80087f2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80087f6:	2909      	cmp	r1, #9
 80087f8:	f240 8082 	bls.w	8008900 <_strtod_l+0x2a0>
 80087fc:	9419      	str	r4, [sp, #100]	@ 0x64
 80087fe:	f04f 0800 	mov.w	r8, #0
 8008802:	e0a2      	b.n	800894a <_strtod_l+0x2ea>
 8008804:	2300      	movs	r3, #0
 8008806:	e7c7      	b.n	8008798 <_strtod_l+0x138>
 8008808:	2f08      	cmp	r7, #8
 800880a:	bfd5      	itete	le
 800880c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800880e:	9908      	ldrgt	r1, [sp, #32]
 8008810:	fb02 3301 	mlale	r3, r2, r1, r3
 8008814:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008818:	f100 0001 	add.w	r0, r0, #1
 800881c:	bfd4      	ite	le
 800881e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008820:	9308      	strgt	r3, [sp, #32]
 8008822:	3701      	adds	r7, #1
 8008824:	9019      	str	r0, [sp, #100]	@ 0x64
 8008826:	e7bf      	b.n	80087a8 <_strtod_l+0x148>
 8008828:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800882a:	1c5a      	adds	r2, r3, #1
 800882c:	9219      	str	r2, [sp, #100]	@ 0x64
 800882e:	785a      	ldrb	r2, [r3, #1]
 8008830:	b37f      	cbz	r7, 8008892 <_strtod_l+0x232>
 8008832:	4681      	mov	r9, r0
 8008834:	463d      	mov	r5, r7
 8008836:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800883a:	2b09      	cmp	r3, #9
 800883c:	d912      	bls.n	8008864 <_strtod_l+0x204>
 800883e:	2301      	movs	r3, #1
 8008840:	e7c4      	b.n	80087cc <_strtod_l+0x16c>
 8008842:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008844:	1c5a      	adds	r2, r3, #1
 8008846:	9219      	str	r2, [sp, #100]	@ 0x64
 8008848:	785a      	ldrb	r2, [r3, #1]
 800884a:	3001      	adds	r0, #1
 800884c:	2a30      	cmp	r2, #48	@ 0x30
 800884e:	d0f8      	beq.n	8008842 <_strtod_l+0x1e2>
 8008850:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008854:	2b08      	cmp	r3, #8
 8008856:	f200 84d3 	bhi.w	8009200 <_strtod_l+0xba0>
 800885a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800885c:	930c      	str	r3, [sp, #48]	@ 0x30
 800885e:	4681      	mov	r9, r0
 8008860:	2000      	movs	r0, #0
 8008862:	4605      	mov	r5, r0
 8008864:	3a30      	subs	r2, #48	@ 0x30
 8008866:	f100 0301 	add.w	r3, r0, #1
 800886a:	d02a      	beq.n	80088c2 <_strtod_l+0x262>
 800886c:	4499      	add	r9, r3
 800886e:	eb00 0c05 	add.w	ip, r0, r5
 8008872:	462b      	mov	r3, r5
 8008874:	210a      	movs	r1, #10
 8008876:	4563      	cmp	r3, ip
 8008878:	d10d      	bne.n	8008896 <_strtod_l+0x236>
 800887a:	1c69      	adds	r1, r5, #1
 800887c:	4401      	add	r1, r0
 800887e:	4428      	add	r0, r5
 8008880:	2808      	cmp	r0, #8
 8008882:	dc16      	bgt.n	80088b2 <_strtod_l+0x252>
 8008884:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008886:	230a      	movs	r3, #10
 8008888:	fb03 2300 	mla	r3, r3, r0, r2
 800888c:	930a      	str	r3, [sp, #40]	@ 0x28
 800888e:	2300      	movs	r3, #0
 8008890:	e018      	b.n	80088c4 <_strtod_l+0x264>
 8008892:	4638      	mov	r0, r7
 8008894:	e7da      	b.n	800884c <_strtod_l+0x1ec>
 8008896:	2b08      	cmp	r3, #8
 8008898:	f103 0301 	add.w	r3, r3, #1
 800889c:	dc03      	bgt.n	80088a6 <_strtod_l+0x246>
 800889e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80088a0:	434e      	muls	r6, r1
 80088a2:	960a      	str	r6, [sp, #40]	@ 0x28
 80088a4:	e7e7      	b.n	8008876 <_strtod_l+0x216>
 80088a6:	2b10      	cmp	r3, #16
 80088a8:	bfde      	ittt	le
 80088aa:	9e08      	ldrle	r6, [sp, #32]
 80088ac:	434e      	mulle	r6, r1
 80088ae:	9608      	strle	r6, [sp, #32]
 80088b0:	e7e1      	b.n	8008876 <_strtod_l+0x216>
 80088b2:	280f      	cmp	r0, #15
 80088b4:	dceb      	bgt.n	800888e <_strtod_l+0x22e>
 80088b6:	9808      	ldr	r0, [sp, #32]
 80088b8:	230a      	movs	r3, #10
 80088ba:	fb03 2300 	mla	r3, r3, r0, r2
 80088be:	9308      	str	r3, [sp, #32]
 80088c0:	e7e5      	b.n	800888e <_strtod_l+0x22e>
 80088c2:	4629      	mov	r1, r5
 80088c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80088c6:	1c50      	adds	r0, r2, #1
 80088c8:	9019      	str	r0, [sp, #100]	@ 0x64
 80088ca:	7852      	ldrb	r2, [r2, #1]
 80088cc:	4618      	mov	r0, r3
 80088ce:	460d      	mov	r5, r1
 80088d0:	e7b1      	b.n	8008836 <_strtod_l+0x1d6>
 80088d2:	f04f 0900 	mov.w	r9, #0
 80088d6:	2301      	movs	r3, #1
 80088d8:	e77d      	b.n	80087d6 <_strtod_l+0x176>
 80088da:	f04f 0c00 	mov.w	ip, #0
 80088de:	1ca2      	adds	r2, r4, #2
 80088e0:	9219      	str	r2, [sp, #100]	@ 0x64
 80088e2:	78a2      	ldrb	r2, [r4, #2]
 80088e4:	e785      	b.n	80087f2 <_strtod_l+0x192>
 80088e6:	f04f 0c01 	mov.w	ip, #1
 80088ea:	e7f8      	b.n	80088de <_strtod_l+0x27e>
 80088ec:	0800b7c8 	.word	0x0800b7c8
 80088f0:	0800b7b0 	.word	0x0800b7b0
 80088f4:	7ff00000 	.word	0x7ff00000
 80088f8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80088fa:	1c51      	adds	r1, r2, #1
 80088fc:	9119      	str	r1, [sp, #100]	@ 0x64
 80088fe:	7852      	ldrb	r2, [r2, #1]
 8008900:	2a30      	cmp	r2, #48	@ 0x30
 8008902:	d0f9      	beq.n	80088f8 <_strtod_l+0x298>
 8008904:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008908:	2908      	cmp	r1, #8
 800890a:	f63f af78 	bhi.w	80087fe <_strtod_l+0x19e>
 800890e:	3a30      	subs	r2, #48	@ 0x30
 8008910:	920e      	str	r2, [sp, #56]	@ 0x38
 8008912:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008914:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008916:	f04f 080a 	mov.w	r8, #10
 800891a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800891c:	1c56      	adds	r6, r2, #1
 800891e:	9619      	str	r6, [sp, #100]	@ 0x64
 8008920:	7852      	ldrb	r2, [r2, #1]
 8008922:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008926:	f1be 0f09 	cmp.w	lr, #9
 800892a:	d939      	bls.n	80089a0 <_strtod_l+0x340>
 800892c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800892e:	1a76      	subs	r6, r6, r1
 8008930:	2e08      	cmp	r6, #8
 8008932:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008936:	dc03      	bgt.n	8008940 <_strtod_l+0x2e0>
 8008938:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800893a:	4588      	cmp	r8, r1
 800893c:	bfa8      	it	ge
 800893e:	4688      	movge	r8, r1
 8008940:	f1bc 0f00 	cmp.w	ip, #0
 8008944:	d001      	beq.n	800894a <_strtod_l+0x2ea>
 8008946:	f1c8 0800 	rsb	r8, r8, #0
 800894a:	2d00      	cmp	r5, #0
 800894c:	d14e      	bne.n	80089ec <_strtod_l+0x38c>
 800894e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008950:	4308      	orrs	r0, r1
 8008952:	f47f aebe 	bne.w	80086d2 <_strtod_l+0x72>
 8008956:	2b00      	cmp	r3, #0
 8008958:	f47f aed6 	bne.w	8008708 <_strtod_l+0xa8>
 800895c:	2a69      	cmp	r2, #105	@ 0x69
 800895e:	d028      	beq.n	80089b2 <_strtod_l+0x352>
 8008960:	dc25      	bgt.n	80089ae <_strtod_l+0x34e>
 8008962:	2a49      	cmp	r2, #73	@ 0x49
 8008964:	d025      	beq.n	80089b2 <_strtod_l+0x352>
 8008966:	2a4e      	cmp	r2, #78	@ 0x4e
 8008968:	f47f aece 	bne.w	8008708 <_strtod_l+0xa8>
 800896c:	499b      	ldr	r1, [pc, #620]	@ (8008bdc <_strtod_l+0x57c>)
 800896e:	a819      	add	r0, sp, #100	@ 0x64
 8008970:	f001 fbc6 	bl	800a100 <__match>
 8008974:	2800      	cmp	r0, #0
 8008976:	f43f aec7 	beq.w	8008708 <_strtod_l+0xa8>
 800897a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	2b28      	cmp	r3, #40	@ 0x28
 8008980:	d12e      	bne.n	80089e0 <_strtod_l+0x380>
 8008982:	4997      	ldr	r1, [pc, #604]	@ (8008be0 <_strtod_l+0x580>)
 8008984:	aa1c      	add	r2, sp, #112	@ 0x70
 8008986:	a819      	add	r0, sp, #100	@ 0x64
 8008988:	f001 fbce 	bl	800a128 <__hexnan>
 800898c:	2805      	cmp	r0, #5
 800898e:	d127      	bne.n	80089e0 <_strtod_l+0x380>
 8008990:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008992:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008996:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800899a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800899e:	e698      	b.n	80086d2 <_strtod_l+0x72>
 80089a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80089a2:	fb08 2101 	mla	r1, r8, r1, r2
 80089a6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80089aa:	920e      	str	r2, [sp, #56]	@ 0x38
 80089ac:	e7b5      	b.n	800891a <_strtod_l+0x2ba>
 80089ae:	2a6e      	cmp	r2, #110	@ 0x6e
 80089b0:	e7da      	b.n	8008968 <_strtod_l+0x308>
 80089b2:	498c      	ldr	r1, [pc, #560]	@ (8008be4 <_strtod_l+0x584>)
 80089b4:	a819      	add	r0, sp, #100	@ 0x64
 80089b6:	f001 fba3 	bl	800a100 <__match>
 80089ba:	2800      	cmp	r0, #0
 80089bc:	f43f aea4 	beq.w	8008708 <_strtod_l+0xa8>
 80089c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80089c2:	4989      	ldr	r1, [pc, #548]	@ (8008be8 <_strtod_l+0x588>)
 80089c4:	3b01      	subs	r3, #1
 80089c6:	a819      	add	r0, sp, #100	@ 0x64
 80089c8:	9319      	str	r3, [sp, #100]	@ 0x64
 80089ca:	f001 fb99 	bl	800a100 <__match>
 80089ce:	b910      	cbnz	r0, 80089d6 <_strtod_l+0x376>
 80089d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80089d2:	3301      	adds	r3, #1
 80089d4:	9319      	str	r3, [sp, #100]	@ 0x64
 80089d6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008bf8 <_strtod_l+0x598>
 80089da:	f04f 0a00 	mov.w	sl, #0
 80089de:	e678      	b.n	80086d2 <_strtod_l+0x72>
 80089e0:	4882      	ldr	r0, [pc, #520]	@ (8008bec <_strtod_l+0x58c>)
 80089e2:	f001 f8c9 	bl	8009b78 <nan>
 80089e6:	ec5b ab10 	vmov	sl, fp, d0
 80089ea:	e672      	b.n	80086d2 <_strtod_l+0x72>
 80089ec:	eba8 0309 	sub.w	r3, r8, r9
 80089f0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80089f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80089f4:	2f00      	cmp	r7, #0
 80089f6:	bf08      	it	eq
 80089f8:	462f      	moveq	r7, r5
 80089fa:	2d10      	cmp	r5, #16
 80089fc:	462c      	mov	r4, r5
 80089fe:	bfa8      	it	ge
 8008a00:	2410      	movge	r4, #16
 8008a02:	f7f7 fd9f 	bl	8000544 <__aeabi_ui2d>
 8008a06:	2d09      	cmp	r5, #9
 8008a08:	4682      	mov	sl, r0
 8008a0a:	468b      	mov	fp, r1
 8008a0c:	dc13      	bgt.n	8008a36 <_strtod_l+0x3d6>
 8008a0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	f43f ae5e 	beq.w	80086d2 <_strtod_l+0x72>
 8008a16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a18:	dd78      	ble.n	8008b0c <_strtod_l+0x4ac>
 8008a1a:	2b16      	cmp	r3, #22
 8008a1c:	dc5f      	bgt.n	8008ade <_strtod_l+0x47e>
 8008a1e:	4974      	ldr	r1, [pc, #464]	@ (8008bf0 <_strtod_l+0x590>)
 8008a20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008a24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a28:	4652      	mov	r2, sl
 8008a2a:	465b      	mov	r3, fp
 8008a2c:	f7f7 fe04 	bl	8000638 <__aeabi_dmul>
 8008a30:	4682      	mov	sl, r0
 8008a32:	468b      	mov	fp, r1
 8008a34:	e64d      	b.n	80086d2 <_strtod_l+0x72>
 8008a36:	4b6e      	ldr	r3, [pc, #440]	@ (8008bf0 <_strtod_l+0x590>)
 8008a38:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008a3c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008a40:	f7f7 fdfa 	bl	8000638 <__aeabi_dmul>
 8008a44:	4682      	mov	sl, r0
 8008a46:	9808      	ldr	r0, [sp, #32]
 8008a48:	468b      	mov	fp, r1
 8008a4a:	f7f7 fd7b 	bl	8000544 <__aeabi_ui2d>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	460b      	mov	r3, r1
 8008a52:	4650      	mov	r0, sl
 8008a54:	4659      	mov	r1, fp
 8008a56:	f7f7 fc39 	bl	80002cc <__adddf3>
 8008a5a:	2d0f      	cmp	r5, #15
 8008a5c:	4682      	mov	sl, r0
 8008a5e:	468b      	mov	fp, r1
 8008a60:	ddd5      	ble.n	8008a0e <_strtod_l+0x3ae>
 8008a62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a64:	1b2c      	subs	r4, r5, r4
 8008a66:	441c      	add	r4, r3
 8008a68:	2c00      	cmp	r4, #0
 8008a6a:	f340 8096 	ble.w	8008b9a <_strtod_l+0x53a>
 8008a6e:	f014 030f 	ands.w	r3, r4, #15
 8008a72:	d00a      	beq.n	8008a8a <_strtod_l+0x42a>
 8008a74:	495e      	ldr	r1, [pc, #376]	@ (8008bf0 <_strtod_l+0x590>)
 8008a76:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008a7a:	4652      	mov	r2, sl
 8008a7c:	465b      	mov	r3, fp
 8008a7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a82:	f7f7 fdd9 	bl	8000638 <__aeabi_dmul>
 8008a86:	4682      	mov	sl, r0
 8008a88:	468b      	mov	fp, r1
 8008a8a:	f034 040f 	bics.w	r4, r4, #15
 8008a8e:	d073      	beq.n	8008b78 <_strtod_l+0x518>
 8008a90:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008a94:	dd48      	ble.n	8008b28 <_strtod_l+0x4c8>
 8008a96:	2400      	movs	r4, #0
 8008a98:	46a0      	mov	r8, r4
 8008a9a:	940a      	str	r4, [sp, #40]	@ 0x28
 8008a9c:	46a1      	mov	r9, r4
 8008a9e:	9a05      	ldr	r2, [sp, #20]
 8008aa0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008bf8 <_strtod_l+0x598>
 8008aa4:	2322      	movs	r3, #34	@ 0x22
 8008aa6:	6013      	str	r3, [r2, #0]
 8008aa8:	f04f 0a00 	mov.w	sl, #0
 8008aac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	f43f ae0f 	beq.w	80086d2 <_strtod_l+0x72>
 8008ab4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008ab6:	9805      	ldr	r0, [sp, #20]
 8008ab8:	f7ff f942 	bl	8007d40 <_Bfree>
 8008abc:	9805      	ldr	r0, [sp, #20]
 8008abe:	4649      	mov	r1, r9
 8008ac0:	f7ff f93e 	bl	8007d40 <_Bfree>
 8008ac4:	9805      	ldr	r0, [sp, #20]
 8008ac6:	4641      	mov	r1, r8
 8008ac8:	f7ff f93a 	bl	8007d40 <_Bfree>
 8008acc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008ace:	9805      	ldr	r0, [sp, #20]
 8008ad0:	f7ff f936 	bl	8007d40 <_Bfree>
 8008ad4:	9805      	ldr	r0, [sp, #20]
 8008ad6:	4621      	mov	r1, r4
 8008ad8:	f7ff f932 	bl	8007d40 <_Bfree>
 8008adc:	e5f9      	b.n	80086d2 <_strtod_l+0x72>
 8008ade:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ae0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	dbbc      	blt.n	8008a62 <_strtod_l+0x402>
 8008ae8:	4c41      	ldr	r4, [pc, #260]	@ (8008bf0 <_strtod_l+0x590>)
 8008aea:	f1c5 050f 	rsb	r5, r5, #15
 8008aee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008af2:	4652      	mov	r2, sl
 8008af4:	465b      	mov	r3, fp
 8008af6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008afa:	f7f7 fd9d 	bl	8000638 <__aeabi_dmul>
 8008afe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b00:	1b5d      	subs	r5, r3, r5
 8008b02:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008b06:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008b0a:	e78f      	b.n	8008a2c <_strtod_l+0x3cc>
 8008b0c:	3316      	adds	r3, #22
 8008b0e:	dba8      	blt.n	8008a62 <_strtod_l+0x402>
 8008b10:	4b37      	ldr	r3, [pc, #220]	@ (8008bf0 <_strtod_l+0x590>)
 8008b12:	eba9 0808 	sub.w	r8, r9, r8
 8008b16:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008b1a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008b1e:	4650      	mov	r0, sl
 8008b20:	4659      	mov	r1, fp
 8008b22:	f7f7 feb3 	bl	800088c <__aeabi_ddiv>
 8008b26:	e783      	b.n	8008a30 <_strtod_l+0x3d0>
 8008b28:	4b32      	ldr	r3, [pc, #200]	@ (8008bf4 <_strtod_l+0x594>)
 8008b2a:	9308      	str	r3, [sp, #32]
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	1124      	asrs	r4, r4, #4
 8008b30:	4650      	mov	r0, sl
 8008b32:	4659      	mov	r1, fp
 8008b34:	461e      	mov	r6, r3
 8008b36:	2c01      	cmp	r4, #1
 8008b38:	dc21      	bgt.n	8008b7e <_strtod_l+0x51e>
 8008b3a:	b10b      	cbz	r3, 8008b40 <_strtod_l+0x4e0>
 8008b3c:	4682      	mov	sl, r0
 8008b3e:	468b      	mov	fp, r1
 8008b40:	492c      	ldr	r1, [pc, #176]	@ (8008bf4 <_strtod_l+0x594>)
 8008b42:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008b46:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008b4a:	4652      	mov	r2, sl
 8008b4c:	465b      	mov	r3, fp
 8008b4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b52:	f7f7 fd71 	bl	8000638 <__aeabi_dmul>
 8008b56:	4b28      	ldr	r3, [pc, #160]	@ (8008bf8 <_strtod_l+0x598>)
 8008b58:	460a      	mov	r2, r1
 8008b5a:	400b      	ands	r3, r1
 8008b5c:	4927      	ldr	r1, [pc, #156]	@ (8008bfc <_strtod_l+0x59c>)
 8008b5e:	428b      	cmp	r3, r1
 8008b60:	4682      	mov	sl, r0
 8008b62:	d898      	bhi.n	8008a96 <_strtod_l+0x436>
 8008b64:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008b68:	428b      	cmp	r3, r1
 8008b6a:	bf86      	itte	hi
 8008b6c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008c00 <_strtod_l+0x5a0>
 8008b70:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8008b74:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008b78:	2300      	movs	r3, #0
 8008b7a:	9308      	str	r3, [sp, #32]
 8008b7c:	e07a      	b.n	8008c74 <_strtod_l+0x614>
 8008b7e:	07e2      	lsls	r2, r4, #31
 8008b80:	d505      	bpl.n	8008b8e <_strtod_l+0x52e>
 8008b82:	9b08      	ldr	r3, [sp, #32]
 8008b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b88:	f7f7 fd56 	bl	8000638 <__aeabi_dmul>
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	9a08      	ldr	r2, [sp, #32]
 8008b90:	3208      	adds	r2, #8
 8008b92:	3601      	adds	r6, #1
 8008b94:	1064      	asrs	r4, r4, #1
 8008b96:	9208      	str	r2, [sp, #32]
 8008b98:	e7cd      	b.n	8008b36 <_strtod_l+0x4d6>
 8008b9a:	d0ed      	beq.n	8008b78 <_strtod_l+0x518>
 8008b9c:	4264      	negs	r4, r4
 8008b9e:	f014 020f 	ands.w	r2, r4, #15
 8008ba2:	d00a      	beq.n	8008bba <_strtod_l+0x55a>
 8008ba4:	4b12      	ldr	r3, [pc, #72]	@ (8008bf0 <_strtod_l+0x590>)
 8008ba6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008baa:	4650      	mov	r0, sl
 8008bac:	4659      	mov	r1, fp
 8008bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb2:	f7f7 fe6b 	bl	800088c <__aeabi_ddiv>
 8008bb6:	4682      	mov	sl, r0
 8008bb8:	468b      	mov	fp, r1
 8008bba:	1124      	asrs	r4, r4, #4
 8008bbc:	d0dc      	beq.n	8008b78 <_strtod_l+0x518>
 8008bbe:	2c1f      	cmp	r4, #31
 8008bc0:	dd20      	ble.n	8008c04 <_strtod_l+0x5a4>
 8008bc2:	2400      	movs	r4, #0
 8008bc4:	46a0      	mov	r8, r4
 8008bc6:	940a      	str	r4, [sp, #40]	@ 0x28
 8008bc8:	46a1      	mov	r9, r4
 8008bca:	9a05      	ldr	r2, [sp, #20]
 8008bcc:	2322      	movs	r3, #34	@ 0x22
 8008bce:	f04f 0a00 	mov.w	sl, #0
 8008bd2:	f04f 0b00 	mov.w	fp, #0
 8008bd6:	6013      	str	r3, [r2, #0]
 8008bd8:	e768      	b.n	8008aac <_strtod_l+0x44c>
 8008bda:	bf00      	nop
 8008bdc:	0800b5a1 	.word	0x0800b5a1
 8008be0:	0800b7b4 	.word	0x0800b7b4
 8008be4:	0800b599 	.word	0x0800b599
 8008be8:	0800b5d0 	.word	0x0800b5d0
 8008bec:	0800b95d 	.word	0x0800b95d
 8008bf0:	0800b6e8 	.word	0x0800b6e8
 8008bf4:	0800b6c0 	.word	0x0800b6c0
 8008bf8:	7ff00000 	.word	0x7ff00000
 8008bfc:	7ca00000 	.word	0x7ca00000
 8008c00:	7fefffff 	.word	0x7fefffff
 8008c04:	f014 0310 	ands.w	r3, r4, #16
 8008c08:	bf18      	it	ne
 8008c0a:	236a      	movne	r3, #106	@ 0x6a
 8008c0c:	4ea9      	ldr	r6, [pc, #676]	@ (8008eb4 <_strtod_l+0x854>)
 8008c0e:	9308      	str	r3, [sp, #32]
 8008c10:	4650      	mov	r0, sl
 8008c12:	4659      	mov	r1, fp
 8008c14:	2300      	movs	r3, #0
 8008c16:	07e2      	lsls	r2, r4, #31
 8008c18:	d504      	bpl.n	8008c24 <_strtod_l+0x5c4>
 8008c1a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008c1e:	f7f7 fd0b 	bl	8000638 <__aeabi_dmul>
 8008c22:	2301      	movs	r3, #1
 8008c24:	1064      	asrs	r4, r4, #1
 8008c26:	f106 0608 	add.w	r6, r6, #8
 8008c2a:	d1f4      	bne.n	8008c16 <_strtod_l+0x5b6>
 8008c2c:	b10b      	cbz	r3, 8008c32 <_strtod_l+0x5d2>
 8008c2e:	4682      	mov	sl, r0
 8008c30:	468b      	mov	fp, r1
 8008c32:	9b08      	ldr	r3, [sp, #32]
 8008c34:	b1b3      	cbz	r3, 8008c64 <_strtod_l+0x604>
 8008c36:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008c3a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	4659      	mov	r1, fp
 8008c42:	dd0f      	ble.n	8008c64 <_strtod_l+0x604>
 8008c44:	2b1f      	cmp	r3, #31
 8008c46:	dd55      	ble.n	8008cf4 <_strtod_l+0x694>
 8008c48:	2b34      	cmp	r3, #52	@ 0x34
 8008c4a:	bfde      	ittt	le
 8008c4c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8008c50:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008c54:	4093      	lslle	r3, r2
 8008c56:	f04f 0a00 	mov.w	sl, #0
 8008c5a:	bfcc      	ite	gt
 8008c5c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008c60:	ea03 0b01 	andle.w	fp, r3, r1
 8008c64:	2200      	movs	r2, #0
 8008c66:	2300      	movs	r3, #0
 8008c68:	4650      	mov	r0, sl
 8008c6a:	4659      	mov	r1, fp
 8008c6c:	f7f7 ff4c 	bl	8000b08 <__aeabi_dcmpeq>
 8008c70:	2800      	cmp	r0, #0
 8008c72:	d1a6      	bne.n	8008bc2 <_strtod_l+0x562>
 8008c74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c76:	9300      	str	r3, [sp, #0]
 8008c78:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008c7a:	9805      	ldr	r0, [sp, #20]
 8008c7c:	462b      	mov	r3, r5
 8008c7e:	463a      	mov	r2, r7
 8008c80:	f7ff f8c6 	bl	8007e10 <__s2b>
 8008c84:	900a      	str	r0, [sp, #40]	@ 0x28
 8008c86:	2800      	cmp	r0, #0
 8008c88:	f43f af05 	beq.w	8008a96 <_strtod_l+0x436>
 8008c8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c8e:	2a00      	cmp	r2, #0
 8008c90:	eba9 0308 	sub.w	r3, r9, r8
 8008c94:	bfa8      	it	ge
 8008c96:	2300      	movge	r3, #0
 8008c98:	9312      	str	r3, [sp, #72]	@ 0x48
 8008c9a:	2400      	movs	r4, #0
 8008c9c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008ca0:	9316      	str	r3, [sp, #88]	@ 0x58
 8008ca2:	46a0      	mov	r8, r4
 8008ca4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ca6:	9805      	ldr	r0, [sp, #20]
 8008ca8:	6859      	ldr	r1, [r3, #4]
 8008caa:	f7ff f809 	bl	8007cc0 <_Balloc>
 8008cae:	4681      	mov	r9, r0
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	f43f aef4 	beq.w	8008a9e <_strtod_l+0x43e>
 8008cb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008cb8:	691a      	ldr	r2, [r3, #16]
 8008cba:	3202      	adds	r2, #2
 8008cbc:	f103 010c 	add.w	r1, r3, #12
 8008cc0:	0092      	lsls	r2, r2, #2
 8008cc2:	300c      	adds	r0, #12
 8008cc4:	f000 ff48 	bl	8009b58 <memcpy>
 8008cc8:	ec4b ab10 	vmov	d0, sl, fp
 8008ccc:	9805      	ldr	r0, [sp, #20]
 8008cce:	aa1c      	add	r2, sp, #112	@ 0x70
 8008cd0:	a91b      	add	r1, sp, #108	@ 0x6c
 8008cd2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008cd6:	f7ff fbd7 	bl	8008488 <__d2b>
 8008cda:	901a      	str	r0, [sp, #104]	@ 0x68
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	f43f aede 	beq.w	8008a9e <_strtod_l+0x43e>
 8008ce2:	9805      	ldr	r0, [sp, #20]
 8008ce4:	2101      	movs	r1, #1
 8008ce6:	f7ff f929 	bl	8007f3c <__i2b>
 8008cea:	4680      	mov	r8, r0
 8008cec:	b948      	cbnz	r0, 8008d02 <_strtod_l+0x6a2>
 8008cee:	f04f 0800 	mov.w	r8, #0
 8008cf2:	e6d4      	b.n	8008a9e <_strtod_l+0x43e>
 8008cf4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8008cfc:	ea03 0a0a 	and.w	sl, r3, sl
 8008d00:	e7b0      	b.n	8008c64 <_strtod_l+0x604>
 8008d02:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008d04:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008d06:	2d00      	cmp	r5, #0
 8008d08:	bfab      	itete	ge
 8008d0a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008d0c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008d0e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008d10:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008d12:	bfac      	ite	ge
 8008d14:	18ef      	addge	r7, r5, r3
 8008d16:	1b5e      	sublt	r6, r3, r5
 8008d18:	9b08      	ldr	r3, [sp, #32]
 8008d1a:	1aed      	subs	r5, r5, r3
 8008d1c:	4415      	add	r5, r2
 8008d1e:	4b66      	ldr	r3, [pc, #408]	@ (8008eb8 <_strtod_l+0x858>)
 8008d20:	3d01      	subs	r5, #1
 8008d22:	429d      	cmp	r5, r3
 8008d24:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008d28:	da50      	bge.n	8008dcc <_strtod_l+0x76c>
 8008d2a:	1b5b      	subs	r3, r3, r5
 8008d2c:	2b1f      	cmp	r3, #31
 8008d2e:	eba2 0203 	sub.w	r2, r2, r3
 8008d32:	f04f 0101 	mov.w	r1, #1
 8008d36:	dc3d      	bgt.n	8008db4 <_strtod_l+0x754>
 8008d38:	fa01 f303 	lsl.w	r3, r1, r3
 8008d3c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008d3e:	2300      	movs	r3, #0
 8008d40:	9310      	str	r3, [sp, #64]	@ 0x40
 8008d42:	18bd      	adds	r5, r7, r2
 8008d44:	9b08      	ldr	r3, [sp, #32]
 8008d46:	42af      	cmp	r7, r5
 8008d48:	4416      	add	r6, r2
 8008d4a:	441e      	add	r6, r3
 8008d4c:	463b      	mov	r3, r7
 8008d4e:	bfa8      	it	ge
 8008d50:	462b      	movge	r3, r5
 8008d52:	42b3      	cmp	r3, r6
 8008d54:	bfa8      	it	ge
 8008d56:	4633      	movge	r3, r6
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	bfc2      	ittt	gt
 8008d5c:	1aed      	subgt	r5, r5, r3
 8008d5e:	1af6      	subgt	r6, r6, r3
 8008d60:	1aff      	subgt	r7, r7, r3
 8008d62:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	dd16      	ble.n	8008d96 <_strtod_l+0x736>
 8008d68:	4641      	mov	r1, r8
 8008d6a:	9805      	ldr	r0, [sp, #20]
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	f7ff f9a5 	bl	80080bc <__pow5mult>
 8008d72:	4680      	mov	r8, r0
 8008d74:	2800      	cmp	r0, #0
 8008d76:	d0ba      	beq.n	8008cee <_strtod_l+0x68e>
 8008d78:	4601      	mov	r1, r0
 8008d7a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008d7c:	9805      	ldr	r0, [sp, #20]
 8008d7e:	f7ff f8f3 	bl	8007f68 <__multiply>
 8008d82:	900e      	str	r0, [sp, #56]	@ 0x38
 8008d84:	2800      	cmp	r0, #0
 8008d86:	f43f ae8a 	beq.w	8008a9e <_strtod_l+0x43e>
 8008d8a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008d8c:	9805      	ldr	r0, [sp, #20]
 8008d8e:	f7fe ffd7 	bl	8007d40 <_Bfree>
 8008d92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d94:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d96:	2d00      	cmp	r5, #0
 8008d98:	dc1d      	bgt.n	8008dd6 <_strtod_l+0x776>
 8008d9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	dd23      	ble.n	8008de8 <_strtod_l+0x788>
 8008da0:	4649      	mov	r1, r9
 8008da2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008da4:	9805      	ldr	r0, [sp, #20]
 8008da6:	f7ff f989 	bl	80080bc <__pow5mult>
 8008daa:	4681      	mov	r9, r0
 8008dac:	b9e0      	cbnz	r0, 8008de8 <_strtod_l+0x788>
 8008dae:	f04f 0900 	mov.w	r9, #0
 8008db2:	e674      	b.n	8008a9e <_strtod_l+0x43e>
 8008db4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008db8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008dbc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008dc0:	35e2      	adds	r5, #226	@ 0xe2
 8008dc2:	fa01 f305 	lsl.w	r3, r1, r5
 8008dc6:	9310      	str	r3, [sp, #64]	@ 0x40
 8008dc8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008dca:	e7ba      	b.n	8008d42 <_strtod_l+0x6e2>
 8008dcc:	2300      	movs	r3, #0
 8008dce:	9310      	str	r3, [sp, #64]	@ 0x40
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008dd4:	e7b5      	b.n	8008d42 <_strtod_l+0x6e2>
 8008dd6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008dd8:	9805      	ldr	r0, [sp, #20]
 8008dda:	462a      	mov	r2, r5
 8008ddc:	f7ff f9c8 	bl	8008170 <__lshift>
 8008de0:	901a      	str	r0, [sp, #104]	@ 0x68
 8008de2:	2800      	cmp	r0, #0
 8008de4:	d1d9      	bne.n	8008d9a <_strtod_l+0x73a>
 8008de6:	e65a      	b.n	8008a9e <_strtod_l+0x43e>
 8008de8:	2e00      	cmp	r6, #0
 8008dea:	dd07      	ble.n	8008dfc <_strtod_l+0x79c>
 8008dec:	4649      	mov	r1, r9
 8008dee:	9805      	ldr	r0, [sp, #20]
 8008df0:	4632      	mov	r2, r6
 8008df2:	f7ff f9bd 	bl	8008170 <__lshift>
 8008df6:	4681      	mov	r9, r0
 8008df8:	2800      	cmp	r0, #0
 8008dfa:	d0d8      	beq.n	8008dae <_strtod_l+0x74e>
 8008dfc:	2f00      	cmp	r7, #0
 8008dfe:	dd08      	ble.n	8008e12 <_strtod_l+0x7b2>
 8008e00:	4641      	mov	r1, r8
 8008e02:	9805      	ldr	r0, [sp, #20]
 8008e04:	463a      	mov	r2, r7
 8008e06:	f7ff f9b3 	bl	8008170 <__lshift>
 8008e0a:	4680      	mov	r8, r0
 8008e0c:	2800      	cmp	r0, #0
 8008e0e:	f43f ae46 	beq.w	8008a9e <_strtod_l+0x43e>
 8008e12:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008e14:	9805      	ldr	r0, [sp, #20]
 8008e16:	464a      	mov	r2, r9
 8008e18:	f7ff fa32 	bl	8008280 <__mdiff>
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	2800      	cmp	r0, #0
 8008e20:	f43f ae3d 	beq.w	8008a9e <_strtod_l+0x43e>
 8008e24:	68c3      	ldr	r3, [r0, #12]
 8008e26:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008e28:	2300      	movs	r3, #0
 8008e2a:	60c3      	str	r3, [r0, #12]
 8008e2c:	4641      	mov	r1, r8
 8008e2e:	f7ff fa0b 	bl	8008248 <__mcmp>
 8008e32:	2800      	cmp	r0, #0
 8008e34:	da46      	bge.n	8008ec4 <_strtod_l+0x864>
 8008e36:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e38:	ea53 030a 	orrs.w	r3, r3, sl
 8008e3c:	d16c      	bne.n	8008f18 <_strtod_l+0x8b8>
 8008e3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d168      	bne.n	8008f18 <_strtod_l+0x8b8>
 8008e46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008e4a:	0d1b      	lsrs	r3, r3, #20
 8008e4c:	051b      	lsls	r3, r3, #20
 8008e4e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008e52:	d961      	bls.n	8008f18 <_strtod_l+0x8b8>
 8008e54:	6963      	ldr	r3, [r4, #20]
 8008e56:	b913      	cbnz	r3, 8008e5e <_strtod_l+0x7fe>
 8008e58:	6923      	ldr	r3, [r4, #16]
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	dd5c      	ble.n	8008f18 <_strtod_l+0x8b8>
 8008e5e:	4621      	mov	r1, r4
 8008e60:	2201      	movs	r2, #1
 8008e62:	9805      	ldr	r0, [sp, #20]
 8008e64:	f7ff f984 	bl	8008170 <__lshift>
 8008e68:	4641      	mov	r1, r8
 8008e6a:	4604      	mov	r4, r0
 8008e6c:	f7ff f9ec 	bl	8008248 <__mcmp>
 8008e70:	2800      	cmp	r0, #0
 8008e72:	dd51      	ble.n	8008f18 <_strtod_l+0x8b8>
 8008e74:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008e78:	9a08      	ldr	r2, [sp, #32]
 8008e7a:	0d1b      	lsrs	r3, r3, #20
 8008e7c:	051b      	lsls	r3, r3, #20
 8008e7e:	2a00      	cmp	r2, #0
 8008e80:	d06b      	beq.n	8008f5a <_strtod_l+0x8fa>
 8008e82:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008e86:	d868      	bhi.n	8008f5a <_strtod_l+0x8fa>
 8008e88:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008e8c:	f67f ae9d 	bls.w	8008bca <_strtod_l+0x56a>
 8008e90:	4b0a      	ldr	r3, [pc, #40]	@ (8008ebc <_strtod_l+0x85c>)
 8008e92:	4650      	mov	r0, sl
 8008e94:	4659      	mov	r1, fp
 8008e96:	2200      	movs	r2, #0
 8008e98:	f7f7 fbce 	bl	8000638 <__aeabi_dmul>
 8008e9c:	4b08      	ldr	r3, [pc, #32]	@ (8008ec0 <_strtod_l+0x860>)
 8008e9e:	400b      	ands	r3, r1
 8008ea0:	4682      	mov	sl, r0
 8008ea2:	468b      	mov	fp, r1
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	f47f ae05 	bne.w	8008ab4 <_strtod_l+0x454>
 8008eaa:	9a05      	ldr	r2, [sp, #20]
 8008eac:	2322      	movs	r3, #34	@ 0x22
 8008eae:	6013      	str	r3, [r2, #0]
 8008eb0:	e600      	b.n	8008ab4 <_strtod_l+0x454>
 8008eb2:	bf00      	nop
 8008eb4:	0800b7e0 	.word	0x0800b7e0
 8008eb8:	fffffc02 	.word	0xfffffc02
 8008ebc:	39500000 	.word	0x39500000
 8008ec0:	7ff00000 	.word	0x7ff00000
 8008ec4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008ec8:	d165      	bne.n	8008f96 <_strtod_l+0x936>
 8008eca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008ecc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ed0:	b35a      	cbz	r2, 8008f2a <_strtod_l+0x8ca>
 8008ed2:	4a9f      	ldr	r2, [pc, #636]	@ (8009150 <_strtod_l+0xaf0>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d12b      	bne.n	8008f30 <_strtod_l+0x8d0>
 8008ed8:	9b08      	ldr	r3, [sp, #32]
 8008eda:	4651      	mov	r1, sl
 8008edc:	b303      	cbz	r3, 8008f20 <_strtod_l+0x8c0>
 8008ede:	4b9d      	ldr	r3, [pc, #628]	@ (8009154 <_strtod_l+0xaf4>)
 8008ee0:	465a      	mov	r2, fp
 8008ee2:	4013      	ands	r3, r2
 8008ee4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008ee8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008eec:	d81b      	bhi.n	8008f26 <_strtod_l+0x8c6>
 8008eee:	0d1b      	lsrs	r3, r3, #20
 8008ef0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ef8:	4299      	cmp	r1, r3
 8008efa:	d119      	bne.n	8008f30 <_strtod_l+0x8d0>
 8008efc:	4b96      	ldr	r3, [pc, #600]	@ (8009158 <_strtod_l+0xaf8>)
 8008efe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d102      	bne.n	8008f0a <_strtod_l+0x8aa>
 8008f04:	3101      	adds	r1, #1
 8008f06:	f43f adca 	beq.w	8008a9e <_strtod_l+0x43e>
 8008f0a:	4b92      	ldr	r3, [pc, #584]	@ (8009154 <_strtod_l+0xaf4>)
 8008f0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f0e:	401a      	ands	r2, r3
 8008f10:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008f14:	f04f 0a00 	mov.w	sl, #0
 8008f18:	9b08      	ldr	r3, [sp, #32]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d1b8      	bne.n	8008e90 <_strtod_l+0x830>
 8008f1e:	e5c9      	b.n	8008ab4 <_strtod_l+0x454>
 8008f20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008f24:	e7e8      	b.n	8008ef8 <_strtod_l+0x898>
 8008f26:	4613      	mov	r3, r2
 8008f28:	e7e6      	b.n	8008ef8 <_strtod_l+0x898>
 8008f2a:	ea53 030a 	orrs.w	r3, r3, sl
 8008f2e:	d0a1      	beq.n	8008e74 <_strtod_l+0x814>
 8008f30:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008f32:	b1db      	cbz	r3, 8008f6c <_strtod_l+0x90c>
 8008f34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f36:	4213      	tst	r3, r2
 8008f38:	d0ee      	beq.n	8008f18 <_strtod_l+0x8b8>
 8008f3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f3c:	9a08      	ldr	r2, [sp, #32]
 8008f3e:	4650      	mov	r0, sl
 8008f40:	4659      	mov	r1, fp
 8008f42:	b1bb      	cbz	r3, 8008f74 <_strtod_l+0x914>
 8008f44:	f7ff fb6e 	bl	8008624 <sulp>
 8008f48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008f4c:	ec53 2b10 	vmov	r2, r3, d0
 8008f50:	f7f7 f9bc 	bl	80002cc <__adddf3>
 8008f54:	4682      	mov	sl, r0
 8008f56:	468b      	mov	fp, r1
 8008f58:	e7de      	b.n	8008f18 <_strtod_l+0x8b8>
 8008f5a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008f5e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008f62:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008f66:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008f6a:	e7d5      	b.n	8008f18 <_strtod_l+0x8b8>
 8008f6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008f6e:	ea13 0f0a 	tst.w	r3, sl
 8008f72:	e7e1      	b.n	8008f38 <_strtod_l+0x8d8>
 8008f74:	f7ff fb56 	bl	8008624 <sulp>
 8008f78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008f7c:	ec53 2b10 	vmov	r2, r3, d0
 8008f80:	f7f7 f9a2 	bl	80002c8 <__aeabi_dsub>
 8008f84:	2200      	movs	r2, #0
 8008f86:	2300      	movs	r3, #0
 8008f88:	4682      	mov	sl, r0
 8008f8a:	468b      	mov	fp, r1
 8008f8c:	f7f7 fdbc 	bl	8000b08 <__aeabi_dcmpeq>
 8008f90:	2800      	cmp	r0, #0
 8008f92:	d0c1      	beq.n	8008f18 <_strtod_l+0x8b8>
 8008f94:	e619      	b.n	8008bca <_strtod_l+0x56a>
 8008f96:	4641      	mov	r1, r8
 8008f98:	4620      	mov	r0, r4
 8008f9a:	f7ff facd 	bl	8008538 <__ratio>
 8008f9e:	ec57 6b10 	vmov	r6, r7, d0
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008fa8:	4630      	mov	r0, r6
 8008faa:	4639      	mov	r1, r7
 8008fac:	f7f7 fdc0 	bl	8000b30 <__aeabi_dcmple>
 8008fb0:	2800      	cmp	r0, #0
 8008fb2:	d06f      	beq.n	8009094 <_strtod_l+0xa34>
 8008fb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d17a      	bne.n	80090b0 <_strtod_l+0xa50>
 8008fba:	f1ba 0f00 	cmp.w	sl, #0
 8008fbe:	d158      	bne.n	8009072 <_strtod_l+0xa12>
 8008fc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008fc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d15a      	bne.n	8009080 <_strtod_l+0xa20>
 8008fca:	4b64      	ldr	r3, [pc, #400]	@ (800915c <_strtod_l+0xafc>)
 8008fcc:	2200      	movs	r2, #0
 8008fce:	4630      	mov	r0, r6
 8008fd0:	4639      	mov	r1, r7
 8008fd2:	f7f7 fda3 	bl	8000b1c <__aeabi_dcmplt>
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	d159      	bne.n	800908e <_strtod_l+0xa2e>
 8008fda:	4630      	mov	r0, r6
 8008fdc:	4639      	mov	r1, r7
 8008fde:	4b60      	ldr	r3, [pc, #384]	@ (8009160 <_strtod_l+0xb00>)
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f7f7 fb29 	bl	8000638 <__aeabi_dmul>
 8008fe6:	4606      	mov	r6, r0
 8008fe8:	460f      	mov	r7, r1
 8008fea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008fee:	9606      	str	r6, [sp, #24]
 8008ff0:	9307      	str	r3, [sp, #28]
 8008ff2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ff6:	4d57      	ldr	r5, [pc, #348]	@ (8009154 <_strtod_l+0xaf4>)
 8008ff8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008ffc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ffe:	401d      	ands	r5, r3
 8009000:	4b58      	ldr	r3, [pc, #352]	@ (8009164 <_strtod_l+0xb04>)
 8009002:	429d      	cmp	r5, r3
 8009004:	f040 80b2 	bne.w	800916c <_strtod_l+0xb0c>
 8009008:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800900a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800900e:	ec4b ab10 	vmov	d0, sl, fp
 8009012:	f7ff f9c9 	bl	80083a8 <__ulp>
 8009016:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800901a:	ec51 0b10 	vmov	r0, r1, d0
 800901e:	f7f7 fb0b 	bl	8000638 <__aeabi_dmul>
 8009022:	4652      	mov	r2, sl
 8009024:	465b      	mov	r3, fp
 8009026:	f7f7 f951 	bl	80002cc <__adddf3>
 800902a:	460b      	mov	r3, r1
 800902c:	4949      	ldr	r1, [pc, #292]	@ (8009154 <_strtod_l+0xaf4>)
 800902e:	4a4e      	ldr	r2, [pc, #312]	@ (8009168 <_strtod_l+0xb08>)
 8009030:	4019      	ands	r1, r3
 8009032:	4291      	cmp	r1, r2
 8009034:	4682      	mov	sl, r0
 8009036:	d942      	bls.n	80090be <_strtod_l+0xa5e>
 8009038:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800903a:	4b47      	ldr	r3, [pc, #284]	@ (8009158 <_strtod_l+0xaf8>)
 800903c:	429a      	cmp	r2, r3
 800903e:	d103      	bne.n	8009048 <_strtod_l+0x9e8>
 8009040:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009042:	3301      	adds	r3, #1
 8009044:	f43f ad2b 	beq.w	8008a9e <_strtod_l+0x43e>
 8009048:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009158 <_strtod_l+0xaf8>
 800904c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009050:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009052:	9805      	ldr	r0, [sp, #20]
 8009054:	f7fe fe74 	bl	8007d40 <_Bfree>
 8009058:	9805      	ldr	r0, [sp, #20]
 800905a:	4649      	mov	r1, r9
 800905c:	f7fe fe70 	bl	8007d40 <_Bfree>
 8009060:	9805      	ldr	r0, [sp, #20]
 8009062:	4641      	mov	r1, r8
 8009064:	f7fe fe6c 	bl	8007d40 <_Bfree>
 8009068:	9805      	ldr	r0, [sp, #20]
 800906a:	4621      	mov	r1, r4
 800906c:	f7fe fe68 	bl	8007d40 <_Bfree>
 8009070:	e618      	b.n	8008ca4 <_strtod_l+0x644>
 8009072:	f1ba 0f01 	cmp.w	sl, #1
 8009076:	d103      	bne.n	8009080 <_strtod_l+0xa20>
 8009078:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800907a:	2b00      	cmp	r3, #0
 800907c:	f43f ada5 	beq.w	8008bca <_strtod_l+0x56a>
 8009080:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009130 <_strtod_l+0xad0>
 8009084:	4f35      	ldr	r7, [pc, #212]	@ (800915c <_strtod_l+0xafc>)
 8009086:	ed8d 7b06 	vstr	d7, [sp, #24]
 800908a:	2600      	movs	r6, #0
 800908c:	e7b1      	b.n	8008ff2 <_strtod_l+0x992>
 800908e:	4f34      	ldr	r7, [pc, #208]	@ (8009160 <_strtod_l+0xb00>)
 8009090:	2600      	movs	r6, #0
 8009092:	e7aa      	b.n	8008fea <_strtod_l+0x98a>
 8009094:	4b32      	ldr	r3, [pc, #200]	@ (8009160 <_strtod_l+0xb00>)
 8009096:	4630      	mov	r0, r6
 8009098:	4639      	mov	r1, r7
 800909a:	2200      	movs	r2, #0
 800909c:	f7f7 facc 	bl	8000638 <__aeabi_dmul>
 80090a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090a2:	4606      	mov	r6, r0
 80090a4:	460f      	mov	r7, r1
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d09f      	beq.n	8008fea <_strtod_l+0x98a>
 80090aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80090ae:	e7a0      	b.n	8008ff2 <_strtod_l+0x992>
 80090b0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009138 <_strtod_l+0xad8>
 80090b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80090b8:	ec57 6b17 	vmov	r6, r7, d7
 80090bc:	e799      	b.n	8008ff2 <_strtod_l+0x992>
 80090be:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80090c2:	9b08      	ldr	r3, [sp, #32]
 80090c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d1c1      	bne.n	8009050 <_strtod_l+0x9f0>
 80090cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80090d0:	0d1b      	lsrs	r3, r3, #20
 80090d2:	051b      	lsls	r3, r3, #20
 80090d4:	429d      	cmp	r5, r3
 80090d6:	d1bb      	bne.n	8009050 <_strtod_l+0x9f0>
 80090d8:	4630      	mov	r0, r6
 80090da:	4639      	mov	r1, r7
 80090dc:	f7f7 fe0c 	bl	8000cf8 <__aeabi_d2lz>
 80090e0:	f7f7 fa7c 	bl	80005dc <__aeabi_l2d>
 80090e4:	4602      	mov	r2, r0
 80090e6:	460b      	mov	r3, r1
 80090e8:	4630      	mov	r0, r6
 80090ea:	4639      	mov	r1, r7
 80090ec:	f7f7 f8ec 	bl	80002c8 <__aeabi_dsub>
 80090f0:	460b      	mov	r3, r1
 80090f2:	4602      	mov	r2, r0
 80090f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80090f8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80090fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090fe:	ea46 060a 	orr.w	r6, r6, sl
 8009102:	431e      	orrs	r6, r3
 8009104:	d06f      	beq.n	80091e6 <_strtod_l+0xb86>
 8009106:	a30e      	add	r3, pc, #56	@ (adr r3, 8009140 <_strtod_l+0xae0>)
 8009108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910c:	f7f7 fd06 	bl	8000b1c <__aeabi_dcmplt>
 8009110:	2800      	cmp	r0, #0
 8009112:	f47f accf 	bne.w	8008ab4 <_strtod_l+0x454>
 8009116:	a30c      	add	r3, pc, #48	@ (adr r3, 8009148 <_strtod_l+0xae8>)
 8009118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009120:	f7f7 fd1a 	bl	8000b58 <__aeabi_dcmpgt>
 8009124:	2800      	cmp	r0, #0
 8009126:	d093      	beq.n	8009050 <_strtod_l+0x9f0>
 8009128:	e4c4      	b.n	8008ab4 <_strtod_l+0x454>
 800912a:	bf00      	nop
 800912c:	f3af 8000 	nop.w
 8009130:	00000000 	.word	0x00000000
 8009134:	bff00000 	.word	0xbff00000
 8009138:	00000000 	.word	0x00000000
 800913c:	3ff00000 	.word	0x3ff00000
 8009140:	94a03595 	.word	0x94a03595
 8009144:	3fdfffff 	.word	0x3fdfffff
 8009148:	35afe535 	.word	0x35afe535
 800914c:	3fe00000 	.word	0x3fe00000
 8009150:	000fffff 	.word	0x000fffff
 8009154:	7ff00000 	.word	0x7ff00000
 8009158:	7fefffff 	.word	0x7fefffff
 800915c:	3ff00000 	.word	0x3ff00000
 8009160:	3fe00000 	.word	0x3fe00000
 8009164:	7fe00000 	.word	0x7fe00000
 8009168:	7c9fffff 	.word	0x7c9fffff
 800916c:	9b08      	ldr	r3, [sp, #32]
 800916e:	b323      	cbz	r3, 80091ba <_strtod_l+0xb5a>
 8009170:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009174:	d821      	bhi.n	80091ba <_strtod_l+0xb5a>
 8009176:	a328      	add	r3, pc, #160	@ (adr r3, 8009218 <_strtod_l+0xbb8>)
 8009178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917c:	4630      	mov	r0, r6
 800917e:	4639      	mov	r1, r7
 8009180:	f7f7 fcd6 	bl	8000b30 <__aeabi_dcmple>
 8009184:	b1a0      	cbz	r0, 80091b0 <_strtod_l+0xb50>
 8009186:	4639      	mov	r1, r7
 8009188:	4630      	mov	r0, r6
 800918a:	f7f7 fd2d 	bl	8000be8 <__aeabi_d2uiz>
 800918e:	2801      	cmp	r0, #1
 8009190:	bf38      	it	cc
 8009192:	2001      	movcc	r0, #1
 8009194:	f7f7 f9d6 	bl	8000544 <__aeabi_ui2d>
 8009198:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800919a:	4606      	mov	r6, r0
 800919c:	460f      	mov	r7, r1
 800919e:	b9fb      	cbnz	r3, 80091e0 <_strtod_l+0xb80>
 80091a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80091a4:	9014      	str	r0, [sp, #80]	@ 0x50
 80091a6:	9315      	str	r3, [sp, #84]	@ 0x54
 80091a8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80091ac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80091b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80091b2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80091b6:	1b5b      	subs	r3, r3, r5
 80091b8:	9311      	str	r3, [sp, #68]	@ 0x44
 80091ba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80091be:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80091c2:	f7ff f8f1 	bl	80083a8 <__ulp>
 80091c6:	4650      	mov	r0, sl
 80091c8:	ec53 2b10 	vmov	r2, r3, d0
 80091cc:	4659      	mov	r1, fp
 80091ce:	f7f7 fa33 	bl	8000638 <__aeabi_dmul>
 80091d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80091d6:	f7f7 f879 	bl	80002cc <__adddf3>
 80091da:	4682      	mov	sl, r0
 80091dc:	468b      	mov	fp, r1
 80091de:	e770      	b.n	80090c2 <_strtod_l+0xa62>
 80091e0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80091e4:	e7e0      	b.n	80091a8 <_strtod_l+0xb48>
 80091e6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009220 <_strtod_l+0xbc0>)
 80091e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ec:	f7f7 fc96 	bl	8000b1c <__aeabi_dcmplt>
 80091f0:	e798      	b.n	8009124 <_strtod_l+0xac4>
 80091f2:	2300      	movs	r3, #0
 80091f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091f6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80091f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091fa:	6013      	str	r3, [r2, #0]
 80091fc:	f7ff ba6d 	b.w	80086da <_strtod_l+0x7a>
 8009200:	2a65      	cmp	r2, #101	@ 0x65
 8009202:	f43f ab66 	beq.w	80088d2 <_strtod_l+0x272>
 8009206:	2a45      	cmp	r2, #69	@ 0x45
 8009208:	f43f ab63 	beq.w	80088d2 <_strtod_l+0x272>
 800920c:	2301      	movs	r3, #1
 800920e:	f7ff bb9e 	b.w	800894e <_strtod_l+0x2ee>
 8009212:	bf00      	nop
 8009214:	f3af 8000 	nop.w
 8009218:	ffc00000 	.word	0xffc00000
 800921c:	41dfffff 	.word	0x41dfffff
 8009220:	94a03595 	.word	0x94a03595
 8009224:	3fcfffff 	.word	0x3fcfffff

08009228 <_strtod_r>:
 8009228:	4b01      	ldr	r3, [pc, #4]	@ (8009230 <_strtod_r+0x8>)
 800922a:	f7ff ba19 	b.w	8008660 <_strtod_l>
 800922e:	bf00      	nop
 8009230:	20000068 	.word	0x20000068

08009234 <_strtol_l.constprop.0>:
 8009234:	2b24      	cmp	r3, #36	@ 0x24
 8009236:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800923a:	4686      	mov	lr, r0
 800923c:	4690      	mov	r8, r2
 800923e:	d801      	bhi.n	8009244 <_strtol_l.constprop.0+0x10>
 8009240:	2b01      	cmp	r3, #1
 8009242:	d106      	bne.n	8009252 <_strtol_l.constprop.0+0x1e>
 8009244:	f7fd fdba 	bl	8006dbc <__errno>
 8009248:	2316      	movs	r3, #22
 800924a:	6003      	str	r3, [r0, #0]
 800924c:	2000      	movs	r0, #0
 800924e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009252:	4834      	ldr	r0, [pc, #208]	@ (8009324 <_strtol_l.constprop.0+0xf0>)
 8009254:	460d      	mov	r5, r1
 8009256:	462a      	mov	r2, r5
 8009258:	f815 4b01 	ldrb.w	r4, [r5], #1
 800925c:	5d06      	ldrb	r6, [r0, r4]
 800925e:	f016 0608 	ands.w	r6, r6, #8
 8009262:	d1f8      	bne.n	8009256 <_strtol_l.constprop.0+0x22>
 8009264:	2c2d      	cmp	r4, #45	@ 0x2d
 8009266:	d12d      	bne.n	80092c4 <_strtol_l.constprop.0+0x90>
 8009268:	782c      	ldrb	r4, [r5, #0]
 800926a:	2601      	movs	r6, #1
 800926c:	1c95      	adds	r5, r2, #2
 800926e:	f033 0210 	bics.w	r2, r3, #16
 8009272:	d109      	bne.n	8009288 <_strtol_l.constprop.0+0x54>
 8009274:	2c30      	cmp	r4, #48	@ 0x30
 8009276:	d12a      	bne.n	80092ce <_strtol_l.constprop.0+0x9a>
 8009278:	782a      	ldrb	r2, [r5, #0]
 800927a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800927e:	2a58      	cmp	r2, #88	@ 0x58
 8009280:	d125      	bne.n	80092ce <_strtol_l.constprop.0+0x9a>
 8009282:	786c      	ldrb	r4, [r5, #1]
 8009284:	2310      	movs	r3, #16
 8009286:	3502      	adds	r5, #2
 8009288:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800928c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8009290:	2200      	movs	r2, #0
 8009292:	fbbc f9f3 	udiv	r9, ip, r3
 8009296:	4610      	mov	r0, r2
 8009298:	fb03 ca19 	mls	sl, r3, r9, ip
 800929c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80092a0:	2f09      	cmp	r7, #9
 80092a2:	d81b      	bhi.n	80092dc <_strtol_l.constprop.0+0xa8>
 80092a4:	463c      	mov	r4, r7
 80092a6:	42a3      	cmp	r3, r4
 80092a8:	dd27      	ble.n	80092fa <_strtol_l.constprop.0+0xc6>
 80092aa:	1c57      	adds	r7, r2, #1
 80092ac:	d007      	beq.n	80092be <_strtol_l.constprop.0+0x8a>
 80092ae:	4581      	cmp	r9, r0
 80092b0:	d320      	bcc.n	80092f4 <_strtol_l.constprop.0+0xc0>
 80092b2:	d101      	bne.n	80092b8 <_strtol_l.constprop.0+0x84>
 80092b4:	45a2      	cmp	sl, r4
 80092b6:	db1d      	blt.n	80092f4 <_strtol_l.constprop.0+0xc0>
 80092b8:	fb00 4003 	mla	r0, r0, r3, r4
 80092bc:	2201      	movs	r2, #1
 80092be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80092c2:	e7eb      	b.n	800929c <_strtol_l.constprop.0+0x68>
 80092c4:	2c2b      	cmp	r4, #43	@ 0x2b
 80092c6:	bf04      	itt	eq
 80092c8:	782c      	ldrbeq	r4, [r5, #0]
 80092ca:	1c95      	addeq	r5, r2, #2
 80092cc:	e7cf      	b.n	800926e <_strtol_l.constprop.0+0x3a>
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d1da      	bne.n	8009288 <_strtol_l.constprop.0+0x54>
 80092d2:	2c30      	cmp	r4, #48	@ 0x30
 80092d4:	bf0c      	ite	eq
 80092d6:	2308      	moveq	r3, #8
 80092d8:	230a      	movne	r3, #10
 80092da:	e7d5      	b.n	8009288 <_strtol_l.constprop.0+0x54>
 80092dc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80092e0:	2f19      	cmp	r7, #25
 80092e2:	d801      	bhi.n	80092e8 <_strtol_l.constprop.0+0xb4>
 80092e4:	3c37      	subs	r4, #55	@ 0x37
 80092e6:	e7de      	b.n	80092a6 <_strtol_l.constprop.0+0x72>
 80092e8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80092ec:	2f19      	cmp	r7, #25
 80092ee:	d804      	bhi.n	80092fa <_strtol_l.constprop.0+0xc6>
 80092f0:	3c57      	subs	r4, #87	@ 0x57
 80092f2:	e7d8      	b.n	80092a6 <_strtol_l.constprop.0+0x72>
 80092f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80092f8:	e7e1      	b.n	80092be <_strtol_l.constprop.0+0x8a>
 80092fa:	1c53      	adds	r3, r2, #1
 80092fc:	d108      	bne.n	8009310 <_strtol_l.constprop.0+0xdc>
 80092fe:	2322      	movs	r3, #34	@ 0x22
 8009300:	f8ce 3000 	str.w	r3, [lr]
 8009304:	4660      	mov	r0, ip
 8009306:	f1b8 0f00 	cmp.w	r8, #0
 800930a:	d0a0      	beq.n	800924e <_strtol_l.constprop.0+0x1a>
 800930c:	1e69      	subs	r1, r5, #1
 800930e:	e006      	b.n	800931e <_strtol_l.constprop.0+0xea>
 8009310:	b106      	cbz	r6, 8009314 <_strtol_l.constprop.0+0xe0>
 8009312:	4240      	negs	r0, r0
 8009314:	f1b8 0f00 	cmp.w	r8, #0
 8009318:	d099      	beq.n	800924e <_strtol_l.constprop.0+0x1a>
 800931a:	2a00      	cmp	r2, #0
 800931c:	d1f6      	bne.n	800930c <_strtol_l.constprop.0+0xd8>
 800931e:	f8c8 1000 	str.w	r1, [r8]
 8009322:	e794      	b.n	800924e <_strtol_l.constprop.0+0x1a>
 8009324:	0800b809 	.word	0x0800b809

08009328 <_strtol_r>:
 8009328:	f7ff bf84 	b.w	8009234 <_strtol_l.constprop.0>

0800932c <__ssputs_r>:
 800932c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009330:	688e      	ldr	r6, [r1, #8]
 8009332:	461f      	mov	r7, r3
 8009334:	42be      	cmp	r6, r7
 8009336:	680b      	ldr	r3, [r1, #0]
 8009338:	4682      	mov	sl, r0
 800933a:	460c      	mov	r4, r1
 800933c:	4690      	mov	r8, r2
 800933e:	d82d      	bhi.n	800939c <__ssputs_r+0x70>
 8009340:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009344:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009348:	d026      	beq.n	8009398 <__ssputs_r+0x6c>
 800934a:	6965      	ldr	r5, [r4, #20]
 800934c:	6909      	ldr	r1, [r1, #16]
 800934e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009352:	eba3 0901 	sub.w	r9, r3, r1
 8009356:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800935a:	1c7b      	adds	r3, r7, #1
 800935c:	444b      	add	r3, r9
 800935e:	106d      	asrs	r5, r5, #1
 8009360:	429d      	cmp	r5, r3
 8009362:	bf38      	it	cc
 8009364:	461d      	movcc	r5, r3
 8009366:	0553      	lsls	r3, r2, #21
 8009368:	d527      	bpl.n	80093ba <__ssputs_r+0x8e>
 800936a:	4629      	mov	r1, r5
 800936c:	f7fe fc1c 	bl	8007ba8 <_malloc_r>
 8009370:	4606      	mov	r6, r0
 8009372:	b360      	cbz	r0, 80093ce <__ssputs_r+0xa2>
 8009374:	6921      	ldr	r1, [r4, #16]
 8009376:	464a      	mov	r2, r9
 8009378:	f000 fbee 	bl	8009b58 <memcpy>
 800937c:	89a3      	ldrh	r3, [r4, #12]
 800937e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009382:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009386:	81a3      	strh	r3, [r4, #12]
 8009388:	6126      	str	r6, [r4, #16]
 800938a:	6165      	str	r5, [r4, #20]
 800938c:	444e      	add	r6, r9
 800938e:	eba5 0509 	sub.w	r5, r5, r9
 8009392:	6026      	str	r6, [r4, #0]
 8009394:	60a5      	str	r5, [r4, #8]
 8009396:	463e      	mov	r6, r7
 8009398:	42be      	cmp	r6, r7
 800939a:	d900      	bls.n	800939e <__ssputs_r+0x72>
 800939c:	463e      	mov	r6, r7
 800939e:	6820      	ldr	r0, [r4, #0]
 80093a0:	4632      	mov	r2, r6
 80093a2:	4641      	mov	r1, r8
 80093a4:	f000 fb9c 	bl	8009ae0 <memmove>
 80093a8:	68a3      	ldr	r3, [r4, #8]
 80093aa:	1b9b      	subs	r3, r3, r6
 80093ac:	60a3      	str	r3, [r4, #8]
 80093ae:	6823      	ldr	r3, [r4, #0]
 80093b0:	4433      	add	r3, r6
 80093b2:	6023      	str	r3, [r4, #0]
 80093b4:	2000      	movs	r0, #0
 80093b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093ba:	462a      	mov	r2, r5
 80093bc:	f000 ff61 	bl	800a282 <_realloc_r>
 80093c0:	4606      	mov	r6, r0
 80093c2:	2800      	cmp	r0, #0
 80093c4:	d1e0      	bne.n	8009388 <__ssputs_r+0x5c>
 80093c6:	6921      	ldr	r1, [r4, #16]
 80093c8:	4650      	mov	r0, sl
 80093ca:	f7fe fb79 	bl	8007ac0 <_free_r>
 80093ce:	230c      	movs	r3, #12
 80093d0:	f8ca 3000 	str.w	r3, [sl]
 80093d4:	89a3      	ldrh	r3, [r4, #12]
 80093d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093da:	81a3      	strh	r3, [r4, #12]
 80093dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80093e0:	e7e9      	b.n	80093b6 <__ssputs_r+0x8a>
	...

080093e4 <_svfiprintf_r>:
 80093e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e8:	4698      	mov	r8, r3
 80093ea:	898b      	ldrh	r3, [r1, #12]
 80093ec:	061b      	lsls	r3, r3, #24
 80093ee:	b09d      	sub	sp, #116	@ 0x74
 80093f0:	4607      	mov	r7, r0
 80093f2:	460d      	mov	r5, r1
 80093f4:	4614      	mov	r4, r2
 80093f6:	d510      	bpl.n	800941a <_svfiprintf_r+0x36>
 80093f8:	690b      	ldr	r3, [r1, #16]
 80093fa:	b973      	cbnz	r3, 800941a <_svfiprintf_r+0x36>
 80093fc:	2140      	movs	r1, #64	@ 0x40
 80093fe:	f7fe fbd3 	bl	8007ba8 <_malloc_r>
 8009402:	6028      	str	r0, [r5, #0]
 8009404:	6128      	str	r0, [r5, #16]
 8009406:	b930      	cbnz	r0, 8009416 <_svfiprintf_r+0x32>
 8009408:	230c      	movs	r3, #12
 800940a:	603b      	str	r3, [r7, #0]
 800940c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009410:	b01d      	add	sp, #116	@ 0x74
 8009412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009416:	2340      	movs	r3, #64	@ 0x40
 8009418:	616b      	str	r3, [r5, #20]
 800941a:	2300      	movs	r3, #0
 800941c:	9309      	str	r3, [sp, #36]	@ 0x24
 800941e:	2320      	movs	r3, #32
 8009420:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009424:	f8cd 800c 	str.w	r8, [sp, #12]
 8009428:	2330      	movs	r3, #48	@ 0x30
 800942a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80095c8 <_svfiprintf_r+0x1e4>
 800942e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009432:	f04f 0901 	mov.w	r9, #1
 8009436:	4623      	mov	r3, r4
 8009438:	469a      	mov	sl, r3
 800943a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800943e:	b10a      	cbz	r2, 8009444 <_svfiprintf_r+0x60>
 8009440:	2a25      	cmp	r2, #37	@ 0x25
 8009442:	d1f9      	bne.n	8009438 <_svfiprintf_r+0x54>
 8009444:	ebba 0b04 	subs.w	fp, sl, r4
 8009448:	d00b      	beq.n	8009462 <_svfiprintf_r+0x7e>
 800944a:	465b      	mov	r3, fp
 800944c:	4622      	mov	r2, r4
 800944e:	4629      	mov	r1, r5
 8009450:	4638      	mov	r0, r7
 8009452:	f7ff ff6b 	bl	800932c <__ssputs_r>
 8009456:	3001      	adds	r0, #1
 8009458:	f000 80a7 	beq.w	80095aa <_svfiprintf_r+0x1c6>
 800945c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800945e:	445a      	add	r2, fp
 8009460:	9209      	str	r2, [sp, #36]	@ 0x24
 8009462:	f89a 3000 	ldrb.w	r3, [sl]
 8009466:	2b00      	cmp	r3, #0
 8009468:	f000 809f 	beq.w	80095aa <_svfiprintf_r+0x1c6>
 800946c:	2300      	movs	r3, #0
 800946e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009472:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009476:	f10a 0a01 	add.w	sl, sl, #1
 800947a:	9304      	str	r3, [sp, #16]
 800947c:	9307      	str	r3, [sp, #28]
 800947e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009482:	931a      	str	r3, [sp, #104]	@ 0x68
 8009484:	4654      	mov	r4, sl
 8009486:	2205      	movs	r2, #5
 8009488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800948c:	484e      	ldr	r0, [pc, #312]	@ (80095c8 <_svfiprintf_r+0x1e4>)
 800948e:	f7f6 febf 	bl	8000210 <memchr>
 8009492:	9a04      	ldr	r2, [sp, #16]
 8009494:	b9d8      	cbnz	r0, 80094ce <_svfiprintf_r+0xea>
 8009496:	06d0      	lsls	r0, r2, #27
 8009498:	bf44      	itt	mi
 800949a:	2320      	movmi	r3, #32
 800949c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094a0:	0711      	lsls	r1, r2, #28
 80094a2:	bf44      	itt	mi
 80094a4:	232b      	movmi	r3, #43	@ 0x2b
 80094a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094aa:	f89a 3000 	ldrb.w	r3, [sl]
 80094ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80094b0:	d015      	beq.n	80094de <_svfiprintf_r+0xfa>
 80094b2:	9a07      	ldr	r2, [sp, #28]
 80094b4:	4654      	mov	r4, sl
 80094b6:	2000      	movs	r0, #0
 80094b8:	f04f 0c0a 	mov.w	ip, #10
 80094bc:	4621      	mov	r1, r4
 80094be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094c2:	3b30      	subs	r3, #48	@ 0x30
 80094c4:	2b09      	cmp	r3, #9
 80094c6:	d94b      	bls.n	8009560 <_svfiprintf_r+0x17c>
 80094c8:	b1b0      	cbz	r0, 80094f8 <_svfiprintf_r+0x114>
 80094ca:	9207      	str	r2, [sp, #28]
 80094cc:	e014      	b.n	80094f8 <_svfiprintf_r+0x114>
 80094ce:	eba0 0308 	sub.w	r3, r0, r8
 80094d2:	fa09 f303 	lsl.w	r3, r9, r3
 80094d6:	4313      	orrs	r3, r2
 80094d8:	9304      	str	r3, [sp, #16]
 80094da:	46a2      	mov	sl, r4
 80094dc:	e7d2      	b.n	8009484 <_svfiprintf_r+0xa0>
 80094de:	9b03      	ldr	r3, [sp, #12]
 80094e0:	1d19      	adds	r1, r3, #4
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	9103      	str	r1, [sp, #12]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	bfbb      	ittet	lt
 80094ea:	425b      	neglt	r3, r3
 80094ec:	f042 0202 	orrlt.w	r2, r2, #2
 80094f0:	9307      	strge	r3, [sp, #28]
 80094f2:	9307      	strlt	r3, [sp, #28]
 80094f4:	bfb8      	it	lt
 80094f6:	9204      	strlt	r2, [sp, #16]
 80094f8:	7823      	ldrb	r3, [r4, #0]
 80094fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80094fc:	d10a      	bne.n	8009514 <_svfiprintf_r+0x130>
 80094fe:	7863      	ldrb	r3, [r4, #1]
 8009500:	2b2a      	cmp	r3, #42	@ 0x2a
 8009502:	d132      	bne.n	800956a <_svfiprintf_r+0x186>
 8009504:	9b03      	ldr	r3, [sp, #12]
 8009506:	1d1a      	adds	r2, r3, #4
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	9203      	str	r2, [sp, #12]
 800950c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009510:	3402      	adds	r4, #2
 8009512:	9305      	str	r3, [sp, #20]
 8009514:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80095d8 <_svfiprintf_r+0x1f4>
 8009518:	7821      	ldrb	r1, [r4, #0]
 800951a:	2203      	movs	r2, #3
 800951c:	4650      	mov	r0, sl
 800951e:	f7f6 fe77 	bl	8000210 <memchr>
 8009522:	b138      	cbz	r0, 8009534 <_svfiprintf_r+0x150>
 8009524:	9b04      	ldr	r3, [sp, #16]
 8009526:	eba0 000a 	sub.w	r0, r0, sl
 800952a:	2240      	movs	r2, #64	@ 0x40
 800952c:	4082      	lsls	r2, r0
 800952e:	4313      	orrs	r3, r2
 8009530:	3401      	adds	r4, #1
 8009532:	9304      	str	r3, [sp, #16]
 8009534:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009538:	4824      	ldr	r0, [pc, #144]	@ (80095cc <_svfiprintf_r+0x1e8>)
 800953a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800953e:	2206      	movs	r2, #6
 8009540:	f7f6 fe66 	bl	8000210 <memchr>
 8009544:	2800      	cmp	r0, #0
 8009546:	d036      	beq.n	80095b6 <_svfiprintf_r+0x1d2>
 8009548:	4b21      	ldr	r3, [pc, #132]	@ (80095d0 <_svfiprintf_r+0x1ec>)
 800954a:	bb1b      	cbnz	r3, 8009594 <_svfiprintf_r+0x1b0>
 800954c:	9b03      	ldr	r3, [sp, #12]
 800954e:	3307      	adds	r3, #7
 8009550:	f023 0307 	bic.w	r3, r3, #7
 8009554:	3308      	adds	r3, #8
 8009556:	9303      	str	r3, [sp, #12]
 8009558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800955a:	4433      	add	r3, r6
 800955c:	9309      	str	r3, [sp, #36]	@ 0x24
 800955e:	e76a      	b.n	8009436 <_svfiprintf_r+0x52>
 8009560:	fb0c 3202 	mla	r2, ip, r2, r3
 8009564:	460c      	mov	r4, r1
 8009566:	2001      	movs	r0, #1
 8009568:	e7a8      	b.n	80094bc <_svfiprintf_r+0xd8>
 800956a:	2300      	movs	r3, #0
 800956c:	3401      	adds	r4, #1
 800956e:	9305      	str	r3, [sp, #20]
 8009570:	4619      	mov	r1, r3
 8009572:	f04f 0c0a 	mov.w	ip, #10
 8009576:	4620      	mov	r0, r4
 8009578:	f810 2b01 	ldrb.w	r2, [r0], #1
 800957c:	3a30      	subs	r2, #48	@ 0x30
 800957e:	2a09      	cmp	r2, #9
 8009580:	d903      	bls.n	800958a <_svfiprintf_r+0x1a6>
 8009582:	2b00      	cmp	r3, #0
 8009584:	d0c6      	beq.n	8009514 <_svfiprintf_r+0x130>
 8009586:	9105      	str	r1, [sp, #20]
 8009588:	e7c4      	b.n	8009514 <_svfiprintf_r+0x130>
 800958a:	fb0c 2101 	mla	r1, ip, r1, r2
 800958e:	4604      	mov	r4, r0
 8009590:	2301      	movs	r3, #1
 8009592:	e7f0      	b.n	8009576 <_svfiprintf_r+0x192>
 8009594:	ab03      	add	r3, sp, #12
 8009596:	9300      	str	r3, [sp, #0]
 8009598:	462a      	mov	r2, r5
 800959a:	4b0e      	ldr	r3, [pc, #56]	@ (80095d4 <_svfiprintf_r+0x1f0>)
 800959c:	a904      	add	r1, sp, #16
 800959e:	4638      	mov	r0, r7
 80095a0:	f7fc fcb6 	bl	8005f10 <_printf_float>
 80095a4:	1c42      	adds	r2, r0, #1
 80095a6:	4606      	mov	r6, r0
 80095a8:	d1d6      	bne.n	8009558 <_svfiprintf_r+0x174>
 80095aa:	89ab      	ldrh	r3, [r5, #12]
 80095ac:	065b      	lsls	r3, r3, #25
 80095ae:	f53f af2d 	bmi.w	800940c <_svfiprintf_r+0x28>
 80095b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80095b4:	e72c      	b.n	8009410 <_svfiprintf_r+0x2c>
 80095b6:	ab03      	add	r3, sp, #12
 80095b8:	9300      	str	r3, [sp, #0]
 80095ba:	462a      	mov	r2, r5
 80095bc:	4b05      	ldr	r3, [pc, #20]	@ (80095d4 <_svfiprintf_r+0x1f0>)
 80095be:	a904      	add	r1, sp, #16
 80095c0:	4638      	mov	r0, r7
 80095c2:	f7fc ff3d 	bl	8006440 <_printf_i>
 80095c6:	e7ed      	b.n	80095a4 <_svfiprintf_r+0x1c0>
 80095c8:	0800b909 	.word	0x0800b909
 80095cc:	0800b913 	.word	0x0800b913
 80095d0:	08005f11 	.word	0x08005f11
 80095d4:	0800932d 	.word	0x0800932d
 80095d8:	0800b90f 	.word	0x0800b90f

080095dc <__sfputc_r>:
 80095dc:	6893      	ldr	r3, [r2, #8]
 80095de:	3b01      	subs	r3, #1
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	b410      	push	{r4}
 80095e4:	6093      	str	r3, [r2, #8]
 80095e6:	da08      	bge.n	80095fa <__sfputc_r+0x1e>
 80095e8:	6994      	ldr	r4, [r2, #24]
 80095ea:	42a3      	cmp	r3, r4
 80095ec:	db01      	blt.n	80095f2 <__sfputc_r+0x16>
 80095ee:	290a      	cmp	r1, #10
 80095f0:	d103      	bne.n	80095fa <__sfputc_r+0x1e>
 80095f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095f6:	f000 b9df 	b.w	80099b8 <__swbuf_r>
 80095fa:	6813      	ldr	r3, [r2, #0]
 80095fc:	1c58      	adds	r0, r3, #1
 80095fe:	6010      	str	r0, [r2, #0]
 8009600:	7019      	strb	r1, [r3, #0]
 8009602:	4608      	mov	r0, r1
 8009604:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009608:	4770      	bx	lr

0800960a <__sfputs_r>:
 800960a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800960c:	4606      	mov	r6, r0
 800960e:	460f      	mov	r7, r1
 8009610:	4614      	mov	r4, r2
 8009612:	18d5      	adds	r5, r2, r3
 8009614:	42ac      	cmp	r4, r5
 8009616:	d101      	bne.n	800961c <__sfputs_r+0x12>
 8009618:	2000      	movs	r0, #0
 800961a:	e007      	b.n	800962c <__sfputs_r+0x22>
 800961c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009620:	463a      	mov	r2, r7
 8009622:	4630      	mov	r0, r6
 8009624:	f7ff ffda 	bl	80095dc <__sfputc_r>
 8009628:	1c43      	adds	r3, r0, #1
 800962a:	d1f3      	bne.n	8009614 <__sfputs_r+0xa>
 800962c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009630 <_vfiprintf_r>:
 8009630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009634:	460d      	mov	r5, r1
 8009636:	b09d      	sub	sp, #116	@ 0x74
 8009638:	4614      	mov	r4, r2
 800963a:	4698      	mov	r8, r3
 800963c:	4606      	mov	r6, r0
 800963e:	b118      	cbz	r0, 8009648 <_vfiprintf_r+0x18>
 8009640:	6a03      	ldr	r3, [r0, #32]
 8009642:	b90b      	cbnz	r3, 8009648 <_vfiprintf_r+0x18>
 8009644:	f7fd fabc 	bl	8006bc0 <__sinit>
 8009648:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800964a:	07d9      	lsls	r1, r3, #31
 800964c:	d405      	bmi.n	800965a <_vfiprintf_r+0x2a>
 800964e:	89ab      	ldrh	r3, [r5, #12]
 8009650:	059a      	lsls	r2, r3, #22
 8009652:	d402      	bmi.n	800965a <_vfiprintf_r+0x2a>
 8009654:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009656:	f7fd fbdc 	bl	8006e12 <__retarget_lock_acquire_recursive>
 800965a:	89ab      	ldrh	r3, [r5, #12]
 800965c:	071b      	lsls	r3, r3, #28
 800965e:	d501      	bpl.n	8009664 <_vfiprintf_r+0x34>
 8009660:	692b      	ldr	r3, [r5, #16]
 8009662:	b99b      	cbnz	r3, 800968c <_vfiprintf_r+0x5c>
 8009664:	4629      	mov	r1, r5
 8009666:	4630      	mov	r0, r6
 8009668:	f000 f9e4 	bl	8009a34 <__swsetup_r>
 800966c:	b170      	cbz	r0, 800968c <_vfiprintf_r+0x5c>
 800966e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009670:	07dc      	lsls	r4, r3, #31
 8009672:	d504      	bpl.n	800967e <_vfiprintf_r+0x4e>
 8009674:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009678:	b01d      	add	sp, #116	@ 0x74
 800967a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800967e:	89ab      	ldrh	r3, [r5, #12]
 8009680:	0598      	lsls	r0, r3, #22
 8009682:	d4f7      	bmi.n	8009674 <_vfiprintf_r+0x44>
 8009684:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009686:	f7fd fbc5 	bl	8006e14 <__retarget_lock_release_recursive>
 800968a:	e7f3      	b.n	8009674 <_vfiprintf_r+0x44>
 800968c:	2300      	movs	r3, #0
 800968e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009690:	2320      	movs	r3, #32
 8009692:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009696:	f8cd 800c 	str.w	r8, [sp, #12]
 800969a:	2330      	movs	r3, #48	@ 0x30
 800969c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800984c <_vfiprintf_r+0x21c>
 80096a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80096a4:	f04f 0901 	mov.w	r9, #1
 80096a8:	4623      	mov	r3, r4
 80096aa:	469a      	mov	sl, r3
 80096ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096b0:	b10a      	cbz	r2, 80096b6 <_vfiprintf_r+0x86>
 80096b2:	2a25      	cmp	r2, #37	@ 0x25
 80096b4:	d1f9      	bne.n	80096aa <_vfiprintf_r+0x7a>
 80096b6:	ebba 0b04 	subs.w	fp, sl, r4
 80096ba:	d00b      	beq.n	80096d4 <_vfiprintf_r+0xa4>
 80096bc:	465b      	mov	r3, fp
 80096be:	4622      	mov	r2, r4
 80096c0:	4629      	mov	r1, r5
 80096c2:	4630      	mov	r0, r6
 80096c4:	f7ff ffa1 	bl	800960a <__sfputs_r>
 80096c8:	3001      	adds	r0, #1
 80096ca:	f000 80a7 	beq.w	800981c <_vfiprintf_r+0x1ec>
 80096ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096d0:	445a      	add	r2, fp
 80096d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80096d4:	f89a 3000 	ldrb.w	r3, [sl]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	f000 809f 	beq.w	800981c <_vfiprintf_r+0x1ec>
 80096de:	2300      	movs	r3, #0
 80096e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80096e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096e8:	f10a 0a01 	add.w	sl, sl, #1
 80096ec:	9304      	str	r3, [sp, #16]
 80096ee:	9307      	str	r3, [sp, #28]
 80096f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80096f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80096f6:	4654      	mov	r4, sl
 80096f8:	2205      	movs	r2, #5
 80096fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096fe:	4853      	ldr	r0, [pc, #332]	@ (800984c <_vfiprintf_r+0x21c>)
 8009700:	f7f6 fd86 	bl	8000210 <memchr>
 8009704:	9a04      	ldr	r2, [sp, #16]
 8009706:	b9d8      	cbnz	r0, 8009740 <_vfiprintf_r+0x110>
 8009708:	06d1      	lsls	r1, r2, #27
 800970a:	bf44      	itt	mi
 800970c:	2320      	movmi	r3, #32
 800970e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009712:	0713      	lsls	r3, r2, #28
 8009714:	bf44      	itt	mi
 8009716:	232b      	movmi	r3, #43	@ 0x2b
 8009718:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800971c:	f89a 3000 	ldrb.w	r3, [sl]
 8009720:	2b2a      	cmp	r3, #42	@ 0x2a
 8009722:	d015      	beq.n	8009750 <_vfiprintf_r+0x120>
 8009724:	9a07      	ldr	r2, [sp, #28]
 8009726:	4654      	mov	r4, sl
 8009728:	2000      	movs	r0, #0
 800972a:	f04f 0c0a 	mov.w	ip, #10
 800972e:	4621      	mov	r1, r4
 8009730:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009734:	3b30      	subs	r3, #48	@ 0x30
 8009736:	2b09      	cmp	r3, #9
 8009738:	d94b      	bls.n	80097d2 <_vfiprintf_r+0x1a2>
 800973a:	b1b0      	cbz	r0, 800976a <_vfiprintf_r+0x13a>
 800973c:	9207      	str	r2, [sp, #28]
 800973e:	e014      	b.n	800976a <_vfiprintf_r+0x13a>
 8009740:	eba0 0308 	sub.w	r3, r0, r8
 8009744:	fa09 f303 	lsl.w	r3, r9, r3
 8009748:	4313      	orrs	r3, r2
 800974a:	9304      	str	r3, [sp, #16]
 800974c:	46a2      	mov	sl, r4
 800974e:	e7d2      	b.n	80096f6 <_vfiprintf_r+0xc6>
 8009750:	9b03      	ldr	r3, [sp, #12]
 8009752:	1d19      	adds	r1, r3, #4
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	9103      	str	r1, [sp, #12]
 8009758:	2b00      	cmp	r3, #0
 800975a:	bfbb      	ittet	lt
 800975c:	425b      	neglt	r3, r3
 800975e:	f042 0202 	orrlt.w	r2, r2, #2
 8009762:	9307      	strge	r3, [sp, #28]
 8009764:	9307      	strlt	r3, [sp, #28]
 8009766:	bfb8      	it	lt
 8009768:	9204      	strlt	r2, [sp, #16]
 800976a:	7823      	ldrb	r3, [r4, #0]
 800976c:	2b2e      	cmp	r3, #46	@ 0x2e
 800976e:	d10a      	bne.n	8009786 <_vfiprintf_r+0x156>
 8009770:	7863      	ldrb	r3, [r4, #1]
 8009772:	2b2a      	cmp	r3, #42	@ 0x2a
 8009774:	d132      	bne.n	80097dc <_vfiprintf_r+0x1ac>
 8009776:	9b03      	ldr	r3, [sp, #12]
 8009778:	1d1a      	adds	r2, r3, #4
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	9203      	str	r2, [sp, #12]
 800977e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009782:	3402      	adds	r4, #2
 8009784:	9305      	str	r3, [sp, #20]
 8009786:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800985c <_vfiprintf_r+0x22c>
 800978a:	7821      	ldrb	r1, [r4, #0]
 800978c:	2203      	movs	r2, #3
 800978e:	4650      	mov	r0, sl
 8009790:	f7f6 fd3e 	bl	8000210 <memchr>
 8009794:	b138      	cbz	r0, 80097a6 <_vfiprintf_r+0x176>
 8009796:	9b04      	ldr	r3, [sp, #16]
 8009798:	eba0 000a 	sub.w	r0, r0, sl
 800979c:	2240      	movs	r2, #64	@ 0x40
 800979e:	4082      	lsls	r2, r0
 80097a0:	4313      	orrs	r3, r2
 80097a2:	3401      	adds	r4, #1
 80097a4:	9304      	str	r3, [sp, #16]
 80097a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097aa:	4829      	ldr	r0, [pc, #164]	@ (8009850 <_vfiprintf_r+0x220>)
 80097ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80097b0:	2206      	movs	r2, #6
 80097b2:	f7f6 fd2d 	bl	8000210 <memchr>
 80097b6:	2800      	cmp	r0, #0
 80097b8:	d03f      	beq.n	800983a <_vfiprintf_r+0x20a>
 80097ba:	4b26      	ldr	r3, [pc, #152]	@ (8009854 <_vfiprintf_r+0x224>)
 80097bc:	bb1b      	cbnz	r3, 8009806 <_vfiprintf_r+0x1d6>
 80097be:	9b03      	ldr	r3, [sp, #12]
 80097c0:	3307      	adds	r3, #7
 80097c2:	f023 0307 	bic.w	r3, r3, #7
 80097c6:	3308      	adds	r3, #8
 80097c8:	9303      	str	r3, [sp, #12]
 80097ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097cc:	443b      	add	r3, r7
 80097ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80097d0:	e76a      	b.n	80096a8 <_vfiprintf_r+0x78>
 80097d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80097d6:	460c      	mov	r4, r1
 80097d8:	2001      	movs	r0, #1
 80097da:	e7a8      	b.n	800972e <_vfiprintf_r+0xfe>
 80097dc:	2300      	movs	r3, #0
 80097de:	3401      	adds	r4, #1
 80097e0:	9305      	str	r3, [sp, #20]
 80097e2:	4619      	mov	r1, r3
 80097e4:	f04f 0c0a 	mov.w	ip, #10
 80097e8:	4620      	mov	r0, r4
 80097ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097ee:	3a30      	subs	r2, #48	@ 0x30
 80097f0:	2a09      	cmp	r2, #9
 80097f2:	d903      	bls.n	80097fc <_vfiprintf_r+0x1cc>
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d0c6      	beq.n	8009786 <_vfiprintf_r+0x156>
 80097f8:	9105      	str	r1, [sp, #20]
 80097fa:	e7c4      	b.n	8009786 <_vfiprintf_r+0x156>
 80097fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009800:	4604      	mov	r4, r0
 8009802:	2301      	movs	r3, #1
 8009804:	e7f0      	b.n	80097e8 <_vfiprintf_r+0x1b8>
 8009806:	ab03      	add	r3, sp, #12
 8009808:	9300      	str	r3, [sp, #0]
 800980a:	462a      	mov	r2, r5
 800980c:	4b12      	ldr	r3, [pc, #72]	@ (8009858 <_vfiprintf_r+0x228>)
 800980e:	a904      	add	r1, sp, #16
 8009810:	4630      	mov	r0, r6
 8009812:	f7fc fb7d 	bl	8005f10 <_printf_float>
 8009816:	4607      	mov	r7, r0
 8009818:	1c78      	adds	r0, r7, #1
 800981a:	d1d6      	bne.n	80097ca <_vfiprintf_r+0x19a>
 800981c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800981e:	07d9      	lsls	r1, r3, #31
 8009820:	d405      	bmi.n	800982e <_vfiprintf_r+0x1fe>
 8009822:	89ab      	ldrh	r3, [r5, #12]
 8009824:	059a      	lsls	r2, r3, #22
 8009826:	d402      	bmi.n	800982e <_vfiprintf_r+0x1fe>
 8009828:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800982a:	f7fd faf3 	bl	8006e14 <__retarget_lock_release_recursive>
 800982e:	89ab      	ldrh	r3, [r5, #12]
 8009830:	065b      	lsls	r3, r3, #25
 8009832:	f53f af1f 	bmi.w	8009674 <_vfiprintf_r+0x44>
 8009836:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009838:	e71e      	b.n	8009678 <_vfiprintf_r+0x48>
 800983a:	ab03      	add	r3, sp, #12
 800983c:	9300      	str	r3, [sp, #0]
 800983e:	462a      	mov	r2, r5
 8009840:	4b05      	ldr	r3, [pc, #20]	@ (8009858 <_vfiprintf_r+0x228>)
 8009842:	a904      	add	r1, sp, #16
 8009844:	4630      	mov	r0, r6
 8009846:	f7fc fdfb 	bl	8006440 <_printf_i>
 800984a:	e7e4      	b.n	8009816 <_vfiprintf_r+0x1e6>
 800984c:	0800b909 	.word	0x0800b909
 8009850:	0800b913 	.word	0x0800b913
 8009854:	08005f11 	.word	0x08005f11
 8009858:	0800960b 	.word	0x0800960b
 800985c:	0800b90f 	.word	0x0800b90f

08009860 <__sflush_r>:
 8009860:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009868:	0716      	lsls	r6, r2, #28
 800986a:	4605      	mov	r5, r0
 800986c:	460c      	mov	r4, r1
 800986e:	d454      	bmi.n	800991a <__sflush_r+0xba>
 8009870:	684b      	ldr	r3, [r1, #4]
 8009872:	2b00      	cmp	r3, #0
 8009874:	dc02      	bgt.n	800987c <__sflush_r+0x1c>
 8009876:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009878:	2b00      	cmp	r3, #0
 800987a:	dd48      	ble.n	800990e <__sflush_r+0xae>
 800987c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800987e:	2e00      	cmp	r6, #0
 8009880:	d045      	beq.n	800990e <__sflush_r+0xae>
 8009882:	2300      	movs	r3, #0
 8009884:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009888:	682f      	ldr	r7, [r5, #0]
 800988a:	6a21      	ldr	r1, [r4, #32]
 800988c:	602b      	str	r3, [r5, #0]
 800988e:	d030      	beq.n	80098f2 <__sflush_r+0x92>
 8009890:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009892:	89a3      	ldrh	r3, [r4, #12]
 8009894:	0759      	lsls	r1, r3, #29
 8009896:	d505      	bpl.n	80098a4 <__sflush_r+0x44>
 8009898:	6863      	ldr	r3, [r4, #4]
 800989a:	1ad2      	subs	r2, r2, r3
 800989c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800989e:	b10b      	cbz	r3, 80098a4 <__sflush_r+0x44>
 80098a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80098a2:	1ad2      	subs	r2, r2, r3
 80098a4:	2300      	movs	r3, #0
 80098a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80098a8:	6a21      	ldr	r1, [r4, #32]
 80098aa:	4628      	mov	r0, r5
 80098ac:	47b0      	blx	r6
 80098ae:	1c43      	adds	r3, r0, #1
 80098b0:	89a3      	ldrh	r3, [r4, #12]
 80098b2:	d106      	bne.n	80098c2 <__sflush_r+0x62>
 80098b4:	6829      	ldr	r1, [r5, #0]
 80098b6:	291d      	cmp	r1, #29
 80098b8:	d82b      	bhi.n	8009912 <__sflush_r+0xb2>
 80098ba:	4a2a      	ldr	r2, [pc, #168]	@ (8009964 <__sflush_r+0x104>)
 80098bc:	410a      	asrs	r2, r1
 80098be:	07d6      	lsls	r6, r2, #31
 80098c0:	d427      	bmi.n	8009912 <__sflush_r+0xb2>
 80098c2:	2200      	movs	r2, #0
 80098c4:	6062      	str	r2, [r4, #4]
 80098c6:	04d9      	lsls	r1, r3, #19
 80098c8:	6922      	ldr	r2, [r4, #16]
 80098ca:	6022      	str	r2, [r4, #0]
 80098cc:	d504      	bpl.n	80098d8 <__sflush_r+0x78>
 80098ce:	1c42      	adds	r2, r0, #1
 80098d0:	d101      	bne.n	80098d6 <__sflush_r+0x76>
 80098d2:	682b      	ldr	r3, [r5, #0]
 80098d4:	b903      	cbnz	r3, 80098d8 <__sflush_r+0x78>
 80098d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80098d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80098da:	602f      	str	r7, [r5, #0]
 80098dc:	b1b9      	cbz	r1, 800990e <__sflush_r+0xae>
 80098de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80098e2:	4299      	cmp	r1, r3
 80098e4:	d002      	beq.n	80098ec <__sflush_r+0x8c>
 80098e6:	4628      	mov	r0, r5
 80098e8:	f7fe f8ea 	bl	8007ac0 <_free_r>
 80098ec:	2300      	movs	r3, #0
 80098ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80098f0:	e00d      	b.n	800990e <__sflush_r+0xae>
 80098f2:	2301      	movs	r3, #1
 80098f4:	4628      	mov	r0, r5
 80098f6:	47b0      	blx	r6
 80098f8:	4602      	mov	r2, r0
 80098fa:	1c50      	adds	r0, r2, #1
 80098fc:	d1c9      	bne.n	8009892 <__sflush_r+0x32>
 80098fe:	682b      	ldr	r3, [r5, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d0c6      	beq.n	8009892 <__sflush_r+0x32>
 8009904:	2b1d      	cmp	r3, #29
 8009906:	d001      	beq.n	800990c <__sflush_r+0xac>
 8009908:	2b16      	cmp	r3, #22
 800990a:	d11e      	bne.n	800994a <__sflush_r+0xea>
 800990c:	602f      	str	r7, [r5, #0]
 800990e:	2000      	movs	r0, #0
 8009910:	e022      	b.n	8009958 <__sflush_r+0xf8>
 8009912:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009916:	b21b      	sxth	r3, r3
 8009918:	e01b      	b.n	8009952 <__sflush_r+0xf2>
 800991a:	690f      	ldr	r7, [r1, #16]
 800991c:	2f00      	cmp	r7, #0
 800991e:	d0f6      	beq.n	800990e <__sflush_r+0xae>
 8009920:	0793      	lsls	r3, r2, #30
 8009922:	680e      	ldr	r6, [r1, #0]
 8009924:	bf08      	it	eq
 8009926:	694b      	ldreq	r3, [r1, #20]
 8009928:	600f      	str	r7, [r1, #0]
 800992a:	bf18      	it	ne
 800992c:	2300      	movne	r3, #0
 800992e:	eba6 0807 	sub.w	r8, r6, r7
 8009932:	608b      	str	r3, [r1, #8]
 8009934:	f1b8 0f00 	cmp.w	r8, #0
 8009938:	dde9      	ble.n	800990e <__sflush_r+0xae>
 800993a:	6a21      	ldr	r1, [r4, #32]
 800993c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800993e:	4643      	mov	r3, r8
 8009940:	463a      	mov	r2, r7
 8009942:	4628      	mov	r0, r5
 8009944:	47b0      	blx	r6
 8009946:	2800      	cmp	r0, #0
 8009948:	dc08      	bgt.n	800995c <__sflush_r+0xfc>
 800994a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800994e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009952:	81a3      	strh	r3, [r4, #12]
 8009954:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800995c:	4407      	add	r7, r0
 800995e:	eba8 0800 	sub.w	r8, r8, r0
 8009962:	e7e7      	b.n	8009934 <__sflush_r+0xd4>
 8009964:	dfbffffe 	.word	0xdfbffffe

08009968 <_fflush_r>:
 8009968:	b538      	push	{r3, r4, r5, lr}
 800996a:	690b      	ldr	r3, [r1, #16]
 800996c:	4605      	mov	r5, r0
 800996e:	460c      	mov	r4, r1
 8009970:	b913      	cbnz	r3, 8009978 <_fflush_r+0x10>
 8009972:	2500      	movs	r5, #0
 8009974:	4628      	mov	r0, r5
 8009976:	bd38      	pop	{r3, r4, r5, pc}
 8009978:	b118      	cbz	r0, 8009982 <_fflush_r+0x1a>
 800997a:	6a03      	ldr	r3, [r0, #32]
 800997c:	b90b      	cbnz	r3, 8009982 <_fflush_r+0x1a>
 800997e:	f7fd f91f 	bl	8006bc0 <__sinit>
 8009982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d0f3      	beq.n	8009972 <_fflush_r+0xa>
 800998a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800998c:	07d0      	lsls	r0, r2, #31
 800998e:	d404      	bmi.n	800999a <_fflush_r+0x32>
 8009990:	0599      	lsls	r1, r3, #22
 8009992:	d402      	bmi.n	800999a <_fflush_r+0x32>
 8009994:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009996:	f7fd fa3c 	bl	8006e12 <__retarget_lock_acquire_recursive>
 800999a:	4628      	mov	r0, r5
 800999c:	4621      	mov	r1, r4
 800999e:	f7ff ff5f 	bl	8009860 <__sflush_r>
 80099a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80099a4:	07da      	lsls	r2, r3, #31
 80099a6:	4605      	mov	r5, r0
 80099a8:	d4e4      	bmi.n	8009974 <_fflush_r+0xc>
 80099aa:	89a3      	ldrh	r3, [r4, #12]
 80099ac:	059b      	lsls	r3, r3, #22
 80099ae:	d4e1      	bmi.n	8009974 <_fflush_r+0xc>
 80099b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099b2:	f7fd fa2f 	bl	8006e14 <__retarget_lock_release_recursive>
 80099b6:	e7dd      	b.n	8009974 <_fflush_r+0xc>

080099b8 <__swbuf_r>:
 80099b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ba:	460e      	mov	r6, r1
 80099bc:	4614      	mov	r4, r2
 80099be:	4605      	mov	r5, r0
 80099c0:	b118      	cbz	r0, 80099ca <__swbuf_r+0x12>
 80099c2:	6a03      	ldr	r3, [r0, #32]
 80099c4:	b90b      	cbnz	r3, 80099ca <__swbuf_r+0x12>
 80099c6:	f7fd f8fb 	bl	8006bc0 <__sinit>
 80099ca:	69a3      	ldr	r3, [r4, #24]
 80099cc:	60a3      	str	r3, [r4, #8]
 80099ce:	89a3      	ldrh	r3, [r4, #12]
 80099d0:	071a      	lsls	r2, r3, #28
 80099d2:	d501      	bpl.n	80099d8 <__swbuf_r+0x20>
 80099d4:	6923      	ldr	r3, [r4, #16]
 80099d6:	b943      	cbnz	r3, 80099ea <__swbuf_r+0x32>
 80099d8:	4621      	mov	r1, r4
 80099da:	4628      	mov	r0, r5
 80099dc:	f000 f82a 	bl	8009a34 <__swsetup_r>
 80099e0:	b118      	cbz	r0, 80099ea <__swbuf_r+0x32>
 80099e2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80099e6:	4638      	mov	r0, r7
 80099e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099ea:	6823      	ldr	r3, [r4, #0]
 80099ec:	6922      	ldr	r2, [r4, #16]
 80099ee:	1a98      	subs	r0, r3, r2
 80099f0:	6963      	ldr	r3, [r4, #20]
 80099f2:	b2f6      	uxtb	r6, r6
 80099f4:	4283      	cmp	r3, r0
 80099f6:	4637      	mov	r7, r6
 80099f8:	dc05      	bgt.n	8009a06 <__swbuf_r+0x4e>
 80099fa:	4621      	mov	r1, r4
 80099fc:	4628      	mov	r0, r5
 80099fe:	f7ff ffb3 	bl	8009968 <_fflush_r>
 8009a02:	2800      	cmp	r0, #0
 8009a04:	d1ed      	bne.n	80099e2 <__swbuf_r+0x2a>
 8009a06:	68a3      	ldr	r3, [r4, #8]
 8009a08:	3b01      	subs	r3, #1
 8009a0a:	60a3      	str	r3, [r4, #8]
 8009a0c:	6823      	ldr	r3, [r4, #0]
 8009a0e:	1c5a      	adds	r2, r3, #1
 8009a10:	6022      	str	r2, [r4, #0]
 8009a12:	701e      	strb	r6, [r3, #0]
 8009a14:	6962      	ldr	r2, [r4, #20]
 8009a16:	1c43      	adds	r3, r0, #1
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	d004      	beq.n	8009a26 <__swbuf_r+0x6e>
 8009a1c:	89a3      	ldrh	r3, [r4, #12]
 8009a1e:	07db      	lsls	r3, r3, #31
 8009a20:	d5e1      	bpl.n	80099e6 <__swbuf_r+0x2e>
 8009a22:	2e0a      	cmp	r6, #10
 8009a24:	d1df      	bne.n	80099e6 <__swbuf_r+0x2e>
 8009a26:	4621      	mov	r1, r4
 8009a28:	4628      	mov	r0, r5
 8009a2a:	f7ff ff9d 	bl	8009968 <_fflush_r>
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	d0d9      	beq.n	80099e6 <__swbuf_r+0x2e>
 8009a32:	e7d6      	b.n	80099e2 <__swbuf_r+0x2a>

08009a34 <__swsetup_r>:
 8009a34:	b538      	push	{r3, r4, r5, lr}
 8009a36:	4b29      	ldr	r3, [pc, #164]	@ (8009adc <__swsetup_r+0xa8>)
 8009a38:	4605      	mov	r5, r0
 8009a3a:	6818      	ldr	r0, [r3, #0]
 8009a3c:	460c      	mov	r4, r1
 8009a3e:	b118      	cbz	r0, 8009a48 <__swsetup_r+0x14>
 8009a40:	6a03      	ldr	r3, [r0, #32]
 8009a42:	b90b      	cbnz	r3, 8009a48 <__swsetup_r+0x14>
 8009a44:	f7fd f8bc 	bl	8006bc0 <__sinit>
 8009a48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a4c:	0719      	lsls	r1, r3, #28
 8009a4e:	d422      	bmi.n	8009a96 <__swsetup_r+0x62>
 8009a50:	06da      	lsls	r2, r3, #27
 8009a52:	d407      	bmi.n	8009a64 <__swsetup_r+0x30>
 8009a54:	2209      	movs	r2, #9
 8009a56:	602a      	str	r2, [r5, #0]
 8009a58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a5c:	81a3      	strh	r3, [r4, #12]
 8009a5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a62:	e033      	b.n	8009acc <__swsetup_r+0x98>
 8009a64:	0758      	lsls	r0, r3, #29
 8009a66:	d512      	bpl.n	8009a8e <__swsetup_r+0x5a>
 8009a68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a6a:	b141      	cbz	r1, 8009a7e <__swsetup_r+0x4a>
 8009a6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a70:	4299      	cmp	r1, r3
 8009a72:	d002      	beq.n	8009a7a <__swsetup_r+0x46>
 8009a74:	4628      	mov	r0, r5
 8009a76:	f7fe f823 	bl	8007ac0 <_free_r>
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a7e:	89a3      	ldrh	r3, [r4, #12]
 8009a80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009a84:	81a3      	strh	r3, [r4, #12]
 8009a86:	2300      	movs	r3, #0
 8009a88:	6063      	str	r3, [r4, #4]
 8009a8a:	6923      	ldr	r3, [r4, #16]
 8009a8c:	6023      	str	r3, [r4, #0]
 8009a8e:	89a3      	ldrh	r3, [r4, #12]
 8009a90:	f043 0308 	orr.w	r3, r3, #8
 8009a94:	81a3      	strh	r3, [r4, #12]
 8009a96:	6923      	ldr	r3, [r4, #16]
 8009a98:	b94b      	cbnz	r3, 8009aae <__swsetup_r+0x7a>
 8009a9a:	89a3      	ldrh	r3, [r4, #12]
 8009a9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009aa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009aa4:	d003      	beq.n	8009aae <__swsetup_r+0x7a>
 8009aa6:	4621      	mov	r1, r4
 8009aa8:	4628      	mov	r0, r5
 8009aaa:	f000 fc5d 	bl	800a368 <__smakebuf_r>
 8009aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ab2:	f013 0201 	ands.w	r2, r3, #1
 8009ab6:	d00a      	beq.n	8009ace <__swsetup_r+0x9a>
 8009ab8:	2200      	movs	r2, #0
 8009aba:	60a2      	str	r2, [r4, #8]
 8009abc:	6962      	ldr	r2, [r4, #20]
 8009abe:	4252      	negs	r2, r2
 8009ac0:	61a2      	str	r2, [r4, #24]
 8009ac2:	6922      	ldr	r2, [r4, #16]
 8009ac4:	b942      	cbnz	r2, 8009ad8 <__swsetup_r+0xa4>
 8009ac6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009aca:	d1c5      	bne.n	8009a58 <__swsetup_r+0x24>
 8009acc:	bd38      	pop	{r3, r4, r5, pc}
 8009ace:	0799      	lsls	r1, r3, #30
 8009ad0:	bf58      	it	pl
 8009ad2:	6962      	ldrpl	r2, [r4, #20]
 8009ad4:	60a2      	str	r2, [r4, #8]
 8009ad6:	e7f4      	b.n	8009ac2 <__swsetup_r+0x8e>
 8009ad8:	2000      	movs	r0, #0
 8009ada:	e7f7      	b.n	8009acc <__swsetup_r+0x98>
 8009adc:	20000018 	.word	0x20000018

08009ae0 <memmove>:
 8009ae0:	4288      	cmp	r0, r1
 8009ae2:	b510      	push	{r4, lr}
 8009ae4:	eb01 0402 	add.w	r4, r1, r2
 8009ae8:	d902      	bls.n	8009af0 <memmove+0x10>
 8009aea:	4284      	cmp	r4, r0
 8009aec:	4623      	mov	r3, r4
 8009aee:	d807      	bhi.n	8009b00 <memmove+0x20>
 8009af0:	1e43      	subs	r3, r0, #1
 8009af2:	42a1      	cmp	r1, r4
 8009af4:	d008      	beq.n	8009b08 <memmove+0x28>
 8009af6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009afa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009afe:	e7f8      	b.n	8009af2 <memmove+0x12>
 8009b00:	4402      	add	r2, r0
 8009b02:	4601      	mov	r1, r0
 8009b04:	428a      	cmp	r2, r1
 8009b06:	d100      	bne.n	8009b0a <memmove+0x2a>
 8009b08:	bd10      	pop	{r4, pc}
 8009b0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b12:	e7f7      	b.n	8009b04 <memmove+0x24>

08009b14 <strncmp>:
 8009b14:	b510      	push	{r4, lr}
 8009b16:	b16a      	cbz	r2, 8009b34 <strncmp+0x20>
 8009b18:	3901      	subs	r1, #1
 8009b1a:	1884      	adds	r4, r0, r2
 8009b1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b20:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d103      	bne.n	8009b30 <strncmp+0x1c>
 8009b28:	42a0      	cmp	r0, r4
 8009b2a:	d001      	beq.n	8009b30 <strncmp+0x1c>
 8009b2c:	2a00      	cmp	r2, #0
 8009b2e:	d1f5      	bne.n	8009b1c <strncmp+0x8>
 8009b30:	1ad0      	subs	r0, r2, r3
 8009b32:	bd10      	pop	{r4, pc}
 8009b34:	4610      	mov	r0, r2
 8009b36:	e7fc      	b.n	8009b32 <strncmp+0x1e>

08009b38 <_sbrk_r>:
 8009b38:	b538      	push	{r3, r4, r5, lr}
 8009b3a:	4d06      	ldr	r5, [pc, #24]	@ (8009b54 <_sbrk_r+0x1c>)
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	4604      	mov	r4, r0
 8009b40:	4608      	mov	r0, r1
 8009b42:	602b      	str	r3, [r5, #0]
 8009b44:	f7f8 fa36 	bl	8001fb4 <_sbrk>
 8009b48:	1c43      	adds	r3, r0, #1
 8009b4a:	d102      	bne.n	8009b52 <_sbrk_r+0x1a>
 8009b4c:	682b      	ldr	r3, [r5, #0]
 8009b4e:	b103      	cbz	r3, 8009b52 <_sbrk_r+0x1a>
 8009b50:	6023      	str	r3, [r4, #0]
 8009b52:	bd38      	pop	{r3, r4, r5, pc}
 8009b54:	20000524 	.word	0x20000524

08009b58 <memcpy>:
 8009b58:	440a      	add	r2, r1
 8009b5a:	4291      	cmp	r1, r2
 8009b5c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009b60:	d100      	bne.n	8009b64 <memcpy+0xc>
 8009b62:	4770      	bx	lr
 8009b64:	b510      	push	{r4, lr}
 8009b66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b6e:	4291      	cmp	r1, r2
 8009b70:	d1f9      	bne.n	8009b66 <memcpy+0xe>
 8009b72:	bd10      	pop	{r4, pc}
 8009b74:	0000      	movs	r0, r0
	...

08009b78 <nan>:
 8009b78:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009b80 <nan+0x8>
 8009b7c:	4770      	bx	lr
 8009b7e:	bf00      	nop
 8009b80:	00000000 	.word	0x00000000
 8009b84:	7ff80000 	.word	0x7ff80000

08009b88 <__assert_func>:
 8009b88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b8a:	4614      	mov	r4, r2
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	4b09      	ldr	r3, [pc, #36]	@ (8009bb4 <__assert_func+0x2c>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4605      	mov	r5, r0
 8009b94:	68d8      	ldr	r0, [r3, #12]
 8009b96:	b954      	cbnz	r4, 8009bae <__assert_func+0x26>
 8009b98:	4b07      	ldr	r3, [pc, #28]	@ (8009bb8 <__assert_func+0x30>)
 8009b9a:	461c      	mov	r4, r3
 8009b9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ba0:	9100      	str	r1, [sp, #0]
 8009ba2:	462b      	mov	r3, r5
 8009ba4:	4905      	ldr	r1, [pc, #20]	@ (8009bbc <__assert_func+0x34>)
 8009ba6:	f000 fba7 	bl	800a2f8 <fiprintf>
 8009baa:	f000 fc3b 	bl	800a424 <abort>
 8009bae:	4b04      	ldr	r3, [pc, #16]	@ (8009bc0 <__assert_func+0x38>)
 8009bb0:	e7f4      	b.n	8009b9c <__assert_func+0x14>
 8009bb2:	bf00      	nop
 8009bb4:	20000018 	.word	0x20000018
 8009bb8:	0800b95d 	.word	0x0800b95d
 8009bbc:	0800b92f 	.word	0x0800b92f
 8009bc0:	0800b922 	.word	0x0800b922

08009bc4 <_calloc_r>:
 8009bc4:	b570      	push	{r4, r5, r6, lr}
 8009bc6:	fba1 5402 	umull	r5, r4, r1, r2
 8009bca:	b93c      	cbnz	r4, 8009bdc <_calloc_r+0x18>
 8009bcc:	4629      	mov	r1, r5
 8009bce:	f7fd ffeb 	bl	8007ba8 <_malloc_r>
 8009bd2:	4606      	mov	r6, r0
 8009bd4:	b928      	cbnz	r0, 8009be2 <_calloc_r+0x1e>
 8009bd6:	2600      	movs	r6, #0
 8009bd8:	4630      	mov	r0, r6
 8009bda:	bd70      	pop	{r4, r5, r6, pc}
 8009bdc:	220c      	movs	r2, #12
 8009bde:	6002      	str	r2, [r0, #0]
 8009be0:	e7f9      	b.n	8009bd6 <_calloc_r+0x12>
 8009be2:	462a      	mov	r2, r5
 8009be4:	4621      	mov	r1, r4
 8009be6:	f7fd f896 	bl	8006d16 <memset>
 8009bea:	e7f5      	b.n	8009bd8 <_calloc_r+0x14>

08009bec <rshift>:
 8009bec:	6903      	ldr	r3, [r0, #16]
 8009bee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009bf2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009bf6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009bfa:	f100 0414 	add.w	r4, r0, #20
 8009bfe:	dd45      	ble.n	8009c8c <rshift+0xa0>
 8009c00:	f011 011f 	ands.w	r1, r1, #31
 8009c04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009c08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009c0c:	d10c      	bne.n	8009c28 <rshift+0x3c>
 8009c0e:	f100 0710 	add.w	r7, r0, #16
 8009c12:	4629      	mov	r1, r5
 8009c14:	42b1      	cmp	r1, r6
 8009c16:	d334      	bcc.n	8009c82 <rshift+0x96>
 8009c18:	1a9b      	subs	r3, r3, r2
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	1eea      	subs	r2, r5, #3
 8009c1e:	4296      	cmp	r6, r2
 8009c20:	bf38      	it	cc
 8009c22:	2300      	movcc	r3, #0
 8009c24:	4423      	add	r3, r4
 8009c26:	e015      	b.n	8009c54 <rshift+0x68>
 8009c28:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009c2c:	f1c1 0820 	rsb	r8, r1, #32
 8009c30:	40cf      	lsrs	r7, r1
 8009c32:	f105 0e04 	add.w	lr, r5, #4
 8009c36:	46a1      	mov	r9, r4
 8009c38:	4576      	cmp	r6, lr
 8009c3a:	46f4      	mov	ip, lr
 8009c3c:	d815      	bhi.n	8009c6a <rshift+0x7e>
 8009c3e:	1a9a      	subs	r2, r3, r2
 8009c40:	0092      	lsls	r2, r2, #2
 8009c42:	3a04      	subs	r2, #4
 8009c44:	3501      	adds	r5, #1
 8009c46:	42ae      	cmp	r6, r5
 8009c48:	bf38      	it	cc
 8009c4a:	2200      	movcc	r2, #0
 8009c4c:	18a3      	adds	r3, r4, r2
 8009c4e:	50a7      	str	r7, [r4, r2]
 8009c50:	b107      	cbz	r7, 8009c54 <rshift+0x68>
 8009c52:	3304      	adds	r3, #4
 8009c54:	1b1a      	subs	r2, r3, r4
 8009c56:	42a3      	cmp	r3, r4
 8009c58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009c5c:	bf08      	it	eq
 8009c5e:	2300      	moveq	r3, #0
 8009c60:	6102      	str	r2, [r0, #16]
 8009c62:	bf08      	it	eq
 8009c64:	6143      	streq	r3, [r0, #20]
 8009c66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c6a:	f8dc c000 	ldr.w	ip, [ip]
 8009c6e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009c72:	ea4c 0707 	orr.w	r7, ip, r7
 8009c76:	f849 7b04 	str.w	r7, [r9], #4
 8009c7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009c7e:	40cf      	lsrs	r7, r1
 8009c80:	e7da      	b.n	8009c38 <rshift+0x4c>
 8009c82:	f851 cb04 	ldr.w	ip, [r1], #4
 8009c86:	f847 cf04 	str.w	ip, [r7, #4]!
 8009c8a:	e7c3      	b.n	8009c14 <rshift+0x28>
 8009c8c:	4623      	mov	r3, r4
 8009c8e:	e7e1      	b.n	8009c54 <rshift+0x68>

08009c90 <__hexdig_fun>:
 8009c90:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009c94:	2b09      	cmp	r3, #9
 8009c96:	d802      	bhi.n	8009c9e <__hexdig_fun+0xe>
 8009c98:	3820      	subs	r0, #32
 8009c9a:	b2c0      	uxtb	r0, r0
 8009c9c:	4770      	bx	lr
 8009c9e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009ca2:	2b05      	cmp	r3, #5
 8009ca4:	d801      	bhi.n	8009caa <__hexdig_fun+0x1a>
 8009ca6:	3847      	subs	r0, #71	@ 0x47
 8009ca8:	e7f7      	b.n	8009c9a <__hexdig_fun+0xa>
 8009caa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009cae:	2b05      	cmp	r3, #5
 8009cb0:	d801      	bhi.n	8009cb6 <__hexdig_fun+0x26>
 8009cb2:	3827      	subs	r0, #39	@ 0x27
 8009cb4:	e7f1      	b.n	8009c9a <__hexdig_fun+0xa>
 8009cb6:	2000      	movs	r0, #0
 8009cb8:	4770      	bx	lr
	...

08009cbc <__gethex>:
 8009cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc0:	b085      	sub	sp, #20
 8009cc2:	468a      	mov	sl, r1
 8009cc4:	9302      	str	r3, [sp, #8]
 8009cc6:	680b      	ldr	r3, [r1, #0]
 8009cc8:	9001      	str	r0, [sp, #4]
 8009cca:	4690      	mov	r8, r2
 8009ccc:	1c9c      	adds	r4, r3, #2
 8009cce:	46a1      	mov	r9, r4
 8009cd0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009cd4:	2830      	cmp	r0, #48	@ 0x30
 8009cd6:	d0fa      	beq.n	8009cce <__gethex+0x12>
 8009cd8:	eba9 0303 	sub.w	r3, r9, r3
 8009cdc:	f1a3 0b02 	sub.w	fp, r3, #2
 8009ce0:	f7ff ffd6 	bl	8009c90 <__hexdig_fun>
 8009ce4:	4605      	mov	r5, r0
 8009ce6:	2800      	cmp	r0, #0
 8009ce8:	d168      	bne.n	8009dbc <__gethex+0x100>
 8009cea:	49a0      	ldr	r1, [pc, #640]	@ (8009f6c <__gethex+0x2b0>)
 8009cec:	2201      	movs	r2, #1
 8009cee:	4648      	mov	r0, r9
 8009cf0:	f7ff ff10 	bl	8009b14 <strncmp>
 8009cf4:	4607      	mov	r7, r0
 8009cf6:	2800      	cmp	r0, #0
 8009cf8:	d167      	bne.n	8009dca <__gethex+0x10e>
 8009cfa:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009cfe:	4626      	mov	r6, r4
 8009d00:	f7ff ffc6 	bl	8009c90 <__hexdig_fun>
 8009d04:	2800      	cmp	r0, #0
 8009d06:	d062      	beq.n	8009dce <__gethex+0x112>
 8009d08:	4623      	mov	r3, r4
 8009d0a:	7818      	ldrb	r0, [r3, #0]
 8009d0c:	2830      	cmp	r0, #48	@ 0x30
 8009d0e:	4699      	mov	r9, r3
 8009d10:	f103 0301 	add.w	r3, r3, #1
 8009d14:	d0f9      	beq.n	8009d0a <__gethex+0x4e>
 8009d16:	f7ff ffbb 	bl	8009c90 <__hexdig_fun>
 8009d1a:	fab0 f580 	clz	r5, r0
 8009d1e:	096d      	lsrs	r5, r5, #5
 8009d20:	f04f 0b01 	mov.w	fp, #1
 8009d24:	464a      	mov	r2, r9
 8009d26:	4616      	mov	r6, r2
 8009d28:	3201      	adds	r2, #1
 8009d2a:	7830      	ldrb	r0, [r6, #0]
 8009d2c:	f7ff ffb0 	bl	8009c90 <__hexdig_fun>
 8009d30:	2800      	cmp	r0, #0
 8009d32:	d1f8      	bne.n	8009d26 <__gethex+0x6a>
 8009d34:	498d      	ldr	r1, [pc, #564]	@ (8009f6c <__gethex+0x2b0>)
 8009d36:	2201      	movs	r2, #1
 8009d38:	4630      	mov	r0, r6
 8009d3a:	f7ff feeb 	bl	8009b14 <strncmp>
 8009d3e:	2800      	cmp	r0, #0
 8009d40:	d13f      	bne.n	8009dc2 <__gethex+0x106>
 8009d42:	b944      	cbnz	r4, 8009d56 <__gethex+0x9a>
 8009d44:	1c74      	adds	r4, r6, #1
 8009d46:	4622      	mov	r2, r4
 8009d48:	4616      	mov	r6, r2
 8009d4a:	3201      	adds	r2, #1
 8009d4c:	7830      	ldrb	r0, [r6, #0]
 8009d4e:	f7ff ff9f 	bl	8009c90 <__hexdig_fun>
 8009d52:	2800      	cmp	r0, #0
 8009d54:	d1f8      	bne.n	8009d48 <__gethex+0x8c>
 8009d56:	1ba4      	subs	r4, r4, r6
 8009d58:	00a7      	lsls	r7, r4, #2
 8009d5a:	7833      	ldrb	r3, [r6, #0]
 8009d5c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009d60:	2b50      	cmp	r3, #80	@ 0x50
 8009d62:	d13e      	bne.n	8009de2 <__gethex+0x126>
 8009d64:	7873      	ldrb	r3, [r6, #1]
 8009d66:	2b2b      	cmp	r3, #43	@ 0x2b
 8009d68:	d033      	beq.n	8009dd2 <__gethex+0x116>
 8009d6a:	2b2d      	cmp	r3, #45	@ 0x2d
 8009d6c:	d034      	beq.n	8009dd8 <__gethex+0x11c>
 8009d6e:	1c71      	adds	r1, r6, #1
 8009d70:	2400      	movs	r4, #0
 8009d72:	7808      	ldrb	r0, [r1, #0]
 8009d74:	f7ff ff8c 	bl	8009c90 <__hexdig_fun>
 8009d78:	1e43      	subs	r3, r0, #1
 8009d7a:	b2db      	uxtb	r3, r3
 8009d7c:	2b18      	cmp	r3, #24
 8009d7e:	d830      	bhi.n	8009de2 <__gethex+0x126>
 8009d80:	f1a0 0210 	sub.w	r2, r0, #16
 8009d84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009d88:	f7ff ff82 	bl	8009c90 <__hexdig_fun>
 8009d8c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8009d90:	fa5f fc8c 	uxtb.w	ip, ip
 8009d94:	f1bc 0f18 	cmp.w	ip, #24
 8009d98:	f04f 030a 	mov.w	r3, #10
 8009d9c:	d91e      	bls.n	8009ddc <__gethex+0x120>
 8009d9e:	b104      	cbz	r4, 8009da2 <__gethex+0xe6>
 8009da0:	4252      	negs	r2, r2
 8009da2:	4417      	add	r7, r2
 8009da4:	f8ca 1000 	str.w	r1, [sl]
 8009da8:	b1ed      	cbz	r5, 8009de6 <__gethex+0x12a>
 8009daa:	f1bb 0f00 	cmp.w	fp, #0
 8009dae:	bf0c      	ite	eq
 8009db0:	2506      	moveq	r5, #6
 8009db2:	2500      	movne	r5, #0
 8009db4:	4628      	mov	r0, r5
 8009db6:	b005      	add	sp, #20
 8009db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dbc:	2500      	movs	r5, #0
 8009dbe:	462c      	mov	r4, r5
 8009dc0:	e7b0      	b.n	8009d24 <__gethex+0x68>
 8009dc2:	2c00      	cmp	r4, #0
 8009dc4:	d1c7      	bne.n	8009d56 <__gethex+0x9a>
 8009dc6:	4627      	mov	r7, r4
 8009dc8:	e7c7      	b.n	8009d5a <__gethex+0x9e>
 8009dca:	464e      	mov	r6, r9
 8009dcc:	462f      	mov	r7, r5
 8009dce:	2501      	movs	r5, #1
 8009dd0:	e7c3      	b.n	8009d5a <__gethex+0x9e>
 8009dd2:	2400      	movs	r4, #0
 8009dd4:	1cb1      	adds	r1, r6, #2
 8009dd6:	e7cc      	b.n	8009d72 <__gethex+0xb6>
 8009dd8:	2401      	movs	r4, #1
 8009dda:	e7fb      	b.n	8009dd4 <__gethex+0x118>
 8009ddc:	fb03 0002 	mla	r0, r3, r2, r0
 8009de0:	e7ce      	b.n	8009d80 <__gethex+0xc4>
 8009de2:	4631      	mov	r1, r6
 8009de4:	e7de      	b.n	8009da4 <__gethex+0xe8>
 8009de6:	eba6 0309 	sub.w	r3, r6, r9
 8009dea:	3b01      	subs	r3, #1
 8009dec:	4629      	mov	r1, r5
 8009dee:	2b07      	cmp	r3, #7
 8009df0:	dc0a      	bgt.n	8009e08 <__gethex+0x14c>
 8009df2:	9801      	ldr	r0, [sp, #4]
 8009df4:	f7fd ff64 	bl	8007cc0 <_Balloc>
 8009df8:	4604      	mov	r4, r0
 8009dfa:	b940      	cbnz	r0, 8009e0e <__gethex+0x152>
 8009dfc:	4b5c      	ldr	r3, [pc, #368]	@ (8009f70 <__gethex+0x2b4>)
 8009dfe:	4602      	mov	r2, r0
 8009e00:	21e4      	movs	r1, #228	@ 0xe4
 8009e02:	485c      	ldr	r0, [pc, #368]	@ (8009f74 <__gethex+0x2b8>)
 8009e04:	f7ff fec0 	bl	8009b88 <__assert_func>
 8009e08:	3101      	adds	r1, #1
 8009e0a:	105b      	asrs	r3, r3, #1
 8009e0c:	e7ef      	b.n	8009dee <__gethex+0x132>
 8009e0e:	f100 0a14 	add.w	sl, r0, #20
 8009e12:	2300      	movs	r3, #0
 8009e14:	4655      	mov	r5, sl
 8009e16:	469b      	mov	fp, r3
 8009e18:	45b1      	cmp	r9, r6
 8009e1a:	d337      	bcc.n	8009e8c <__gethex+0x1d0>
 8009e1c:	f845 bb04 	str.w	fp, [r5], #4
 8009e20:	eba5 050a 	sub.w	r5, r5, sl
 8009e24:	10ad      	asrs	r5, r5, #2
 8009e26:	6125      	str	r5, [r4, #16]
 8009e28:	4658      	mov	r0, fp
 8009e2a:	f7fe f83b 	bl	8007ea4 <__hi0bits>
 8009e2e:	016d      	lsls	r5, r5, #5
 8009e30:	f8d8 6000 	ldr.w	r6, [r8]
 8009e34:	1a2d      	subs	r5, r5, r0
 8009e36:	42b5      	cmp	r5, r6
 8009e38:	dd54      	ble.n	8009ee4 <__gethex+0x228>
 8009e3a:	1bad      	subs	r5, r5, r6
 8009e3c:	4629      	mov	r1, r5
 8009e3e:	4620      	mov	r0, r4
 8009e40:	f7fe fbcf 	bl	80085e2 <__any_on>
 8009e44:	4681      	mov	r9, r0
 8009e46:	b178      	cbz	r0, 8009e68 <__gethex+0x1ac>
 8009e48:	1e6b      	subs	r3, r5, #1
 8009e4a:	1159      	asrs	r1, r3, #5
 8009e4c:	f003 021f 	and.w	r2, r3, #31
 8009e50:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009e54:	f04f 0901 	mov.w	r9, #1
 8009e58:	fa09 f202 	lsl.w	r2, r9, r2
 8009e5c:	420a      	tst	r2, r1
 8009e5e:	d003      	beq.n	8009e68 <__gethex+0x1ac>
 8009e60:	454b      	cmp	r3, r9
 8009e62:	dc36      	bgt.n	8009ed2 <__gethex+0x216>
 8009e64:	f04f 0902 	mov.w	r9, #2
 8009e68:	4629      	mov	r1, r5
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	f7ff febe 	bl	8009bec <rshift>
 8009e70:	442f      	add	r7, r5
 8009e72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009e76:	42bb      	cmp	r3, r7
 8009e78:	da42      	bge.n	8009f00 <__gethex+0x244>
 8009e7a:	9801      	ldr	r0, [sp, #4]
 8009e7c:	4621      	mov	r1, r4
 8009e7e:	f7fd ff5f 	bl	8007d40 <_Bfree>
 8009e82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e84:	2300      	movs	r3, #0
 8009e86:	6013      	str	r3, [r2, #0]
 8009e88:	25a3      	movs	r5, #163	@ 0xa3
 8009e8a:	e793      	b.n	8009db4 <__gethex+0xf8>
 8009e8c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009e90:	2a2e      	cmp	r2, #46	@ 0x2e
 8009e92:	d012      	beq.n	8009eba <__gethex+0x1fe>
 8009e94:	2b20      	cmp	r3, #32
 8009e96:	d104      	bne.n	8009ea2 <__gethex+0x1e6>
 8009e98:	f845 bb04 	str.w	fp, [r5], #4
 8009e9c:	f04f 0b00 	mov.w	fp, #0
 8009ea0:	465b      	mov	r3, fp
 8009ea2:	7830      	ldrb	r0, [r6, #0]
 8009ea4:	9303      	str	r3, [sp, #12]
 8009ea6:	f7ff fef3 	bl	8009c90 <__hexdig_fun>
 8009eaa:	9b03      	ldr	r3, [sp, #12]
 8009eac:	f000 000f 	and.w	r0, r0, #15
 8009eb0:	4098      	lsls	r0, r3
 8009eb2:	ea4b 0b00 	orr.w	fp, fp, r0
 8009eb6:	3304      	adds	r3, #4
 8009eb8:	e7ae      	b.n	8009e18 <__gethex+0x15c>
 8009eba:	45b1      	cmp	r9, r6
 8009ebc:	d8ea      	bhi.n	8009e94 <__gethex+0x1d8>
 8009ebe:	492b      	ldr	r1, [pc, #172]	@ (8009f6c <__gethex+0x2b0>)
 8009ec0:	9303      	str	r3, [sp, #12]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	4630      	mov	r0, r6
 8009ec6:	f7ff fe25 	bl	8009b14 <strncmp>
 8009eca:	9b03      	ldr	r3, [sp, #12]
 8009ecc:	2800      	cmp	r0, #0
 8009ece:	d1e1      	bne.n	8009e94 <__gethex+0x1d8>
 8009ed0:	e7a2      	b.n	8009e18 <__gethex+0x15c>
 8009ed2:	1ea9      	subs	r1, r5, #2
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	f7fe fb84 	bl	80085e2 <__any_on>
 8009eda:	2800      	cmp	r0, #0
 8009edc:	d0c2      	beq.n	8009e64 <__gethex+0x1a8>
 8009ede:	f04f 0903 	mov.w	r9, #3
 8009ee2:	e7c1      	b.n	8009e68 <__gethex+0x1ac>
 8009ee4:	da09      	bge.n	8009efa <__gethex+0x23e>
 8009ee6:	1b75      	subs	r5, r6, r5
 8009ee8:	4621      	mov	r1, r4
 8009eea:	9801      	ldr	r0, [sp, #4]
 8009eec:	462a      	mov	r2, r5
 8009eee:	f7fe f93f 	bl	8008170 <__lshift>
 8009ef2:	1b7f      	subs	r7, r7, r5
 8009ef4:	4604      	mov	r4, r0
 8009ef6:	f100 0a14 	add.w	sl, r0, #20
 8009efa:	f04f 0900 	mov.w	r9, #0
 8009efe:	e7b8      	b.n	8009e72 <__gethex+0x1b6>
 8009f00:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009f04:	42bd      	cmp	r5, r7
 8009f06:	dd6f      	ble.n	8009fe8 <__gethex+0x32c>
 8009f08:	1bed      	subs	r5, r5, r7
 8009f0a:	42ae      	cmp	r6, r5
 8009f0c:	dc34      	bgt.n	8009f78 <__gethex+0x2bc>
 8009f0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009f12:	2b02      	cmp	r3, #2
 8009f14:	d022      	beq.n	8009f5c <__gethex+0x2a0>
 8009f16:	2b03      	cmp	r3, #3
 8009f18:	d024      	beq.n	8009f64 <__gethex+0x2a8>
 8009f1a:	2b01      	cmp	r3, #1
 8009f1c:	d115      	bne.n	8009f4a <__gethex+0x28e>
 8009f1e:	42ae      	cmp	r6, r5
 8009f20:	d113      	bne.n	8009f4a <__gethex+0x28e>
 8009f22:	2e01      	cmp	r6, #1
 8009f24:	d10b      	bne.n	8009f3e <__gethex+0x282>
 8009f26:	9a02      	ldr	r2, [sp, #8]
 8009f28:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009f2c:	6013      	str	r3, [r2, #0]
 8009f2e:	2301      	movs	r3, #1
 8009f30:	6123      	str	r3, [r4, #16]
 8009f32:	f8ca 3000 	str.w	r3, [sl]
 8009f36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f38:	2562      	movs	r5, #98	@ 0x62
 8009f3a:	601c      	str	r4, [r3, #0]
 8009f3c:	e73a      	b.n	8009db4 <__gethex+0xf8>
 8009f3e:	1e71      	subs	r1, r6, #1
 8009f40:	4620      	mov	r0, r4
 8009f42:	f7fe fb4e 	bl	80085e2 <__any_on>
 8009f46:	2800      	cmp	r0, #0
 8009f48:	d1ed      	bne.n	8009f26 <__gethex+0x26a>
 8009f4a:	9801      	ldr	r0, [sp, #4]
 8009f4c:	4621      	mov	r1, r4
 8009f4e:	f7fd fef7 	bl	8007d40 <_Bfree>
 8009f52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f54:	2300      	movs	r3, #0
 8009f56:	6013      	str	r3, [r2, #0]
 8009f58:	2550      	movs	r5, #80	@ 0x50
 8009f5a:	e72b      	b.n	8009db4 <__gethex+0xf8>
 8009f5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d1f3      	bne.n	8009f4a <__gethex+0x28e>
 8009f62:	e7e0      	b.n	8009f26 <__gethex+0x26a>
 8009f64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d1dd      	bne.n	8009f26 <__gethex+0x26a>
 8009f6a:	e7ee      	b.n	8009f4a <__gethex+0x28e>
 8009f6c:	0800b7b0 	.word	0x0800b7b0
 8009f70:	0800b649 	.word	0x0800b649
 8009f74:	0800b95e 	.word	0x0800b95e
 8009f78:	1e6f      	subs	r7, r5, #1
 8009f7a:	f1b9 0f00 	cmp.w	r9, #0
 8009f7e:	d130      	bne.n	8009fe2 <__gethex+0x326>
 8009f80:	b127      	cbz	r7, 8009f8c <__gethex+0x2d0>
 8009f82:	4639      	mov	r1, r7
 8009f84:	4620      	mov	r0, r4
 8009f86:	f7fe fb2c 	bl	80085e2 <__any_on>
 8009f8a:	4681      	mov	r9, r0
 8009f8c:	117a      	asrs	r2, r7, #5
 8009f8e:	2301      	movs	r3, #1
 8009f90:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009f94:	f007 071f 	and.w	r7, r7, #31
 8009f98:	40bb      	lsls	r3, r7
 8009f9a:	4213      	tst	r3, r2
 8009f9c:	4629      	mov	r1, r5
 8009f9e:	4620      	mov	r0, r4
 8009fa0:	bf18      	it	ne
 8009fa2:	f049 0902 	orrne.w	r9, r9, #2
 8009fa6:	f7ff fe21 	bl	8009bec <rshift>
 8009faa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009fae:	1b76      	subs	r6, r6, r5
 8009fb0:	2502      	movs	r5, #2
 8009fb2:	f1b9 0f00 	cmp.w	r9, #0
 8009fb6:	d047      	beq.n	800a048 <__gethex+0x38c>
 8009fb8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009fbc:	2b02      	cmp	r3, #2
 8009fbe:	d015      	beq.n	8009fec <__gethex+0x330>
 8009fc0:	2b03      	cmp	r3, #3
 8009fc2:	d017      	beq.n	8009ff4 <__gethex+0x338>
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d109      	bne.n	8009fdc <__gethex+0x320>
 8009fc8:	f019 0f02 	tst.w	r9, #2
 8009fcc:	d006      	beq.n	8009fdc <__gethex+0x320>
 8009fce:	f8da 3000 	ldr.w	r3, [sl]
 8009fd2:	ea49 0903 	orr.w	r9, r9, r3
 8009fd6:	f019 0f01 	tst.w	r9, #1
 8009fda:	d10e      	bne.n	8009ffa <__gethex+0x33e>
 8009fdc:	f045 0510 	orr.w	r5, r5, #16
 8009fe0:	e032      	b.n	800a048 <__gethex+0x38c>
 8009fe2:	f04f 0901 	mov.w	r9, #1
 8009fe6:	e7d1      	b.n	8009f8c <__gethex+0x2d0>
 8009fe8:	2501      	movs	r5, #1
 8009fea:	e7e2      	b.n	8009fb2 <__gethex+0x2f6>
 8009fec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fee:	f1c3 0301 	rsb	r3, r3, #1
 8009ff2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009ff4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d0f0      	beq.n	8009fdc <__gethex+0x320>
 8009ffa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009ffe:	f104 0314 	add.w	r3, r4, #20
 800a002:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a006:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a00a:	f04f 0c00 	mov.w	ip, #0
 800a00e:	4618      	mov	r0, r3
 800a010:	f853 2b04 	ldr.w	r2, [r3], #4
 800a014:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800a018:	d01b      	beq.n	800a052 <__gethex+0x396>
 800a01a:	3201      	adds	r2, #1
 800a01c:	6002      	str	r2, [r0, #0]
 800a01e:	2d02      	cmp	r5, #2
 800a020:	f104 0314 	add.w	r3, r4, #20
 800a024:	d13c      	bne.n	800a0a0 <__gethex+0x3e4>
 800a026:	f8d8 2000 	ldr.w	r2, [r8]
 800a02a:	3a01      	subs	r2, #1
 800a02c:	42b2      	cmp	r2, r6
 800a02e:	d109      	bne.n	800a044 <__gethex+0x388>
 800a030:	1171      	asrs	r1, r6, #5
 800a032:	2201      	movs	r2, #1
 800a034:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a038:	f006 061f 	and.w	r6, r6, #31
 800a03c:	fa02 f606 	lsl.w	r6, r2, r6
 800a040:	421e      	tst	r6, r3
 800a042:	d13a      	bne.n	800a0ba <__gethex+0x3fe>
 800a044:	f045 0520 	orr.w	r5, r5, #32
 800a048:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a04a:	601c      	str	r4, [r3, #0]
 800a04c:	9b02      	ldr	r3, [sp, #8]
 800a04e:	601f      	str	r7, [r3, #0]
 800a050:	e6b0      	b.n	8009db4 <__gethex+0xf8>
 800a052:	4299      	cmp	r1, r3
 800a054:	f843 cc04 	str.w	ip, [r3, #-4]
 800a058:	d8d9      	bhi.n	800a00e <__gethex+0x352>
 800a05a:	68a3      	ldr	r3, [r4, #8]
 800a05c:	459b      	cmp	fp, r3
 800a05e:	db17      	blt.n	800a090 <__gethex+0x3d4>
 800a060:	6861      	ldr	r1, [r4, #4]
 800a062:	9801      	ldr	r0, [sp, #4]
 800a064:	3101      	adds	r1, #1
 800a066:	f7fd fe2b 	bl	8007cc0 <_Balloc>
 800a06a:	4681      	mov	r9, r0
 800a06c:	b918      	cbnz	r0, 800a076 <__gethex+0x3ba>
 800a06e:	4b1a      	ldr	r3, [pc, #104]	@ (800a0d8 <__gethex+0x41c>)
 800a070:	4602      	mov	r2, r0
 800a072:	2184      	movs	r1, #132	@ 0x84
 800a074:	e6c5      	b.n	8009e02 <__gethex+0x146>
 800a076:	6922      	ldr	r2, [r4, #16]
 800a078:	3202      	adds	r2, #2
 800a07a:	f104 010c 	add.w	r1, r4, #12
 800a07e:	0092      	lsls	r2, r2, #2
 800a080:	300c      	adds	r0, #12
 800a082:	f7ff fd69 	bl	8009b58 <memcpy>
 800a086:	4621      	mov	r1, r4
 800a088:	9801      	ldr	r0, [sp, #4]
 800a08a:	f7fd fe59 	bl	8007d40 <_Bfree>
 800a08e:	464c      	mov	r4, r9
 800a090:	6923      	ldr	r3, [r4, #16]
 800a092:	1c5a      	adds	r2, r3, #1
 800a094:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a098:	6122      	str	r2, [r4, #16]
 800a09a:	2201      	movs	r2, #1
 800a09c:	615a      	str	r2, [r3, #20]
 800a09e:	e7be      	b.n	800a01e <__gethex+0x362>
 800a0a0:	6922      	ldr	r2, [r4, #16]
 800a0a2:	455a      	cmp	r2, fp
 800a0a4:	dd0b      	ble.n	800a0be <__gethex+0x402>
 800a0a6:	2101      	movs	r1, #1
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	f7ff fd9f 	bl	8009bec <rshift>
 800a0ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a0b2:	3701      	adds	r7, #1
 800a0b4:	42bb      	cmp	r3, r7
 800a0b6:	f6ff aee0 	blt.w	8009e7a <__gethex+0x1be>
 800a0ba:	2501      	movs	r5, #1
 800a0bc:	e7c2      	b.n	800a044 <__gethex+0x388>
 800a0be:	f016 061f 	ands.w	r6, r6, #31
 800a0c2:	d0fa      	beq.n	800a0ba <__gethex+0x3fe>
 800a0c4:	4453      	add	r3, sl
 800a0c6:	f1c6 0620 	rsb	r6, r6, #32
 800a0ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a0ce:	f7fd fee9 	bl	8007ea4 <__hi0bits>
 800a0d2:	42b0      	cmp	r0, r6
 800a0d4:	dbe7      	blt.n	800a0a6 <__gethex+0x3ea>
 800a0d6:	e7f0      	b.n	800a0ba <__gethex+0x3fe>
 800a0d8:	0800b649 	.word	0x0800b649

0800a0dc <L_shift>:
 800a0dc:	f1c2 0208 	rsb	r2, r2, #8
 800a0e0:	0092      	lsls	r2, r2, #2
 800a0e2:	b570      	push	{r4, r5, r6, lr}
 800a0e4:	f1c2 0620 	rsb	r6, r2, #32
 800a0e8:	6843      	ldr	r3, [r0, #4]
 800a0ea:	6804      	ldr	r4, [r0, #0]
 800a0ec:	fa03 f506 	lsl.w	r5, r3, r6
 800a0f0:	432c      	orrs	r4, r5
 800a0f2:	40d3      	lsrs	r3, r2
 800a0f4:	6004      	str	r4, [r0, #0]
 800a0f6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a0fa:	4288      	cmp	r0, r1
 800a0fc:	d3f4      	bcc.n	800a0e8 <L_shift+0xc>
 800a0fe:	bd70      	pop	{r4, r5, r6, pc}

0800a100 <__match>:
 800a100:	b530      	push	{r4, r5, lr}
 800a102:	6803      	ldr	r3, [r0, #0]
 800a104:	3301      	adds	r3, #1
 800a106:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a10a:	b914      	cbnz	r4, 800a112 <__match+0x12>
 800a10c:	6003      	str	r3, [r0, #0]
 800a10e:	2001      	movs	r0, #1
 800a110:	bd30      	pop	{r4, r5, pc}
 800a112:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a116:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a11a:	2d19      	cmp	r5, #25
 800a11c:	bf98      	it	ls
 800a11e:	3220      	addls	r2, #32
 800a120:	42a2      	cmp	r2, r4
 800a122:	d0f0      	beq.n	800a106 <__match+0x6>
 800a124:	2000      	movs	r0, #0
 800a126:	e7f3      	b.n	800a110 <__match+0x10>

0800a128 <__hexnan>:
 800a128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a12c:	680b      	ldr	r3, [r1, #0]
 800a12e:	6801      	ldr	r1, [r0, #0]
 800a130:	115e      	asrs	r6, r3, #5
 800a132:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a136:	f013 031f 	ands.w	r3, r3, #31
 800a13a:	b087      	sub	sp, #28
 800a13c:	bf18      	it	ne
 800a13e:	3604      	addne	r6, #4
 800a140:	2500      	movs	r5, #0
 800a142:	1f37      	subs	r7, r6, #4
 800a144:	4682      	mov	sl, r0
 800a146:	4690      	mov	r8, r2
 800a148:	9301      	str	r3, [sp, #4]
 800a14a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a14e:	46b9      	mov	r9, r7
 800a150:	463c      	mov	r4, r7
 800a152:	9502      	str	r5, [sp, #8]
 800a154:	46ab      	mov	fp, r5
 800a156:	784a      	ldrb	r2, [r1, #1]
 800a158:	1c4b      	adds	r3, r1, #1
 800a15a:	9303      	str	r3, [sp, #12]
 800a15c:	b342      	cbz	r2, 800a1b0 <__hexnan+0x88>
 800a15e:	4610      	mov	r0, r2
 800a160:	9105      	str	r1, [sp, #20]
 800a162:	9204      	str	r2, [sp, #16]
 800a164:	f7ff fd94 	bl	8009c90 <__hexdig_fun>
 800a168:	2800      	cmp	r0, #0
 800a16a:	d151      	bne.n	800a210 <__hexnan+0xe8>
 800a16c:	9a04      	ldr	r2, [sp, #16]
 800a16e:	9905      	ldr	r1, [sp, #20]
 800a170:	2a20      	cmp	r2, #32
 800a172:	d818      	bhi.n	800a1a6 <__hexnan+0x7e>
 800a174:	9b02      	ldr	r3, [sp, #8]
 800a176:	459b      	cmp	fp, r3
 800a178:	dd13      	ble.n	800a1a2 <__hexnan+0x7a>
 800a17a:	454c      	cmp	r4, r9
 800a17c:	d206      	bcs.n	800a18c <__hexnan+0x64>
 800a17e:	2d07      	cmp	r5, #7
 800a180:	dc04      	bgt.n	800a18c <__hexnan+0x64>
 800a182:	462a      	mov	r2, r5
 800a184:	4649      	mov	r1, r9
 800a186:	4620      	mov	r0, r4
 800a188:	f7ff ffa8 	bl	800a0dc <L_shift>
 800a18c:	4544      	cmp	r4, r8
 800a18e:	d952      	bls.n	800a236 <__hexnan+0x10e>
 800a190:	2300      	movs	r3, #0
 800a192:	f1a4 0904 	sub.w	r9, r4, #4
 800a196:	f844 3c04 	str.w	r3, [r4, #-4]
 800a19a:	f8cd b008 	str.w	fp, [sp, #8]
 800a19e:	464c      	mov	r4, r9
 800a1a0:	461d      	mov	r5, r3
 800a1a2:	9903      	ldr	r1, [sp, #12]
 800a1a4:	e7d7      	b.n	800a156 <__hexnan+0x2e>
 800a1a6:	2a29      	cmp	r2, #41	@ 0x29
 800a1a8:	d157      	bne.n	800a25a <__hexnan+0x132>
 800a1aa:	3102      	adds	r1, #2
 800a1ac:	f8ca 1000 	str.w	r1, [sl]
 800a1b0:	f1bb 0f00 	cmp.w	fp, #0
 800a1b4:	d051      	beq.n	800a25a <__hexnan+0x132>
 800a1b6:	454c      	cmp	r4, r9
 800a1b8:	d206      	bcs.n	800a1c8 <__hexnan+0xa0>
 800a1ba:	2d07      	cmp	r5, #7
 800a1bc:	dc04      	bgt.n	800a1c8 <__hexnan+0xa0>
 800a1be:	462a      	mov	r2, r5
 800a1c0:	4649      	mov	r1, r9
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	f7ff ff8a 	bl	800a0dc <L_shift>
 800a1c8:	4544      	cmp	r4, r8
 800a1ca:	d936      	bls.n	800a23a <__hexnan+0x112>
 800a1cc:	f1a8 0204 	sub.w	r2, r8, #4
 800a1d0:	4623      	mov	r3, r4
 800a1d2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a1d6:	f842 1f04 	str.w	r1, [r2, #4]!
 800a1da:	429f      	cmp	r7, r3
 800a1dc:	d2f9      	bcs.n	800a1d2 <__hexnan+0xaa>
 800a1de:	1b3b      	subs	r3, r7, r4
 800a1e0:	f023 0303 	bic.w	r3, r3, #3
 800a1e4:	3304      	adds	r3, #4
 800a1e6:	3401      	adds	r4, #1
 800a1e8:	3e03      	subs	r6, #3
 800a1ea:	42b4      	cmp	r4, r6
 800a1ec:	bf88      	it	hi
 800a1ee:	2304      	movhi	r3, #4
 800a1f0:	4443      	add	r3, r8
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f843 2b04 	str.w	r2, [r3], #4
 800a1f8:	429f      	cmp	r7, r3
 800a1fa:	d2fb      	bcs.n	800a1f4 <__hexnan+0xcc>
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	b91b      	cbnz	r3, 800a208 <__hexnan+0xe0>
 800a200:	4547      	cmp	r7, r8
 800a202:	d128      	bne.n	800a256 <__hexnan+0x12e>
 800a204:	2301      	movs	r3, #1
 800a206:	603b      	str	r3, [r7, #0]
 800a208:	2005      	movs	r0, #5
 800a20a:	b007      	add	sp, #28
 800a20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a210:	3501      	adds	r5, #1
 800a212:	2d08      	cmp	r5, #8
 800a214:	f10b 0b01 	add.w	fp, fp, #1
 800a218:	dd06      	ble.n	800a228 <__hexnan+0x100>
 800a21a:	4544      	cmp	r4, r8
 800a21c:	d9c1      	bls.n	800a1a2 <__hexnan+0x7a>
 800a21e:	2300      	movs	r3, #0
 800a220:	f844 3c04 	str.w	r3, [r4, #-4]
 800a224:	2501      	movs	r5, #1
 800a226:	3c04      	subs	r4, #4
 800a228:	6822      	ldr	r2, [r4, #0]
 800a22a:	f000 000f 	and.w	r0, r0, #15
 800a22e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a232:	6020      	str	r0, [r4, #0]
 800a234:	e7b5      	b.n	800a1a2 <__hexnan+0x7a>
 800a236:	2508      	movs	r5, #8
 800a238:	e7b3      	b.n	800a1a2 <__hexnan+0x7a>
 800a23a:	9b01      	ldr	r3, [sp, #4]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d0dd      	beq.n	800a1fc <__hexnan+0xd4>
 800a240:	f1c3 0320 	rsb	r3, r3, #32
 800a244:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a248:	40da      	lsrs	r2, r3
 800a24a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a24e:	4013      	ands	r3, r2
 800a250:	f846 3c04 	str.w	r3, [r6, #-4]
 800a254:	e7d2      	b.n	800a1fc <__hexnan+0xd4>
 800a256:	3f04      	subs	r7, #4
 800a258:	e7d0      	b.n	800a1fc <__hexnan+0xd4>
 800a25a:	2004      	movs	r0, #4
 800a25c:	e7d5      	b.n	800a20a <__hexnan+0xe2>

0800a25e <__ascii_mbtowc>:
 800a25e:	b082      	sub	sp, #8
 800a260:	b901      	cbnz	r1, 800a264 <__ascii_mbtowc+0x6>
 800a262:	a901      	add	r1, sp, #4
 800a264:	b142      	cbz	r2, 800a278 <__ascii_mbtowc+0x1a>
 800a266:	b14b      	cbz	r3, 800a27c <__ascii_mbtowc+0x1e>
 800a268:	7813      	ldrb	r3, [r2, #0]
 800a26a:	600b      	str	r3, [r1, #0]
 800a26c:	7812      	ldrb	r2, [r2, #0]
 800a26e:	1e10      	subs	r0, r2, #0
 800a270:	bf18      	it	ne
 800a272:	2001      	movne	r0, #1
 800a274:	b002      	add	sp, #8
 800a276:	4770      	bx	lr
 800a278:	4610      	mov	r0, r2
 800a27a:	e7fb      	b.n	800a274 <__ascii_mbtowc+0x16>
 800a27c:	f06f 0001 	mvn.w	r0, #1
 800a280:	e7f8      	b.n	800a274 <__ascii_mbtowc+0x16>

0800a282 <_realloc_r>:
 800a282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a286:	4680      	mov	r8, r0
 800a288:	4615      	mov	r5, r2
 800a28a:	460c      	mov	r4, r1
 800a28c:	b921      	cbnz	r1, 800a298 <_realloc_r+0x16>
 800a28e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a292:	4611      	mov	r1, r2
 800a294:	f7fd bc88 	b.w	8007ba8 <_malloc_r>
 800a298:	b92a      	cbnz	r2, 800a2a6 <_realloc_r+0x24>
 800a29a:	f7fd fc11 	bl	8007ac0 <_free_r>
 800a29e:	2400      	movs	r4, #0
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2a6:	f000 f8c4 	bl	800a432 <_malloc_usable_size_r>
 800a2aa:	4285      	cmp	r5, r0
 800a2ac:	4606      	mov	r6, r0
 800a2ae:	d802      	bhi.n	800a2b6 <_realloc_r+0x34>
 800a2b0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a2b4:	d8f4      	bhi.n	800a2a0 <_realloc_r+0x1e>
 800a2b6:	4629      	mov	r1, r5
 800a2b8:	4640      	mov	r0, r8
 800a2ba:	f7fd fc75 	bl	8007ba8 <_malloc_r>
 800a2be:	4607      	mov	r7, r0
 800a2c0:	2800      	cmp	r0, #0
 800a2c2:	d0ec      	beq.n	800a29e <_realloc_r+0x1c>
 800a2c4:	42b5      	cmp	r5, r6
 800a2c6:	462a      	mov	r2, r5
 800a2c8:	4621      	mov	r1, r4
 800a2ca:	bf28      	it	cs
 800a2cc:	4632      	movcs	r2, r6
 800a2ce:	f7ff fc43 	bl	8009b58 <memcpy>
 800a2d2:	4621      	mov	r1, r4
 800a2d4:	4640      	mov	r0, r8
 800a2d6:	f7fd fbf3 	bl	8007ac0 <_free_r>
 800a2da:	463c      	mov	r4, r7
 800a2dc:	e7e0      	b.n	800a2a0 <_realloc_r+0x1e>

0800a2de <__ascii_wctomb>:
 800a2de:	4603      	mov	r3, r0
 800a2e0:	4608      	mov	r0, r1
 800a2e2:	b141      	cbz	r1, 800a2f6 <__ascii_wctomb+0x18>
 800a2e4:	2aff      	cmp	r2, #255	@ 0xff
 800a2e6:	d904      	bls.n	800a2f2 <__ascii_wctomb+0x14>
 800a2e8:	228a      	movs	r2, #138	@ 0x8a
 800a2ea:	601a      	str	r2, [r3, #0]
 800a2ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a2f0:	4770      	bx	lr
 800a2f2:	700a      	strb	r2, [r1, #0]
 800a2f4:	2001      	movs	r0, #1
 800a2f6:	4770      	bx	lr

0800a2f8 <fiprintf>:
 800a2f8:	b40e      	push	{r1, r2, r3}
 800a2fa:	b503      	push	{r0, r1, lr}
 800a2fc:	4601      	mov	r1, r0
 800a2fe:	ab03      	add	r3, sp, #12
 800a300:	4805      	ldr	r0, [pc, #20]	@ (800a318 <fiprintf+0x20>)
 800a302:	f853 2b04 	ldr.w	r2, [r3], #4
 800a306:	6800      	ldr	r0, [r0, #0]
 800a308:	9301      	str	r3, [sp, #4]
 800a30a:	f7ff f991 	bl	8009630 <_vfiprintf_r>
 800a30e:	b002      	add	sp, #8
 800a310:	f85d eb04 	ldr.w	lr, [sp], #4
 800a314:	b003      	add	sp, #12
 800a316:	4770      	bx	lr
 800a318:	20000018 	.word	0x20000018

0800a31c <__swhatbuf_r>:
 800a31c:	b570      	push	{r4, r5, r6, lr}
 800a31e:	460c      	mov	r4, r1
 800a320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a324:	2900      	cmp	r1, #0
 800a326:	b096      	sub	sp, #88	@ 0x58
 800a328:	4615      	mov	r5, r2
 800a32a:	461e      	mov	r6, r3
 800a32c:	da0d      	bge.n	800a34a <__swhatbuf_r+0x2e>
 800a32e:	89a3      	ldrh	r3, [r4, #12]
 800a330:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a334:	f04f 0100 	mov.w	r1, #0
 800a338:	bf14      	ite	ne
 800a33a:	2340      	movne	r3, #64	@ 0x40
 800a33c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a340:	2000      	movs	r0, #0
 800a342:	6031      	str	r1, [r6, #0]
 800a344:	602b      	str	r3, [r5, #0]
 800a346:	b016      	add	sp, #88	@ 0x58
 800a348:	bd70      	pop	{r4, r5, r6, pc}
 800a34a:	466a      	mov	r2, sp
 800a34c:	f000 f848 	bl	800a3e0 <_fstat_r>
 800a350:	2800      	cmp	r0, #0
 800a352:	dbec      	blt.n	800a32e <__swhatbuf_r+0x12>
 800a354:	9901      	ldr	r1, [sp, #4]
 800a356:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a35a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a35e:	4259      	negs	r1, r3
 800a360:	4159      	adcs	r1, r3
 800a362:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a366:	e7eb      	b.n	800a340 <__swhatbuf_r+0x24>

0800a368 <__smakebuf_r>:
 800a368:	898b      	ldrh	r3, [r1, #12]
 800a36a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a36c:	079d      	lsls	r5, r3, #30
 800a36e:	4606      	mov	r6, r0
 800a370:	460c      	mov	r4, r1
 800a372:	d507      	bpl.n	800a384 <__smakebuf_r+0x1c>
 800a374:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a378:	6023      	str	r3, [r4, #0]
 800a37a:	6123      	str	r3, [r4, #16]
 800a37c:	2301      	movs	r3, #1
 800a37e:	6163      	str	r3, [r4, #20]
 800a380:	b003      	add	sp, #12
 800a382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a384:	ab01      	add	r3, sp, #4
 800a386:	466a      	mov	r2, sp
 800a388:	f7ff ffc8 	bl	800a31c <__swhatbuf_r>
 800a38c:	9f00      	ldr	r7, [sp, #0]
 800a38e:	4605      	mov	r5, r0
 800a390:	4639      	mov	r1, r7
 800a392:	4630      	mov	r0, r6
 800a394:	f7fd fc08 	bl	8007ba8 <_malloc_r>
 800a398:	b948      	cbnz	r0, 800a3ae <__smakebuf_r+0x46>
 800a39a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a39e:	059a      	lsls	r2, r3, #22
 800a3a0:	d4ee      	bmi.n	800a380 <__smakebuf_r+0x18>
 800a3a2:	f023 0303 	bic.w	r3, r3, #3
 800a3a6:	f043 0302 	orr.w	r3, r3, #2
 800a3aa:	81a3      	strh	r3, [r4, #12]
 800a3ac:	e7e2      	b.n	800a374 <__smakebuf_r+0xc>
 800a3ae:	89a3      	ldrh	r3, [r4, #12]
 800a3b0:	6020      	str	r0, [r4, #0]
 800a3b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3b6:	81a3      	strh	r3, [r4, #12]
 800a3b8:	9b01      	ldr	r3, [sp, #4]
 800a3ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a3be:	b15b      	cbz	r3, 800a3d8 <__smakebuf_r+0x70>
 800a3c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3c4:	4630      	mov	r0, r6
 800a3c6:	f000 f81d 	bl	800a404 <_isatty_r>
 800a3ca:	b128      	cbz	r0, 800a3d8 <__smakebuf_r+0x70>
 800a3cc:	89a3      	ldrh	r3, [r4, #12]
 800a3ce:	f023 0303 	bic.w	r3, r3, #3
 800a3d2:	f043 0301 	orr.w	r3, r3, #1
 800a3d6:	81a3      	strh	r3, [r4, #12]
 800a3d8:	89a3      	ldrh	r3, [r4, #12]
 800a3da:	431d      	orrs	r5, r3
 800a3dc:	81a5      	strh	r5, [r4, #12]
 800a3de:	e7cf      	b.n	800a380 <__smakebuf_r+0x18>

0800a3e0 <_fstat_r>:
 800a3e0:	b538      	push	{r3, r4, r5, lr}
 800a3e2:	4d07      	ldr	r5, [pc, #28]	@ (800a400 <_fstat_r+0x20>)
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	4604      	mov	r4, r0
 800a3e8:	4608      	mov	r0, r1
 800a3ea:	4611      	mov	r1, r2
 800a3ec:	602b      	str	r3, [r5, #0]
 800a3ee:	f7f7 fdb9 	bl	8001f64 <_fstat>
 800a3f2:	1c43      	adds	r3, r0, #1
 800a3f4:	d102      	bne.n	800a3fc <_fstat_r+0x1c>
 800a3f6:	682b      	ldr	r3, [r5, #0]
 800a3f8:	b103      	cbz	r3, 800a3fc <_fstat_r+0x1c>
 800a3fa:	6023      	str	r3, [r4, #0]
 800a3fc:	bd38      	pop	{r3, r4, r5, pc}
 800a3fe:	bf00      	nop
 800a400:	20000524 	.word	0x20000524

0800a404 <_isatty_r>:
 800a404:	b538      	push	{r3, r4, r5, lr}
 800a406:	4d06      	ldr	r5, [pc, #24]	@ (800a420 <_isatty_r+0x1c>)
 800a408:	2300      	movs	r3, #0
 800a40a:	4604      	mov	r4, r0
 800a40c:	4608      	mov	r0, r1
 800a40e:	602b      	str	r3, [r5, #0]
 800a410:	f7f7 fdb8 	bl	8001f84 <_isatty>
 800a414:	1c43      	adds	r3, r0, #1
 800a416:	d102      	bne.n	800a41e <_isatty_r+0x1a>
 800a418:	682b      	ldr	r3, [r5, #0]
 800a41a:	b103      	cbz	r3, 800a41e <_isatty_r+0x1a>
 800a41c:	6023      	str	r3, [r4, #0]
 800a41e:	bd38      	pop	{r3, r4, r5, pc}
 800a420:	20000524 	.word	0x20000524

0800a424 <abort>:
 800a424:	b508      	push	{r3, lr}
 800a426:	2006      	movs	r0, #6
 800a428:	f000 f834 	bl	800a494 <raise>
 800a42c:	2001      	movs	r0, #1
 800a42e:	f7f7 fd65 	bl	8001efc <_exit>

0800a432 <_malloc_usable_size_r>:
 800a432:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a436:	1f18      	subs	r0, r3, #4
 800a438:	2b00      	cmp	r3, #0
 800a43a:	bfbc      	itt	lt
 800a43c:	580b      	ldrlt	r3, [r1, r0]
 800a43e:	18c0      	addlt	r0, r0, r3
 800a440:	4770      	bx	lr

0800a442 <_raise_r>:
 800a442:	291f      	cmp	r1, #31
 800a444:	b538      	push	{r3, r4, r5, lr}
 800a446:	4605      	mov	r5, r0
 800a448:	460c      	mov	r4, r1
 800a44a:	d904      	bls.n	800a456 <_raise_r+0x14>
 800a44c:	2316      	movs	r3, #22
 800a44e:	6003      	str	r3, [r0, #0]
 800a450:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a454:	bd38      	pop	{r3, r4, r5, pc}
 800a456:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a458:	b112      	cbz	r2, 800a460 <_raise_r+0x1e>
 800a45a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a45e:	b94b      	cbnz	r3, 800a474 <_raise_r+0x32>
 800a460:	4628      	mov	r0, r5
 800a462:	f000 f831 	bl	800a4c8 <_getpid_r>
 800a466:	4622      	mov	r2, r4
 800a468:	4601      	mov	r1, r0
 800a46a:	4628      	mov	r0, r5
 800a46c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a470:	f000 b818 	b.w	800a4a4 <_kill_r>
 800a474:	2b01      	cmp	r3, #1
 800a476:	d00a      	beq.n	800a48e <_raise_r+0x4c>
 800a478:	1c59      	adds	r1, r3, #1
 800a47a:	d103      	bne.n	800a484 <_raise_r+0x42>
 800a47c:	2316      	movs	r3, #22
 800a47e:	6003      	str	r3, [r0, #0]
 800a480:	2001      	movs	r0, #1
 800a482:	e7e7      	b.n	800a454 <_raise_r+0x12>
 800a484:	2100      	movs	r1, #0
 800a486:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a48a:	4620      	mov	r0, r4
 800a48c:	4798      	blx	r3
 800a48e:	2000      	movs	r0, #0
 800a490:	e7e0      	b.n	800a454 <_raise_r+0x12>
	...

0800a494 <raise>:
 800a494:	4b02      	ldr	r3, [pc, #8]	@ (800a4a0 <raise+0xc>)
 800a496:	4601      	mov	r1, r0
 800a498:	6818      	ldr	r0, [r3, #0]
 800a49a:	f7ff bfd2 	b.w	800a442 <_raise_r>
 800a49e:	bf00      	nop
 800a4a0:	20000018 	.word	0x20000018

0800a4a4 <_kill_r>:
 800a4a4:	b538      	push	{r3, r4, r5, lr}
 800a4a6:	4d07      	ldr	r5, [pc, #28]	@ (800a4c4 <_kill_r+0x20>)
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	4604      	mov	r4, r0
 800a4ac:	4608      	mov	r0, r1
 800a4ae:	4611      	mov	r1, r2
 800a4b0:	602b      	str	r3, [r5, #0]
 800a4b2:	f7f7 fd13 	bl	8001edc <_kill>
 800a4b6:	1c43      	adds	r3, r0, #1
 800a4b8:	d102      	bne.n	800a4c0 <_kill_r+0x1c>
 800a4ba:	682b      	ldr	r3, [r5, #0]
 800a4bc:	b103      	cbz	r3, 800a4c0 <_kill_r+0x1c>
 800a4be:	6023      	str	r3, [r4, #0]
 800a4c0:	bd38      	pop	{r3, r4, r5, pc}
 800a4c2:	bf00      	nop
 800a4c4:	20000524 	.word	0x20000524

0800a4c8 <_getpid_r>:
 800a4c8:	f7f7 bd00 	b.w	8001ecc <_getpid>
 800a4cc:	0000      	movs	r0, r0
	...

0800a4d0 <sin>:
 800a4d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a4d2:	ec53 2b10 	vmov	r2, r3, d0
 800a4d6:	4826      	ldr	r0, [pc, #152]	@ (800a570 <sin+0xa0>)
 800a4d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a4dc:	4281      	cmp	r1, r0
 800a4de:	d807      	bhi.n	800a4f0 <sin+0x20>
 800a4e0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800a568 <sin+0x98>
 800a4e4:	2000      	movs	r0, #0
 800a4e6:	b005      	add	sp, #20
 800a4e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4ec:	f000 b90c 	b.w	800a708 <__kernel_sin>
 800a4f0:	4820      	ldr	r0, [pc, #128]	@ (800a574 <sin+0xa4>)
 800a4f2:	4281      	cmp	r1, r0
 800a4f4:	d908      	bls.n	800a508 <sin+0x38>
 800a4f6:	4610      	mov	r0, r2
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	f7f5 fee5 	bl	80002c8 <__aeabi_dsub>
 800a4fe:	ec41 0b10 	vmov	d0, r0, r1
 800a502:	b005      	add	sp, #20
 800a504:	f85d fb04 	ldr.w	pc, [sp], #4
 800a508:	4668      	mov	r0, sp
 800a50a:	f000 f9b9 	bl	800a880 <__ieee754_rem_pio2>
 800a50e:	f000 0003 	and.w	r0, r0, #3
 800a512:	2801      	cmp	r0, #1
 800a514:	d00c      	beq.n	800a530 <sin+0x60>
 800a516:	2802      	cmp	r0, #2
 800a518:	d011      	beq.n	800a53e <sin+0x6e>
 800a51a:	b9e8      	cbnz	r0, 800a558 <sin+0x88>
 800a51c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a520:	ed9d 0b00 	vldr	d0, [sp]
 800a524:	2001      	movs	r0, #1
 800a526:	f000 f8ef 	bl	800a708 <__kernel_sin>
 800a52a:	ec51 0b10 	vmov	r0, r1, d0
 800a52e:	e7e6      	b.n	800a4fe <sin+0x2e>
 800a530:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a534:	ed9d 0b00 	vldr	d0, [sp]
 800a538:	f000 f81e 	bl	800a578 <__kernel_cos>
 800a53c:	e7f5      	b.n	800a52a <sin+0x5a>
 800a53e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a542:	ed9d 0b00 	vldr	d0, [sp]
 800a546:	2001      	movs	r0, #1
 800a548:	f000 f8de 	bl	800a708 <__kernel_sin>
 800a54c:	ec53 2b10 	vmov	r2, r3, d0
 800a550:	4610      	mov	r0, r2
 800a552:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a556:	e7d2      	b.n	800a4fe <sin+0x2e>
 800a558:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a55c:	ed9d 0b00 	vldr	d0, [sp]
 800a560:	f000 f80a 	bl	800a578 <__kernel_cos>
 800a564:	e7f2      	b.n	800a54c <sin+0x7c>
 800a566:	bf00      	nop
	...
 800a570:	3fe921fb 	.word	0x3fe921fb
 800a574:	7fefffff 	.word	0x7fefffff

0800a578 <__kernel_cos>:
 800a578:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a57c:	ec57 6b10 	vmov	r6, r7, d0
 800a580:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a584:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800a588:	ed8d 1b00 	vstr	d1, [sp]
 800a58c:	d206      	bcs.n	800a59c <__kernel_cos+0x24>
 800a58e:	4630      	mov	r0, r6
 800a590:	4639      	mov	r1, r7
 800a592:	f7f6 fb01 	bl	8000b98 <__aeabi_d2iz>
 800a596:	2800      	cmp	r0, #0
 800a598:	f000 8088 	beq.w	800a6ac <__kernel_cos+0x134>
 800a59c:	4632      	mov	r2, r6
 800a59e:	463b      	mov	r3, r7
 800a5a0:	4630      	mov	r0, r6
 800a5a2:	4639      	mov	r1, r7
 800a5a4:	f7f6 f848 	bl	8000638 <__aeabi_dmul>
 800a5a8:	4b51      	ldr	r3, [pc, #324]	@ (800a6f0 <__kernel_cos+0x178>)
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	4604      	mov	r4, r0
 800a5ae:	460d      	mov	r5, r1
 800a5b0:	f7f6 f842 	bl	8000638 <__aeabi_dmul>
 800a5b4:	a340      	add	r3, pc, #256	@ (adr r3, 800a6b8 <__kernel_cos+0x140>)
 800a5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ba:	4682      	mov	sl, r0
 800a5bc:	468b      	mov	fp, r1
 800a5be:	4620      	mov	r0, r4
 800a5c0:	4629      	mov	r1, r5
 800a5c2:	f7f6 f839 	bl	8000638 <__aeabi_dmul>
 800a5c6:	a33e      	add	r3, pc, #248	@ (adr r3, 800a6c0 <__kernel_cos+0x148>)
 800a5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5cc:	f7f5 fe7e 	bl	80002cc <__adddf3>
 800a5d0:	4622      	mov	r2, r4
 800a5d2:	462b      	mov	r3, r5
 800a5d4:	f7f6 f830 	bl	8000638 <__aeabi_dmul>
 800a5d8:	a33b      	add	r3, pc, #236	@ (adr r3, 800a6c8 <__kernel_cos+0x150>)
 800a5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5de:	f7f5 fe73 	bl	80002c8 <__aeabi_dsub>
 800a5e2:	4622      	mov	r2, r4
 800a5e4:	462b      	mov	r3, r5
 800a5e6:	f7f6 f827 	bl	8000638 <__aeabi_dmul>
 800a5ea:	a339      	add	r3, pc, #228	@ (adr r3, 800a6d0 <__kernel_cos+0x158>)
 800a5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f0:	f7f5 fe6c 	bl	80002cc <__adddf3>
 800a5f4:	4622      	mov	r2, r4
 800a5f6:	462b      	mov	r3, r5
 800a5f8:	f7f6 f81e 	bl	8000638 <__aeabi_dmul>
 800a5fc:	a336      	add	r3, pc, #216	@ (adr r3, 800a6d8 <__kernel_cos+0x160>)
 800a5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a602:	f7f5 fe61 	bl	80002c8 <__aeabi_dsub>
 800a606:	4622      	mov	r2, r4
 800a608:	462b      	mov	r3, r5
 800a60a:	f7f6 f815 	bl	8000638 <__aeabi_dmul>
 800a60e:	a334      	add	r3, pc, #208	@ (adr r3, 800a6e0 <__kernel_cos+0x168>)
 800a610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a614:	f7f5 fe5a 	bl	80002cc <__adddf3>
 800a618:	4622      	mov	r2, r4
 800a61a:	462b      	mov	r3, r5
 800a61c:	f7f6 f80c 	bl	8000638 <__aeabi_dmul>
 800a620:	4622      	mov	r2, r4
 800a622:	462b      	mov	r3, r5
 800a624:	f7f6 f808 	bl	8000638 <__aeabi_dmul>
 800a628:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a62c:	4604      	mov	r4, r0
 800a62e:	460d      	mov	r5, r1
 800a630:	4630      	mov	r0, r6
 800a632:	4639      	mov	r1, r7
 800a634:	f7f6 f800 	bl	8000638 <__aeabi_dmul>
 800a638:	460b      	mov	r3, r1
 800a63a:	4602      	mov	r2, r0
 800a63c:	4629      	mov	r1, r5
 800a63e:	4620      	mov	r0, r4
 800a640:	f7f5 fe42 	bl	80002c8 <__aeabi_dsub>
 800a644:	4b2b      	ldr	r3, [pc, #172]	@ (800a6f4 <__kernel_cos+0x17c>)
 800a646:	4598      	cmp	r8, r3
 800a648:	4606      	mov	r6, r0
 800a64a:	460f      	mov	r7, r1
 800a64c:	d810      	bhi.n	800a670 <__kernel_cos+0xf8>
 800a64e:	4602      	mov	r2, r0
 800a650:	460b      	mov	r3, r1
 800a652:	4650      	mov	r0, sl
 800a654:	4659      	mov	r1, fp
 800a656:	f7f5 fe37 	bl	80002c8 <__aeabi_dsub>
 800a65a:	460b      	mov	r3, r1
 800a65c:	4926      	ldr	r1, [pc, #152]	@ (800a6f8 <__kernel_cos+0x180>)
 800a65e:	4602      	mov	r2, r0
 800a660:	2000      	movs	r0, #0
 800a662:	f7f5 fe31 	bl	80002c8 <__aeabi_dsub>
 800a666:	ec41 0b10 	vmov	d0, r0, r1
 800a66a:	b003      	add	sp, #12
 800a66c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a670:	4b22      	ldr	r3, [pc, #136]	@ (800a6fc <__kernel_cos+0x184>)
 800a672:	4921      	ldr	r1, [pc, #132]	@ (800a6f8 <__kernel_cos+0x180>)
 800a674:	4598      	cmp	r8, r3
 800a676:	bf8c      	ite	hi
 800a678:	4d21      	ldrhi	r5, [pc, #132]	@ (800a700 <__kernel_cos+0x188>)
 800a67a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800a67e:	2400      	movs	r4, #0
 800a680:	4622      	mov	r2, r4
 800a682:	462b      	mov	r3, r5
 800a684:	2000      	movs	r0, #0
 800a686:	f7f5 fe1f 	bl	80002c8 <__aeabi_dsub>
 800a68a:	4622      	mov	r2, r4
 800a68c:	4680      	mov	r8, r0
 800a68e:	4689      	mov	r9, r1
 800a690:	462b      	mov	r3, r5
 800a692:	4650      	mov	r0, sl
 800a694:	4659      	mov	r1, fp
 800a696:	f7f5 fe17 	bl	80002c8 <__aeabi_dsub>
 800a69a:	4632      	mov	r2, r6
 800a69c:	463b      	mov	r3, r7
 800a69e:	f7f5 fe13 	bl	80002c8 <__aeabi_dsub>
 800a6a2:	4602      	mov	r2, r0
 800a6a4:	460b      	mov	r3, r1
 800a6a6:	4640      	mov	r0, r8
 800a6a8:	4649      	mov	r1, r9
 800a6aa:	e7da      	b.n	800a662 <__kernel_cos+0xea>
 800a6ac:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800a6e8 <__kernel_cos+0x170>
 800a6b0:	e7db      	b.n	800a66a <__kernel_cos+0xf2>
 800a6b2:	bf00      	nop
 800a6b4:	f3af 8000 	nop.w
 800a6b8:	be8838d4 	.word	0xbe8838d4
 800a6bc:	bda8fae9 	.word	0xbda8fae9
 800a6c0:	bdb4b1c4 	.word	0xbdb4b1c4
 800a6c4:	3e21ee9e 	.word	0x3e21ee9e
 800a6c8:	809c52ad 	.word	0x809c52ad
 800a6cc:	3e927e4f 	.word	0x3e927e4f
 800a6d0:	19cb1590 	.word	0x19cb1590
 800a6d4:	3efa01a0 	.word	0x3efa01a0
 800a6d8:	16c15177 	.word	0x16c15177
 800a6dc:	3f56c16c 	.word	0x3f56c16c
 800a6e0:	5555554c 	.word	0x5555554c
 800a6e4:	3fa55555 	.word	0x3fa55555
 800a6e8:	00000000 	.word	0x00000000
 800a6ec:	3ff00000 	.word	0x3ff00000
 800a6f0:	3fe00000 	.word	0x3fe00000
 800a6f4:	3fd33332 	.word	0x3fd33332
 800a6f8:	3ff00000 	.word	0x3ff00000
 800a6fc:	3fe90000 	.word	0x3fe90000
 800a700:	3fd20000 	.word	0x3fd20000
 800a704:	00000000 	.word	0x00000000

0800a708 <__kernel_sin>:
 800a708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a70c:	ec55 4b10 	vmov	r4, r5, d0
 800a710:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a714:	b085      	sub	sp, #20
 800a716:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800a71a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800a71e:	4680      	mov	r8, r0
 800a720:	d205      	bcs.n	800a72e <__kernel_sin+0x26>
 800a722:	4620      	mov	r0, r4
 800a724:	4629      	mov	r1, r5
 800a726:	f7f6 fa37 	bl	8000b98 <__aeabi_d2iz>
 800a72a:	2800      	cmp	r0, #0
 800a72c:	d052      	beq.n	800a7d4 <__kernel_sin+0xcc>
 800a72e:	4622      	mov	r2, r4
 800a730:	462b      	mov	r3, r5
 800a732:	4620      	mov	r0, r4
 800a734:	4629      	mov	r1, r5
 800a736:	f7f5 ff7f 	bl	8000638 <__aeabi_dmul>
 800a73a:	4682      	mov	sl, r0
 800a73c:	468b      	mov	fp, r1
 800a73e:	4602      	mov	r2, r0
 800a740:	460b      	mov	r3, r1
 800a742:	4620      	mov	r0, r4
 800a744:	4629      	mov	r1, r5
 800a746:	f7f5 ff77 	bl	8000638 <__aeabi_dmul>
 800a74a:	a342      	add	r3, pc, #264	@ (adr r3, 800a854 <__kernel_sin+0x14c>)
 800a74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a750:	e9cd 0100 	strd	r0, r1, [sp]
 800a754:	4650      	mov	r0, sl
 800a756:	4659      	mov	r1, fp
 800a758:	f7f5 ff6e 	bl	8000638 <__aeabi_dmul>
 800a75c:	a33f      	add	r3, pc, #252	@ (adr r3, 800a85c <__kernel_sin+0x154>)
 800a75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a762:	f7f5 fdb1 	bl	80002c8 <__aeabi_dsub>
 800a766:	4652      	mov	r2, sl
 800a768:	465b      	mov	r3, fp
 800a76a:	f7f5 ff65 	bl	8000638 <__aeabi_dmul>
 800a76e:	a33d      	add	r3, pc, #244	@ (adr r3, 800a864 <__kernel_sin+0x15c>)
 800a770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a774:	f7f5 fdaa 	bl	80002cc <__adddf3>
 800a778:	4652      	mov	r2, sl
 800a77a:	465b      	mov	r3, fp
 800a77c:	f7f5 ff5c 	bl	8000638 <__aeabi_dmul>
 800a780:	a33a      	add	r3, pc, #232	@ (adr r3, 800a86c <__kernel_sin+0x164>)
 800a782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a786:	f7f5 fd9f 	bl	80002c8 <__aeabi_dsub>
 800a78a:	4652      	mov	r2, sl
 800a78c:	465b      	mov	r3, fp
 800a78e:	f7f5 ff53 	bl	8000638 <__aeabi_dmul>
 800a792:	a338      	add	r3, pc, #224	@ (adr r3, 800a874 <__kernel_sin+0x16c>)
 800a794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a798:	f7f5 fd98 	bl	80002cc <__adddf3>
 800a79c:	4606      	mov	r6, r0
 800a79e:	460f      	mov	r7, r1
 800a7a0:	f1b8 0f00 	cmp.w	r8, #0
 800a7a4:	d11b      	bne.n	800a7de <__kernel_sin+0xd6>
 800a7a6:	4602      	mov	r2, r0
 800a7a8:	460b      	mov	r3, r1
 800a7aa:	4650      	mov	r0, sl
 800a7ac:	4659      	mov	r1, fp
 800a7ae:	f7f5 ff43 	bl	8000638 <__aeabi_dmul>
 800a7b2:	a325      	add	r3, pc, #148	@ (adr r3, 800a848 <__kernel_sin+0x140>)
 800a7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b8:	f7f5 fd86 	bl	80002c8 <__aeabi_dsub>
 800a7bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a7c0:	f7f5 ff3a 	bl	8000638 <__aeabi_dmul>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	460b      	mov	r3, r1
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	4629      	mov	r1, r5
 800a7cc:	f7f5 fd7e 	bl	80002cc <__adddf3>
 800a7d0:	4604      	mov	r4, r0
 800a7d2:	460d      	mov	r5, r1
 800a7d4:	ec45 4b10 	vmov	d0, r4, r5
 800a7d8:	b005      	add	sp, #20
 800a7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7e2:	4b1b      	ldr	r3, [pc, #108]	@ (800a850 <__kernel_sin+0x148>)
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	f7f5 ff27 	bl	8000638 <__aeabi_dmul>
 800a7ea:	4632      	mov	r2, r6
 800a7ec:	4680      	mov	r8, r0
 800a7ee:	4689      	mov	r9, r1
 800a7f0:	463b      	mov	r3, r7
 800a7f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7f6:	f7f5 ff1f 	bl	8000638 <__aeabi_dmul>
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	4640      	mov	r0, r8
 800a800:	4649      	mov	r1, r9
 800a802:	f7f5 fd61 	bl	80002c8 <__aeabi_dsub>
 800a806:	4652      	mov	r2, sl
 800a808:	465b      	mov	r3, fp
 800a80a:	f7f5 ff15 	bl	8000638 <__aeabi_dmul>
 800a80e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a812:	f7f5 fd59 	bl	80002c8 <__aeabi_dsub>
 800a816:	a30c      	add	r3, pc, #48	@ (adr r3, 800a848 <__kernel_sin+0x140>)
 800a818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a81c:	4606      	mov	r6, r0
 800a81e:	460f      	mov	r7, r1
 800a820:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a824:	f7f5 ff08 	bl	8000638 <__aeabi_dmul>
 800a828:	4602      	mov	r2, r0
 800a82a:	460b      	mov	r3, r1
 800a82c:	4630      	mov	r0, r6
 800a82e:	4639      	mov	r1, r7
 800a830:	f7f5 fd4c 	bl	80002cc <__adddf3>
 800a834:	4602      	mov	r2, r0
 800a836:	460b      	mov	r3, r1
 800a838:	4620      	mov	r0, r4
 800a83a:	4629      	mov	r1, r5
 800a83c:	f7f5 fd44 	bl	80002c8 <__aeabi_dsub>
 800a840:	e7c6      	b.n	800a7d0 <__kernel_sin+0xc8>
 800a842:	bf00      	nop
 800a844:	f3af 8000 	nop.w
 800a848:	55555549 	.word	0x55555549
 800a84c:	3fc55555 	.word	0x3fc55555
 800a850:	3fe00000 	.word	0x3fe00000
 800a854:	5acfd57c 	.word	0x5acfd57c
 800a858:	3de5d93a 	.word	0x3de5d93a
 800a85c:	8a2b9ceb 	.word	0x8a2b9ceb
 800a860:	3e5ae5e6 	.word	0x3e5ae5e6
 800a864:	57b1fe7d 	.word	0x57b1fe7d
 800a868:	3ec71de3 	.word	0x3ec71de3
 800a86c:	19c161d5 	.word	0x19c161d5
 800a870:	3f2a01a0 	.word	0x3f2a01a0
 800a874:	1110f8a6 	.word	0x1110f8a6
 800a878:	3f811111 	.word	0x3f811111
 800a87c:	00000000 	.word	0x00000000

0800a880 <__ieee754_rem_pio2>:
 800a880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a884:	ec57 6b10 	vmov	r6, r7, d0
 800a888:	4bc5      	ldr	r3, [pc, #788]	@ (800aba0 <__ieee754_rem_pio2+0x320>)
 800a88a:	b08d      	sub	sp, #52	@ 0x34
 800a88c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a890:	4598      	cmp	r8, r3
 800a892:	4604      	mov	r4, r0
 800a894:	9704      	str	r7, [sp, #16]
 800a896:	d807      	bhi.n	800a8a8 <__ieee754_rem_pio2+0x28>
 800a898:	2200      	movs	r2, #0
 800a89a:	2300      	movs	r3, #0
 800a89c:	ed80 0b00 	vstr	d0, [r0]
 800a8a0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a8a4:	2500      	movs	r5, #0
 800a8a6:	e028      	b.n	800a8fa <__ieee754_rem_pio2+0x7a>
 800a8a8:	4bbe      	ldr	r3, [pc, #760]	@ (800aba4 <__ieee754_rem_pio2+0x324>)
 800a8aa:	4598      	cmp	r8, r3
 800a8ac:	d878      	bhi.n	800a9a0 <__ieee754_rem_pio2+0x120>
 800a8ae:	9b04      	ldr	r3, [sp, #16]
 800a8b0:	4dbd      	ldr	r5, [pc, #756]	@ (800aba8 <__ieee754_rem_pio2+0x328>)
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	4630      	mov	r0, r6
 800a8b6:	a3ac      	add	r3, pc, #688	@ (adr r3, 800ab68 <__ieee754_rem_pio2+0x2e8>)
 800a8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8bc:	4639      	mov	r1, r7
 800a8be:	dd38      	ble.n	800a932 <__ieee754_rem_pio2+0xb2>
 800a8c0:	f7f5 fd02 	bl	80002c8 <__aeabi_dsub>
 800a8c4:	45a8      	cmp	r8, r5
 800a8c6:	4606      	mov	r6, r0
 800a8c8:	460f      	mov	r7, r1
 800a8ca:	d01a      	beq.n	800a902 <__ieee754_rem_pio2+0x82>
 800a8cc:	a3a8      	add	r3, pc, #672	@ (adr r3, 800ab70 <__ieee754_rem_pio2+0x2f0>)
 800a8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d2:	f7f5 fcf9 	bl	80002c8 <__aeabi_dsub>
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	460b      	mov	r3, r1
 800a8da:	4680      	mov	r8, r0
 800a8dc:	4689      	mov	r9, r1
 800a8de:	4630      	mov	r0, r6
 800a8e0:	4639      	mov	r1, r7
 800a8e2:	f7f5 fcf1 	bl	80002c8 <__aeabi_dsub>
 800a8e6:	a3a2      	add	r3, pc, #648	@ (adr r3, 800ab70 <__ieee754_rem_pio2+0x2f0>)
 800a8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ec:	f7f5 fcec 	bl	80002c8 <__aeabi_dsub>
 800a8f0:	e9c4 8900 	strd	r8, r9, [r4]
 800a8f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a8f8:	2501      	movs	r5, #1
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	b00d      	add	sp, #52	@ 0x34
 800a8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a902:	a39d      	add	r3, pc, #628	@ (adr r3, 800ab78 <__ieee754_rem_pio2+0x2f8>)
 800a904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a908:	f7f5 fcde 	bl	80002c8 <__aeabi_dsub>
 800a90c:	a39c      	add	r3, pc, #624	@ (adr r3, 800ab80 <__ieee754_rem_pio2+0x300>)
 800a90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a912:	4606      	mov	r6, r0
 800a914:	460f      	mov	r7, r1
 800a916:	f7f5 fcd7 	bl	80002c8 <__aeabi_dsub>
 800a91a:	4602      	mov	r2, r0
 800a91c:	460b      	mov	r3, r1
 800a91e:	4680      	mov	r8, r0
 800a920:	4689      	mov	r9, r1
 800a922:	4630      	mov	r0, r6
 800a924:	4639      	mov	r1, r7
 800a926:	f7f5 fccf 	bl	80002c8 <__aeabi_dsub>
 800a92a:	a395      	add	r3, pc, #596	@ (adr r3, 800ab80 <__ieee754_rem_pio2+0x300>)
 800a92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a930:	e7dc      	b.n	800a8ec <__ieee754_rem_pio2+0x6c>
 800a932:	f7f5 fccb 	bl	80002cc <__adddf3>
 800a936:	45a8      	cmp	r8, r5
 800a938:	4606      	mov	r6, r0
 800a93a:	460f      	mov	r7, r1
 800a93c:	d018      	beq.n	800a970 <__ieee754_rem_pio2+0xf0>
 800a93e:	a38c      	add	r3, pc, #560	@ (adr r3, 800ab70 <__ieee754_rem_pio2+0x2f0>)
 800a940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a944:	f7f5 fcc2 	bl	80002cc <__adddf3>
 800a948:	4602      	mov	r2, r0
 800a94a:	460b      	mov	r3, r1
 800a94c:	4680      	mov	r8, r0
 800a94e:	4689      	mov	r9, r1
 800a950:	4630      	mov	r0, r6
 800a952:	4639      	mov	r1, r7
 800a954:	f7f5 fcb8 	bl	80002c8 <__aeabi_dsub>
 800a958:	a385      	add	r3, pc, #532	@ (adr r3, 800ab70 <__ieee754_rem_pio2+0x2f0>)
 800a95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95e:	f7f5 fcb5 	bl	80002cc <__adddf3>
 800a962:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800a966:	e9c4 8900 	strd	r8, r9, [r4]
 800a96a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a96e:	e7c4      	b.n	800a8fa <__ieee754_rem_pio2+0x7a>
 800a970:	a381      	add	r3, pc, #516	@ (adr r3, 800ab78 <__ieee754_rem_pio2+0x2f8>)
 800a972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a976:	f7f5 fca9 	bl	80002cc <__adddf3>
 800a97a:	a381      	add	r3, pc, #516	@ (adr r3, 800ab80 <__ieee754_rem_pio2+0x300>)
 800a97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a980:	4606      	mov	r6, r0
 800a982:	460f      	mov	r7, r1
 800a984:	f7f5 fca2 	bl	80002cc <__adddf3>
 800a988:	4602      	mov	r2, r0
 800a98a:	460b      	mov	r3, r1
 800a98c:	4680      	mov	r8, r0
 800a98e:	4689      	mov	r9, r1
 800a990:	4630      	mov	r0, r6
 800a992:	4639      	mov	r1, r7
 800a994:	f7f5 fc98 	bl	80002c8 <__aeabi_dsub>
 800a998:	a379      	add	r3, pc, #484	@ (adr r3, 800ab80 <__ieee754_rem_pio2+0x300>)
 800a99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99e:	e7de      	b.n	800a95e <__ieee754_rem_pio2+0xde>
 800a9a0:	4b82      	ldr	r3, [pc, #520]	@ (800abac <__ieee754_rem_pio2+0x32c>)
 800a9a2:	4598      	cmp	r8, r3
 800a9a4:	f200 80d1 	bhi.w	800ab4a <__ieee754_rem_pio2+0x2ca>
 800a9a8:	f000 f966 	bl	800ac78 <fabs>
 800a9ac:	ec57 6b10 	vmov	r6, r7, d0
 800a9b0:	a375      	add	r3, pc, #468	@ (adr r3, 800ab88 <__ieee754_rem_pio2+0x308>)
 800a9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b6:	4630      	mov	r0, r6
 800a9b8:	4639      	mov	r1, r7
 800a9ba:	f7f5 fe3d 	bl	8000638 <__aeabi_dmul>
 800a9be:	4b7c      	ldr	r3, [pc, #496]	@ (800abb0 <__ieee754_rem_pio2+0x330>)
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	f7f5 fc83 	bl	80002cc <__adddf3>
 800a9c6:	f7f6 f8e7 	bl	8000b98 <__aeabi_d2iz>
 800a9ca:	4605      	mov	r5, r0
 800a9cc:	f7f5 fdca 	bl	8000564 <__aeabi_i2d>
 800a9d0:	4602      	mov	r2, r0
 800a9d2:	460b      	mov	r3, r1
 800a9d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a9d8:	a363      	add	r3, pc, #396	@ (adr r3, 800ab68 <__ieee754_rem_pio2+0x2e8>)
 800a9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9de:	f7f5 fe2b 	bl	8000638 <__aeabi_dmul>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	4630      	mov	r0, r6
 800a9e8:	4639      	mov	r1, r7
 800a9ea:	f7f5 fc6d 	bl	80002c8 <__aeabi_dsub>
 800a9ee:	a360      	add	r3, pc, #384	@ (adr r3, 800ab70 <__ieee754_rem_pio2+0x2f0>)
 800a9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f4:	4682      	mov	sl, r0
 800a9f6:	468b      	mov	fp, r1
 800a9f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9fc:	f7f5 fe1c 	bl	8000638 <__aeabi_dmul>
 800aa00:	2d1f      	cmp	r5, #31
 800aa02:	4606      	mov	r6, r0
 800aa04:	460f      	mov	r7, r1
 800aa06:	dc0c      	bgt.n	800aa22 <__ieee754_rem_pio2+0x1a2>
 800aa08:	4b6a      	ldr	r3, [pc, #424]	@ (800abb4 <__ieee754_rem_pio2+0x334>)
 800aa0a:	1e6a      	subs	r2, r5, #1
 800aa0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa10:	4543      	cmp	r3, r8
 800aa12:	d006      	beq.n	800aa22 <__ieee754_rem_pio2+0x1a2>
 800aa14:	4632      	mov	r2, r6
 800aa16:	463b      	mov	r3, r7
 800aa18:	4650      	mov	r0, sl
 800aa1a:	4659      	mov	r1, fp
 800aa1c:	f7f5 fc54 	bl	80002c8 <__aeabi_dsub>
 800aa20:	e00e      	b.n	800aa40 <__ieee754_rem_pio2+0x1c0>
 800aa22:	463b      	mov	r3, r7
 800aa24:	4632      	mov	r2, r6
 800aa26:	4650      	mov	r0, sl
 800aa28:	4659      	mov	r1, fp
 800aa2a:	f7f5 fc4d 	bl	80002c8 <__aeabi_dsub>
 800aa2e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800aa32:	9305      	str	r3, [sp, #20]
 800aa34:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aa38:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800aa3c:	2b10      	cmp	r3, #16
 800aa3e:	dc02      	bgt.n	800aa46 <__ieee754_rem_pio2+0x1c6>
 800aa40:	e9c4 0100 	strd	r0, r1, [r4]
 800aa44:	e039      	b.n	800aaba <__ieee754_rem_pio2+0x23a>
 800aa46:	a34c      	add	r3, pc, #304	@ (adr r3, 800ab78 <__ieee754_rem_pio2+0x2f8>)
 800aa48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa50:	f7f5 fdf2 	bl	8000638 <__aeabi_dmul>
 800aa54:	4606      	mov	r6, r0
 800aa56:	460f      	mov	r7, r1
 800aa58:	4602      	mov	r2, r0
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	4650      	mov	r0, sl
 800aa5e:	4659      	mov	r1, fp
 800aa60:	f7f5 fc32 	bl	80002c8 <__aeabi_dsub>
 800aa64:	4602      	mov	r2, r0
 800aa66:	460b      	mov	r3, r1
 800aa68:	4680      	mov	r8, r0
 800aa6a:	4689      	mov	r9, r1
 800aa6c:	4650      	mov	r0, sl
 800aa6e:	4659      	mov	r1, fp
 800aa70:	f7f5 fc2a 	bl	80002c8 <__aeabi_dsub>
 800aa74:	4632      	mov	r2, r6
 800aa76:	463b      	mov	r3, r7
 800aa78:	f7f5 fc26 	bl	80002c8 <__aeabi_dsub>
 800aa7c:	a340      	add	r3, pc, #256	@ (adr r3, 800ab80 <__ieee754_rem_pio2+0x300>)
 800aa7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa82:	4606      	mov	r6, r0
 800aa84:	460f      	mov	r7, r1
 800aa86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa8a:	f7f5 fdd5 	bl	8000638 <__aeabi_dmul>
 800aa8e:	4632      	mov	r2, r6
 800aa90:	463b      	mov	r3, r7
 800aa92:	f7f5 fc19 	bl	80002c8 <__aeabi_dsub>
 800aa96:	4602      	mov	r2, r0
 800aa98:	460b      	mov	r3, r1
 800aa9a:	4606      	mov	r6, r0
 800aa9c:	460f      	mov	r7, r1
 800aa9e:	4640      	mov	r0, r8
 800aaa0:	4649      	mov	r1, r9
 800aaa2:	f7f5 fc11 	bl	80002c8 <__aeabi_dsub>
 800aaa6:	9a05      	ldr	r2, [sp, #20]
 800aaa8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aaac:	1ad3      	subs	r3, r2, r3
 800aaae:	2b31      	cmp	r3, #49	@ 0x31
 800aab0:	dc20      	bgt.n	800aaf4 <__ieee754_rem_pio2+0x274>
 800aab2:	e9c4 0100 	strd	r0, r1, [r4]
 800aab6:	46c2      	mov	sl, r8
 800aab8:	46cb      	mov	fp, r9
 800aaba:	e9d4 8900 	ldrd	r8, r9, [r4]
 800aabe:	4650      	mov	r0, sl
 800aac0:	4642      	mov	r2, r8
 800aac2:	464b      	mov	r3, r9
 800aac4:	4659      	mov	r1, fp
 800aac6:	f7f5 fbff 	bl	80002c8 <__aeabi_dsub>
 800aaca:	463b      	mov	r3, r7
 800aacc:	4632      	mov	r2, r6
 800aace:	f7f5 fbfb 	bl	80002c8 <__aeabi_dsub>
 800aad2:	9b04      	ldr	r3, [sp, #16]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aada:	f6bf af0e 	bge.w	800a8fa <__ieee754_rem_pio2+0x7a>
 800aade:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800aae2:	6063      	str	r3, [r4, #4]
 800aae4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aae8:	f8c4 8000 	str.w	r8, [r4]
 800aaec:	60a0      	str	r0, [r4, #8]
 800aaee:	60e3      	str	r3, [r4, #12]
 800aaf0:	426d      	negs	r5, r5
 800aaf2:	e702      	b.n	800a8fa <__ieee754_rem_pio2+0x7a>
 800aaf4:	a326      	add	r3, pc, #152	@ (adr r3, 800ab90 <__ieee754_rem_pio2+0x310>)
 800aaf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aafe:	f7f5 fd9b 	bl	8000638 <__aeabi_dmul>
 800ab02:	4606      	mov	r6, r0
 800ab04:	460f      	mov	r7, r1
 800ab06:	4602      	mov	r2, r0
 800ab08:	460b      	mov	r3, r1
 800ab0a:	4640      	mov	r0, r8
 800ab0c:	4649      	mov	r1, r9
 800ab0e:	f7f5 fbdb 	bl	80002c8 <__aeabi_dsub>
 800ab12:	4602      	mov	r2, r0
 800ab14:	460b      	mov	r3, r1
 800ab16:	4682      	mov	sl, r0
 800ab18:	468b      	mov	fp, r1
 800ab1a:	4640      	mov	r0, r8
 800ab1c:	4649      	mov	r1, r9
 800ab1e:	f7f5 fbd3 	bl	80002c8 <__aeabi_dsub>
 800ab22:	4632      	mov	r2, r6
 800ab24:	463b      	mov	r3, r7
 800ab26:	f7f5 fbcf 	bl	80002c8 <__aeabi_dsub>
 800ab2a:	a31b      	add	r3, pc, #108	@ (adr r3, 800ab98 <__ieee754_rem_pio2+0x318>)
 800ab2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab30:	4606      	mov	r6, r0
 800ab32:	460f      	mov	r7, r1
 800ab34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab38:	f7f5 fd7e 	bl	8000638 <__aeabi_dmul>
 800ab3c:	4632      	mov	r2, r6
 800ab3e:	463b      	mov	r3, r7
 800ab40:	f7f5 fbc2 	bl	80002c8 <__aeabi_dsub>
 800ab44:	4606      	mov	r6, r0
 800ab46:	460f      	mov	r7, r1
 800ab48:	e764      	b.n	800aa14 <__ieee754_rem_pio2+0x194>
 800ab4a:	4b1b      	ldr	r3, [pc, #108]	@ (800abb8 <__ieee754_rem_pio2+0x338>)
 800ab4c:	4598      	cmp	r8, r3
 800ab4e:	d935      	bls.n	800abbc <__ieee754_rem_pio2+0x33c>
 800ab50:	4632      	mov	r2, r6
 800ab52:	463b      	mov	r3, r7
 800ab54:	4630      	mov	r0, r6
 800ab56:	4639      	mov	r1, r7
 800ab58:	f7f5 fbb6 	bl	80002c8 <__aeabi_dsub>
 800ab5c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ab60:	e9c4 0100 	strd	r0, r1, [r4]
 800ab64:	e69e      	b.n	800a8a4 <__ieee754_rem_pio2+0x24>
 800ab66:	bf00      	nop
 800ab68:	54400000 	.word	0x54400000
 800ab6c:	3ff921fb 	.word	0x3ff921fb
 800ab70:	1a626331 	.word	0x1a626331
 800ab74:	3dd0b461 	.word	0x3dd0b461
 800ab78:	1a600000 	.word	0x1a600000
 800ab7c:	3dd0b461 	.word	0x3dd0b461
 800ab80:	2e037073 	.word	0x2e037073
 800ab84:	3ba3198a 	.word	0x3ba3198a
 800ab88:	6dc9c883 	.word	0x6dc9c883
 800ab8c:	3fe45f30 	.word	0x3fe45f30
 800ab90:	2e000000 	.word	0x2e000000
 800ab94:	3ba3198a 	.word	0x3ba3198a
 800ab98:	252049c1 	.word	0x252049c1
 800ab9c:	397b839a 	.word	0x397b839a
 800aba0:	3fe921fb 	.word	0x3fe921fb
 800aba4:	4002d97b 	.word	0x4002d97b
 800aba8:	3ff921fb 	.word	0x3ff921fb
 800abac:	413921fb 	.word	0x413921fb
 800abb0:	3fe00000 	.word	0x3fe00000
 800abb4:	0800b9c0 	.word	0x0800b9c0
 800abb8:	7fefffff 	.word	0x7fefffff
 800abbc:	ea4f 5528 	mov.w	r5, r8, asr #20
 800abc0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800abc4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800abc8:	4630      	mov	r0, r6
 800abca:	460f      	mov	r7, r1
 800abcc:	f7f5 ffe4 	bl	8000b98 <__aeabi_d2iz>
 800abd0:	f7f5 fcc8 	bl	8000564 <__aeabi_i2d>
 800abd4:	4602      	mov	r2, r0
 800abd6:	460b      	mov	r3, r1
 800abd8:	4630      	mov	r0, r6
 800abda:	4639      	mov	r1, r7
 800abdc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800abe0:	f7f5 fb72 	bl	80002c8 <__aeabi_dsub>
 800abe4:	4b22      	ldr	r3, [pc, #136]	@ (800ac70 <__ieee754_rem_pio2+0x3f0>)
 800abe6:	2200      	movs	r2, #0
 800abe8:	f7f5 fd26 	bl	8000638 <__aeabi_dmul>
 800abec:	460f      	mov	r7, r1
 800abee:	4606      	mov	r6, r0
 800abf0:	f7f5 ffd2 	bl	8000b98 <__aeabi_d2iz>
 800abf4:	f7f5 fcb6 	bl	8000564 <__aeabi_i2d>
 800abf8:	4602      	mov	r2, r0
 800abfa:	460b      	mov	r3, r1
 800abfc:	4630      	mov	r0, r6
 800abfe:	4639      	mov	r1, r7
 800ac00:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ac04:	f7f5 fb60 	bl	80002c8 <__aeabi_dsub>
 800ac08:	4b19      	ldr	r3, [pc, #100]	@ (800ac70 <__ieee754_rem_pio2+0x3f0>)
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	f7f5 fd14 	bl	8000638 <__aeabi_dmul>
 800ac10:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800ac14:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800ac18:	f04f 0803 	mov.w	r8, #3
 800ac1c:	2600      	movs	r6, #0
 800ac1e:	2700      	movs	r7, #0
 800ac20:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800ac24:	4632      	mov	r2, r6
 800ac26:	463b      	mov	r3, r7
 800ac28:	46c2      	mov	sl, r8
 800ac2a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800ac2e:	f7f5 ff6b 	bl	8000b08 <__aeabi_dcmpeq>
 800ac32:	2800      	cmp	r0, #0
 800ac34:	d1f4      	bne.n	800ac20 <__ieee754_rem_pio2+0x3a0>
 800ac36:	4b0f      	ldr	r3, [pc, #60]	@ (800ac74 <__ieee754_rem_pio2+0x3f4>)
 800ac38:	9301      	str	r3, [sp, #4]
 800ac3a:	2302      	movs	r3, #2
 800ac3c:	9300      	str	r3, [sp, #0]
 800ac3e:	462a      	mov	r2, r5
 800ac40:	4653      	mov	r3, sl
 800ac42:	4621      	mov	r1, r4
 800ac44:	a806      	add	r0, sp, #24
 800ac46:	f000 f81f 	bl	800ac88 <__kernel_rem_pio2>
 800ac4a:	9b04      	ldr	r3, [sp, #16]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	4605      	mov	r5, r0
 800ac50:	f6bf ae53 	bge.w	800a8fa <__ieee754_rem_pio2+0x7a>
 800ac54:	e9d4 2100 	ldrd	r2, r1, [r4]
 800ac58:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ac5c:	e9c4 2300 	strd	r2, r3, [r4]
 800ac60:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800ac64:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ac68:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800ac6c:	e740      	b.n	800aaf0 <__ieee754_rem_pio2+0x270>
 800ac6e:	bf00      	nop
 800ac70:	41700000 	.word	0x41700000
 800ac74:	0800ba40 	.word	0x0800ba40

0800ac78 <fabs>:
 800ac78:	ec51 0b10 	vmov	r0, r1, d0
 800ac7c:	4602      	mov	r2, r0
 800ac7e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ac82:	ec43 2b10 	vmov	d0, r2, r3
 800ac86:	4770      	bx	lr

0800ac88 <__kernel_rem_pio2>:
 800ac88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac8c:	ed2d 8b02 	vpush	{d8}
 800ac90:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800ac94:	f112 0f14 	cmn.w	r2, #20
 800ac98:	9306      	str	r3, [sp, #24]
 800ac9a:	9104      	str	r1, [sp, #16]
 800ac9c:	4bbe      	ldr	r3, [pc, #760]	@ (800af98 <__kernel_rem_pio2+0x310>)
 800ac9e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800aca0:	9008      	str	r0, [sp, #32]
 800aca2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aca6:	9300      	str	r3, [sp, #0]
 800aca8:	9b06      	ldr	r3, [sp, #24]
 800acaa:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800acae:	bfa8      	it	ge
 800acb0:	1ed4      	subge	r4, r2, #3
 800acb2:	9305      	str	r3, [sp, #20]
 800acb4:	bfb2      	itee	lt
 800acb6:	2400      	movlt	r4, #0
 800acb8:	2318      	movge	r3, #24
 800acba:	fb94 f4f3 	sdivge	r4, r4, r3
 800acbe:	f06f 0317 	mvn.w	r3, #23
 800acc2:	fb04 3303 	mla	r3, r4, r3, r3
 800acc6:	eb03 0b02 	add.w	fp, r3, r2
 800acca:	9b00      	ldr	r3, [sp, #0]
 800accc:	9a05      	ldr	r2, [sp, #20]
 800acce:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800af88 <__kernel_rem_pio2+0x300>
 800acd2:	eb03 0802 	add.w	r8, r3, r2
 800acd6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800acd8:	1aa7      	subs	r7, r4, r2
 800acda:	ae20      	add	r6, sp, #128	@ 0x80
 800acdc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ace0:	2500      	movs	r5, #0
 800ace2:	4545      	cmp	r5, r8
 800ace4:	dd13      	ble.n	800ad0e <__kernel_rem_pio2+0x86>
 800ace6:	9b06      	ldr	r3, [sp, #24]
 800ace8:	aa20      	add	r2, sp, #128	@ 0x80
 800acea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800acee:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800acf2:	f04f 0800 	mov.w	r8, #0
 800acf6:	9b00      	ldr	r3, [sp, #0]
 800acf8:	4598      	cmp	r8, r3
 800acfa:	dc31      	bgt.n	800ad60 <__kernel_rem_pio2+0xd8>
 800acfc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800af88 <__kernel_rem_pio2+0x300>
 800ad00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ad04:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ad08:	462f      	mov	r7, r5
 800ad0a:	2600      	movs	r6, #0
 800ad0c:	e01b      	b.n	800ad46 <__kernel_rem_pio2+0xbe>
 800ad0e:	42ef      	cmn	r7, r5
 800ad10:	d407      	bmi.n	800ad22 <__kernel_rem_pio2+0x9a>
 800ad12:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ad16:	f7f5 fc25 	bl	8000564 <__aeabi_i2d>
 800ad1a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ad1e:	3501      	adds	r5, #1
 800ad20:	e7df      	b.n	800ace2 <__kernel_rem_pio2+0x5a>
 800ad22:	ec51 0b18 	vmov	r0, r1, d8
 800ad26:	e7f8      	b.n	800ad1a <__kernel_rem_pio2+0x92>
 800ad28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad2c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ad30:	f7f5 fc82 	bl	8000638 <__aeabi_dmul>
 800ad34:	4602      	mov	r2, r0
 800ad36:	460b      	mov	r3, r1
 800ad38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad3c:	f7f5 fac6 	bl	80002cc <__adddf3>
 800ad40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad44:	3601      	adds	r6, #1
 800ad46:	9b05      	ldr	r3, [sp, #20]
 800ad48:	429e      	cmp	r6, r3
 800ad4a:	f1a7 0708 	sub.w	r7, r7, #8
 800ad4e:	ddeb      	ble.n	800ad28 <__kernel_rem_pio2+0xa0>
 800ad50:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad54:	f108 0801 	add.w	r8, r8, #1
 800ad58:	ecaa 7b02 	vstmia	sl!, {d7}
 800ad5c:	3508      	adds	r5, #8
 800ad5e:	e7ca      	b.n	800acf6 <__kernel_rem_pio2+0x6e>
 800ad60:	9b00      	ldr	r3, [sp, #0]
 800ad62:	f8dd 8000 	ldr.w	r8, [sp]
 800ad66:	aa0c      	add	r2, sp, #48	@ 0x30
 800ad68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ad6c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad6e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800ad70:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ad74:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad76:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800ad7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad7c:	ab98      	add	r3, sp, #608	@ 0x260
 800ad7e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ad82:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800ad86:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ad8a:	ac0c      	add	r4, sp, #48	@ 0x30
 800ad8c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800ad8e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800ad92:	46a1      	mov	r9, r4
 800ad94:	46c2      	mov	sl, r8
 800ad96:	f1ba 0f00 	cmp.w	sl, #0
 800ad9a:	f1a5 0508 	sub.w	r5, r5, #8
 800ad9e:	dc77      	bgt.n	800ae90 <__kernel_rem_pio2+0x208>
 800ada0:	4658      	mov	r0, fp
 800ada2:	ed9d 0b02 	vldr	d0, [sp, #8]
 800ada6:	f000 fac7 	bl	800b338 <scalbn>
 800adaa:	ec57 6b10 	vmov	r6, r7, d0
 800adae:	2200      	movs	r2, #0
 800adb0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800adb4:	4630      	mov	r0, r6
 800adb6:	4639      	mov	r1, r7
 800adb8:	f7f5 fc3e 	bl	8000638 <__aeabi_dmul>
 800adbc:	ec41 0b10 	vmov	d0, r0, r1
 800adc0:	f000 fb3a 	bl	800b438 <floor>
 800adc4:	4b75      	ldr	r3, [pc, #468]	@ (800af9c <__kernel_rem_pio2+0x314>)
 800adc6:	ec51 0b10 	vmov	r0, r1, d0
 800adca:	2200      	movs	r2, #0
 800adcc:	f7f5 fc34 	bl	8000638 <__aeabi_dmul>
 800add0:	4602      	mov	r2, r0
 800add2:	460b      	mov	r3, r1
 800add4:	4630      	mov	r0, r6
 800add6:	4639      	mov	r1, r7
 800add8:	f7f5 fa76 	bl	80002c8 <__aeabi_dsub>
 800addc:	460f      	mov	r7, r1
 800adde:	4606      	mov	r6, r0
 800ade0:	f7f5 feda 	bl	8000b98 <__aeabi_d2iz>
 800ade4:	9002      	str	r0, [sp, #8]
 800ade6:	f7f5 fbbd 	bl	8000564 <__aeabi_i2d>
 800adea:	4602      	mov	r2, r0
 800adec:	460b      	mov	r3, r1
 800adee:	4630      	mov	r0, r6
 800adf0:	4639      	mov	r1, r7
 800adf2:	f7f5 fa69 	bl	80002c8 <__aeabi_dsub>
 800adf6:	f1bb 0f00 	cmp.w	fp, #0
 800adfa:	4606      	mov	r6, r0
 800adfc:	460f      	mov	r7, r1
 800adfe:	dd6c      	ble.n	800aeda <__kernel_rem_pio2+0x252>
 800ae00:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800ae04:	ab0c      	add	r3, sp, #48	@ 0x30
 800ae06:	9d02      	ldr	r5, [sp, #8]
 800ae08:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ae0c:	f1cb 0018 	rsb	r0, fp, #24
 800ae10:	fa43 f200 	asr.w	r2, r3, r0
 800ae14:	4415      	add	r5, r2
 800ae16:	4082      	lsls	r2, r0
 800ae18:	1a9b      	subs	r3, r3, r2
 800ae1a:	aa0c      	add	r2, sp, #48	@ 0x30
 800ae1c:	9502      	str	r5, [sp, #8]
 800ae1e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800ae22:	f1cb 0217 	rsb	r2, fp, #23
 800ae26:	fa43 f902 	asr.w	r9, r3, r2
 800ae2a:	f1b9 0f00 	cmp.w	r9, #0
 800ae2e:	dd64      	ble.n	800aefa <__kernel_rem_pio2+0x272>
 800ae30:	9b02      	ldr	r3, [sp, #8]
 800ae32:	2200      	movs	r2, #0
 800ae34:	3301      	adds	r3, #1
 800ae36:	9302      	str	r3, [sp, #8]
 800ae38:	4615      	mov	r5, r2
 800ae3a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800ae3e:	4590      	cmp	r8, r2
 800ae40:	f300 80b8 	bgt.w	800afb4 <__kernel_rem_pio2+0x32c>
 800ae44:	f1bb 0f00 	cmp.w	fp, #0
 800ae48:	dd07      	ble.n	800ae5a <__kernel_rem_pio2+0x1d2>
 800ae4a:	f1bb 0f01 	cmp.w	fp, #1
 800ae4e:	f000 80bf 	beq.w	800afd0 <__kernel_rem_pio2+0x348>
 800ae52:	f1bb 0f02 	cmp.w	fp, #2
 800ae56:	f000 80c6 	beq.w	800afe6 <__kernel_rem_pio2+0x35e>
 800ae5a:	f1b9 0f02 	cmp.w	r9, #2
 800ae5e:	d14c      	bne.n	800aefa <__kernel_rem_pio2+0x272>
 800ae60:	4632      	mov	r2, r6
 800ae62:	463b      	mov	r3, r7
 800ae64:	494e      	ldr	r1, [pc, #312]	@ (800afa0 <__kernel_rem_pio2+0x318>)
 800ae66:	2000      	movs	r0, #0
 800ae68:	f7f5 fa2e 	bl	80002c8 <__aeabi_dsub>
 800ae6c:	4606      	mov	r6, r0
 800ae6e:	460f      	mov	r7, r1
 800ae70:	2d00      	cmp	r5, #0
 800ae72:	d042      	beq.n	800aefa <__kernel_rem_pio2+0x272>
 800ae74:	4658      	mov	r0, fp
 800ae76:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800af90 <__kernel_rem_pio2+0x308>
 800ae7a:	f000 fa5d 	bl	800b338 <scalbn>
 800ae7e:	4630      	mov	r0, r6
 800ae80:	4639      	mov	r1, r7
 800ae82:	ec53 2b10 	vmov	r2, r3, d0
 800ae86:	f7f5 fa1f 	bl	80002c8 <__aeabi_dsub>
 800ae8a:	4606      	mov	r6, r0
 800ae8c:	460f      	mov	r7, r1
 800ae8e:	e034      	b.n	800aefa <__kernel_rem_pio2+0x272>
 800ae90:	4b44      	ldr	r3, [pc, #272]	@ (800afa4 <__kernel_rem_pio2+0x31c>)
 800ae92:	2200      	movs	r2, #0
 800ae94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae98:	f7f5 fbce 	bl	8000638 <__aeabi_dmul>
 800ae9c:	f7f5 fe7c 	bl	8000b98 <__aeabi_d2iz>
 800aea0:	f7f5 fb60 	bl	8000564 <__aeabi_i2d>
 800aea4:	4b40      	ldr	r3, [pc, #256]	@ (800afa8 <__kernel_rem_pio2+0x320>)
 800aea6:	2200      	movs	r2, #0
 800aea8:	4606      	mov	r6, r0
 800aeaa:	460f      	mov	r7, r1
 800aeac:	f7f5 fbc4 	bl	8000638 <__aeabi_dmul>
 800aeb0:	4602      	mov	r2, r0
 800aeb2:	460b      	mov	r3, r1
 800aeb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aeb8:	f7f5 fa06 	bl	80002c8 <__aeabi_dsub>
 800aebc:	f7f5 fe6c 	bl	8000b98 <__aeabi_d2iz>
 800aec0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aec4:	f849 0b04 	str.w	r0, [r9], #4
 800aec8:	4639      	mov	r1, r7
 800aeca:	4630      	mov	r0, r6
 800aecc:	f7f5 f9fe 	bl	80002cc <__adddf3>
 800aed0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800aed4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aed8:	e75d      	b.n	800ad96 <__kernel_rem_pio2+0x10e>
 800aeda:	d107      	bne.n	800aeec <__kernel_rem_pio2+0x264>
 800aedc:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800aee0:	aa0c      	add	r2, sp, #48	@ 0x30
 800aee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aee6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800aeea:	e79e      	b.n	800ae2a <__kernel_rem_pio2+0x1a2>
 800aeec:	4b2f      	ldr	r3, [pc, #188]	@ (800afac <__kernel_rem_pio2+0x324>)
 800aeee:	2200      	movs	r2, #0
 800aef0:	f7f5 fe28 	bl	8000b44 <__aeabi_dcmpge>
 800aef4:	2800      	cmp	r0, #0
 800aef6:	d143      	bne.n	800af80 <__kernel_rem_pio2+0x2f8>
 800aef8:	4681      	mov	r9, r0
 800aefa:	2200      	movs	r2, #0
 800aefc:	2300      	movs	r3, #0
 800aefe:	4630      	mov	r0, r6
 800af00:	4639      	mov	r1, r7
 800af02:	f7f5 fe01 	bl	8000b08 <__aeabi_dcmpeq>
 800af06:	2800      	cmp	r0, #0
 800af08:	f000 80bf 	beq.w	800b08a <__kernel_rem_pio2+0x402>
 800af0c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800af10:	2200      	movs	r2, #0
 800af12:	9900      	ldr	r1, [sp, #0]
 800af14:	428b      	cmp	r3, r1
 800af16:	da6e      	bge.n	800aff6 <__kernel_rem_pio2+0x36e>
 800af18:	2a00      	cmp	r2, #0
 800af1a:	f000 8089 	beq.w	800b030 <__kernel_rem_pio2+0x3a8>
 800af1e:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800af22:	ab0c      	add	r3, sp, #48	@ 0x30
 800af24:	f1ab 0b18 	sub.w	fp, fp, #24
 800af28:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d0f6      	beq.n	800af1e <__kernel_rem_pio2+0x296>
 800af30:	4658      	mov	r0, fp
 800af32:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800af90 <__kernel_rem_pio2+0x308>
 800af36:	f000 f9ff 	bl	800b338 <scalbn>
 800af3a:	f108 0301 	add.w	r3, r8, #1
 800af3e:	00da      	lsls	r2, r3, #3
 800af40:	9205      	str	r2, [sp, #20]
 800af42:	ec55 4b10 	vmov	r4, r5, d0
 800af46:	aa70      	add	r2, sp, #448	@ 0x1c0
 800af48:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800afa4 <__kernel_rem_pio2+0x31c>
 800af4c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800af50:	4646      	mov	r6, r8
 800af52:	f04f 0a00 	mov.w	sl, #0
 800af56:	2e00      	cmp	r6, #0
 800af58:	f280 80cf 	bge.w	800b0fa <__kernel_rem_pio2+0x472>
 800af5c:	4644      	mov	r4, r8
 800af5e:	2c00      	cmp	r4, #0
 800af60:	f2c0 80fd 	blt.w	800b15e <__kernel_rem_pio2+0x4d6>
 800af64:	4b12      	ldr	r3, [pc, #72]	@ (800afb0 <__kernel_rem_pio2+0x328>)
 800af66:	461f      	mov	r7, r3
 800af68:	ab70      	add	r3, sp, #448	@ 0x1c0
 800af6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800af6e:	9306      	str	r3, [sp, #24]
 800af70:	f04f 0a00 	mov.w	sl, #0
 800af74:	f04f 0b00 	mov.w	fp, #0
 800af78:	2600      	movs	r6, #0
 800af7a:	eba8 0504 	sub.w	r5, r8, r4
 800af7e:	e0e2      	b.n	800b146 <__kernel_rem_pio2+0x4be>
 800af80:	f04f 0902 	mov.w	r9, #2
 800af84:	e754      	b.n	800ae30 <__kernel_rem_pio2+0x1a8>
 800af86:	bf00      	nop
	...
 800af94:	3ff00000 	.word	0x3ff00000
 800af98:	0800bb88 	.word	0x0800bb88
 800af9c:	40200000 	.word	0x40200000
 800afa0:	3ff00000 	.word	0x3ff00000
 800afa4:	3e700000 	.word	0x3e700000
 800afa8:	41700000 	.word	0x41700000
 800afac:	3fe00000 	.word	0x3fe00000
 800afb0:	0800bb48 	.word	0x0800bb48
 800afb4:	f854 3b04 	ldr.w	r3, [r4], #4
 800afb8:	b945      	cbnz	r5, 800afcc <__kernel_rem_pio2+0x344>
 800afba:	b123      	cbz	r3, 800afc6 <__kernel_rem_pio2+0x33e>
 800afbc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800afc0:	f844 3c04 	str.w	r3, [r4, #-4]
 800afc4:	2301      	movs	r3, #1
 800afc6:	3201      	adds	r2, #1
 800afc8:	461d      	mov	r5, r3
 800afca:	e738      	b.n	800ae3e <__kernel_rem_pio2+0x1b6>
 800afcc:	1acb      	subs	r3, r1, r3
 800afce:	e7f7      	b.n	800afc0 <__kernel_rem_pio2+0x338>
 800afd0:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800afd4:	ab0c      	add	r3, sp, #48	@ 0x30
 800afd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afda:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800afde:	a90c      	add	r1, sp, #48	@ 0x30
 800afe0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800afe4:	e739      	b.n	800ae5a <__kernel_rem_pio2+0x1d2>
 800afe6:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800afea:	ab0c      	add	r3, sp, #48	@ 0x30
 800afec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aff0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800aff4:	e7f3      	b.n	800afde <__kernel_rem_pio2+0x356>
 800aff6:	a90c      	add	r1, sp, #48	@ 0x30
 800aff8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800affc:	3b01      	subs	r3, #1
 800affe:	430a      	orrs	r2, r1
 800b000:	e787      	b.n	800af12 <__kernel_rem_pio2+0x28a>
 800b002:	3401      	adds	r4, #1
 800b004:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b008:	2a00      	cmp	r2, #0
 800b00a:	d0fa      	beq.n	800b002 <__kernel_rem_pio2+0x37a>
 800b00c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b00e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b012:	eb0d 0503 	add.w	r5, sp, r3
 800b016:	9b06      	ldr	r3, [sp, #24]
 800b018:	aa20      	add	r2, sp, #128	@ 0x80
 800b01a:	4443      	add	r3, r8
 800b01c:	f108 0701 	add.w	r7, r8, #1
 800b020:	3d98      	subs	r5, #152	@ 0x98
 800b022:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800b026:	4444      	add	r4, r8
 800b028:	42bc      	cmp	r4, r7
 800b02a:	da04      	bge.n	800b036 <__kernel_rem_pio2+0x3ae>
 800b02c:	46a0      	mov	r8, r4
 800b02e:	e6a2      	b.n	800ad76 <__kernel_rem_pio2+0xee>
 800b030:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b032:	2401      	movs	r4, #1
 800b034:	e7e6      	b.n	800b004 <__kernel_rem_pio2+0x37c>
 800b036:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b038:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800b03c:	f7f5 fa92 	bl	8000564 <__aeabi_i2d>
 800b040:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800b308 <__kernel_rem_pio2+0x680>
 800b044:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b048:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b04c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b050:	46b2      	mov	sl, r6
 800b052:	f04f 0800 	mov.w	r8, #0
 800b056:	9b05      	ldr	r3, [sp, #20]
 800b058:	4598      	cmp	r8, r3
 800b05a:	dd05      	ble.n	800b068 <__kernel_rem_pio2+0x3e0>
 800b05c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b060:	3701      	adds	r7, #1
 800b062:	eca5 7b02 	vstmia	r5!, {d7}
 800b066:	e7df      	b.n	800b028 <__kernel_rem_pio2+0x3a0>
 800b068:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800b06c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b070:	f7f5 fae2 	bl	8000638 <__aeabi_dmul>
 800b074:	4602      	mov	r2, r0
 800b076:	460b      	mov	r3, r1
 800b078:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b07c:	f7f5 f926 	bl	80002cc <__adddf3>
 800b080:	f108 0801 	add.w	r8, r8, #1
 800b084:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b088:	e7e5      	b.n	800b056 <__kernel_rem_pio2+0x3ce>
 800b08a:	f1cb 0000 	rsb	r0, fp, #0
 800b08e:	ec47 6b10 	vmov	d0, r6, r7
 800b092:	f000 f951 	bl	800b338 <scalbn>
 800b096:	ec55 4b10 	vmov	r4, r5, d0
 800b09a:	4b9d      	ldr	r3, [pc, #628]	@ (800b310 <__kernel_rem_pio2+0x688>)
 800b09c:	2200      	movs	r2, #0
 800b09e:	4620      	mov	r0, r4
 800b0a0:	4629      	mov	r1, r5
 800b0a2:	f7f5 fd4f 	bl	8000b44 <__aeabi_dcmpge>
 800b0a6:	b300      	cbz	r0, 800b0ea <__kernel_rem_pio2+0x462>
 800b0a8:	4b9a      	ldr	r3, [pc, #616]	@ (800b314 <__kernel_rem_pio2+0x68c>)
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	4620      	mov	r0, r4
 800b0ae:	4629      	mov	r1, r5
 800b0b0:	f7f5 fac2 	bl	8000638 <__aeabi_dmul>
 800b0b4:	f7f5 fd70 	bl	8000b98 <__aeabi_d2iz>
 800b0b8:	4606      	mov	r6, r0
 800b0ba:	f7f5 fa53 	bl	8000564 <__aeabi_i2d>
 800b0be:	4b94      	ldr	r3, [pc, #592]	@ (800b310 <__kernel_rem_pio2+0x688>)
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f7f5 fab9 	bl	8000638 <__aeabi_dmul>
 800b0c6:	460b      	mov	r3, r1
 800b0c8:	4602      	mov	r2, r0
 800b0ca:	4629      	mov	r1, r5
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	f7f5 f8fb 	bl	80002c8 <__aeabi_dsub>
 800b0d2:	f7f5 fd61 	bl	8000b98 <__aeabi_d2iz>
 800b0d6:	ab0c      	add	r3, sp, #48	@ 0x30
 800b0d8:	f10b 0b18 	add.w	fp, fp, #24
 800b0dc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b0e0:	f108 0801 	add.w	r8, r8, #1
 800b0e4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800b0e8:	e722      	b.n	800af30 <__kernel_rem_pio2+0x2a8>
 800b0ea:	4620      	mov	r0, r4
 800b0ec:	4629      	mov	r1, r5
 800b0ee:	f7f5 fd53 	bl	8000b98 <__aeabi_d2iz>
 800b0f2:	ab0c      	add	r3, sp, #48	@ 0x30
 800b0f4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b0f8:	e71a      	b.n	800af30 <__kernel_rem_pio2+0x2a8>
 800b0fa:	ab0c      	add	r3, sp, #48	@ 0x30
 800b0fc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b100:	f7f5 fa30 	bl	8000564 <__aeabi_i2d>
 800b104:	4622      	mov	r2, r4
 800b106:	462b      	mov	r3, r5
 800b108:	f7f5 fa96 	bl	8000638 <__aeabi_dmul>
 800b10c:	4652      	mov	r2, sl
 800b10e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800b112:	465b      	mov	r3, fp
 800b114:	4620      	mov	r0, r4
 800b116:	4629      	mov	r1, r5
 800b118:	f7f5 fa8e 	bl	8000638 <__aeabi_dmul>
 800b11c:	3e01      	subs	r6, #1
 800b11e:	4604      	mov	r4, r0
 800b120:	460d      	mov	r5, r1
 800b122:	e718      	b.n	800af56 <__kernel_rem_pio2+0x2ce>
 800b124:	9906      	ldr	r1, [sp, #24]
 800b126:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800b12a:	9106      	str	r1, [sp, #24]
 800b12c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800b130:	f7f5 fa82 	bl	8000638 <__aeabi_dmul>
 800b134:	4602      	mov	r2, r0
 800b136:	460b      	mov	r3, r1
 800b138:	4650      	mov	r0, sl
 800b13a:	4659      	mov	r1, fp
 800b13c:	f7f5 f8c6 	bl	80002cc <__adddf3>
 800b140:	3601      	adds	r6, #1
 800b142:	4682      	mov	sl, r0
 800b144:	468b      	mov	fp, r1
 800b146:	9b00      	ldr	r3, [sp, #0]
 800b148:	429e      	cmp	r6, r3
 800b14a:	dc01      	bgt.n	800b150 <__kernel_rem_pio2+0x4c8>
 800b14c:	42b5      	cmp	r5, r6
 800b14e:	dae9      	bge.n	800b124 <__kernel_rem_pio2+0x49c>
 800b150:	ab48      	add	r3, sp, #288	@ 0x120
 800b152:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b156:	e9c5 ab00 	strd	sl, fp, [r5]
 800b15a:	3c01      	subs	r4, #1
 800b15c:	e6ff      	b.n	800af5e <__kernel_rem_pio2+0x2d6>
 800b15e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800b160:	2b02      	cmp	r3, #2
 800b162:	dc0b      	bgt.n	800b17c <__kernel_rem_pio2+0x4f4>
 800b164:	2b00      	cmp	r3, #0
 800b166:	dc39      	bgt.n	800b1dc <__kernel_rem_pio2+0x554>
 800b168:	d05d      	beq.n	800b226 <__kernel_rem_pio2+0x59e>
 800b16a:	9b02      	ldr	r3, [sp, #8]
 800b16c:	f003 0007 	and.w	r0, r3, #7
 800b170:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800b174:	ecbd 8b02 	vpop	{d8}
 800b178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b17c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800b17e:	2b03      	cmp	r3, #3
 800b180:	d1f3      	bne.n	800b16a <__kernel_rem_pio2+0x4e2>
 800b182:	9b05      	ldr	r3, [sp, #20]
 800b184:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b188:	eb0d 0403 	add.w	r4, sp, r3
 800b18c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800b190:	4625      	mov	r5, r4
 800b192:	46c2      	mov	sl, r8
 800b194:	f1ba 0f00 	cmp.w	sl, #0
 800b198:	f1a5 0508 	sub.w	r5, r5, #8
 800b19c:	dc6b      	bgt.n	800b276 <__kernel_rem_pio2+0x5ee>
 800b19e:	4645      	mov	r5, r8
 800b1a0:	2d01      	cmp	r5, #1
 800b1a2:	f1a4 0408 	sub.w	r4, r4, #8
 800b1a6:	f300 8087 	bgt.w	800b2b8 <__kernel_rem_pio2+0x630>
 800b1aa:	9c05      	ldr	r4, [sp, #20]
 800b1ac:	ab48      	add	r3, sp, #288	@ 0x120
 800b1ae:	441c      	add	r4, r3
 800b1b0:	2000      	movs	r0, #0
 800b1b2:	2100      	movs	r1, #0
 800b1b4:	f1b8 0f01 	cmp.w	r8, #1
 800b1b8:	f300 809c 	bgt.w	800b2f4 <__kernel_rem_pio2+0x66c>
 800b1bc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800b1c0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800b1c4:	f1b9 0f00 	cmp.w	r9, #0
 800b1c8:	f040 80a6 	bne.w	800b318 <__kernel_rem_pio2+0x690>
 800b1cc:	9b04      	ldr	r3, [sp, #16]
 800b1ce:	e9c3 7800 	strd	r7, r8, [r3]
 800b1d2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800b1d6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b1da:	e7c6      	b.n	800b16a <__kernel_rem_pio2+0x4e2>
 800b1dc:	9d05      	ldr	r5, [sp, #20]
 800b1de:	ab48      	add	r3, sp, #288	@ 0x120
 800b1e0:	441d      	add	r5, r3
 800b1e2:	4644      	mov	r4, r8
 800b1e4:	2000      	movs	r0, #0
 800b1e6:	2100      	movs	r1, #0
 800b1e8:	2c00      	cmp	r4, #0
 800b1ea:	da35      	bge.n	800b258 <__kernel_rem_pio2+0x5d0>
 800b1ec:	f1b9 0f00 	cmp.w	r9, #0
 800b1f0:	d038      	beq.n	800b264 <__kernel_rem_pio2+0x5dc>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b1f8:	9c04      	ldr	r4, [sp, #16]
 800b1fa:	e9c4 2300 	strd	r2, r3, [r4]
 800b1fe:	4602      	mov	r2, r0
 800b200:	460b      	mov	r3, r1
 800b202:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800b206:	f7f5 f85f 	bl	80002c8 <__aeabi_dsub>
 800b20a:	ad4a      	add	r5, sp, #296	@ 0x128
 800b20c:	2401      	movs	r4, #1
 800b20e:	45a0      	cmp	r8, r4
 800b210:	da2b      	bge.n	800b26a <__kernel_rem_pio2+0x5e2>
 800b212:	f1b9 0f00 	cmp.w	r9, #0
 800b216:	d002      	beq.n	800b21e <__kernel_rem_pio2+0x596>
 800b218:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b21c:	4619      	mov	r1, r3
 800b21e:	9b04      	ldr	r3, [sp, #16]
 800b220:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b224:	e7a1      	b.n	800b16a <__kernel_rem_pio2+0x4e2>
 800b226:	9c05      	ldr	r4, [sp, #20]
 800b228:	ab48      	add	r3, sp, #288	@ 0x120
 800b22a:	441c      	add	r4, r3
 800b22c:	2000      	movs	r0, #0
 800b22e:	2100      	movs	r1, #0
 800b230:	f1b8 0f00 	cmp.w	r8, #0
 800b234:	da09      	bge.n	800b24a <__kernel_rem_pio2+0x5c2>
 800b236:	f1b9 0f00 	cmp.w	r9, #0
 800b23a:	d002      	beq.n	800b242 <__kernel_rem_pio2+0x5ba>
 800b23c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b240:	4619      	mov	r1, r3
 800b242:	9b04      	ldr	r3, [sp, #16]
 800b244:	e9c3 0100 	strd	r0, r1, [r3]
 800b248:	e78f      	b.n	800b16a <__kernel_rem_pio2+0x4e2>
 800b24a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b24e:	f7f5 f83d 	bl	80002cc <__adddf3>
 800b252:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b256:	e7eb      	b.n	800b230 <__kernel_rem_pio2+0x5a8>
 800b258:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800b25c:	f7f5 f836 	bl	80002cc <__adddf3>
 800b260:	3c01      	subs	r4, #1
 800b262:	e7c1      	b.n	800b1e8 <__kernel_rem_pio2+0x560>
 800b264:	4602      	mov	r2, r0
 800b266:	460b      	mov	r3, r1
 800b268:	e7c6      	b.n	800b1f8 <__kernel_rem_pio2+0x570>
 800b26a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800b26e:	f7f5 f82d 	bl	80002cc <__adddf3>
 800b272:	3401      	adds	r4, #1
 800b274:	e7cb      	b.n	800b20e <__kernel_rem_pio2+0x586>
 800b276:	ed95 7b00 	vldr	d7, [r5]
 800b27a:	ed8d 7b00 	vstr	d7, [sp]
 800b27e:	ed95 7b02 	vldr	d7, [r5, #8]
 800b282:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b286:	ec53 2b17 	vmov	r2, r3, d7
 800b28a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b28e:	f7f5 f81d 	bl	80002cc <__adddf3>
 800b292:	4602      	mov	r2, r0
 800b294:	460b      	mov	r3, r1
 800b296:	4606      	mov	r6, r0
 800b298:	460f      	mov	r7, r1
 800b29a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b29e:	f7f5 f813 	bl	80002c8 <__aeabi_dsub>
 800b2a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b2a6:	f7f5 f811 	bl	80002cc <__adddf3>
 800b2aa:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b2ae:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800b2b2:	e9c5 6700 	strd	r6, r7, [r5]
 800b2b6:	e76d      	b.n	800b194 <__kernel_rem_pio2+0x50c>
 800b2b8:	ed94 7b00 	vldr	d7, [r4]
 800b2bc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800b2c0:	ec51 0b17 	vmov	r0, r1, d7
 800b2c4:	4652      	mov	r2, sl
 800b2c6:	465b      	mov	r3, fp
 800b2c8:	ed8d 7b00 	vstr	d7, [sp]
 800b2cc:	f7f4 fffe 	bl	80002cc <__adddf3>
 800b2d0:	4602      	mov	r2, r0
 800b2d2:	460b      	mov	r3, r1
 800b2d4:	4606      	mov	r6, r0
 800b2d6:	460f      	mov	r7, r1
 800b2d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b2dc:	f7f4 fff4 	bl	80002c8 <__aeabi_dsub>
 800b2e0:	4652      	mov	r2, sl
 800b2e2:	465b      	mov	r3, fp
 800b2e4:	f7f4 fff2 	bl	80002cc <__adddf3>
 800b2e8:	3d01      	subs	r5, #1
 800b2ea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b2ee:	e9c4 6700 	strd	r6, r7, [r4]
 800b2f2:	e755      	b.n	800b1a0 <__kernel_rem_pio2+0x518>
 800b2f4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b2f8:	f7f4 ffe8 	bl	80002cc <__adddf3>
 800b2fc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b300:	e758      	b.n	800b1b4 <__kernel_rem_pio2+0x52c>
 800b302:	bf00      	nop
 800b304:	f3af 8000 	nop.w
	...
 800b310:	41700000 	.word	0x41700000
 800b314:	3e700000 	.word	0x3e700000
 800b318:	9b04      	ldr	r3, [sp, #16]
 800b31a:	9a04      	ldr	r2, [sp, #16]
 800b31c:	601f      	str	r7, [r3, #0]
 800b31e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800b322:	605c      	str	r4, [r3, #4]
 800b324:	609d      	str	r5, [r3, #8]
 800b326:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b32a:	60d3      	str	r3, [r2, #12]
 800b32c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b330:	6110      	str	r0, [r2, #16]
 800b332:	6153      	str	r3, [r2, #20]
 800b334:	e719      	b.n	800b16a <__kernel_rem_pio2+0x4e2>
 800b336:	bf00      	nop

0800b338 <scalbn>:
 800b338:	b570      	push	{r4, r5, r6, lr}
 800b33a:	ec55 4b10 	vmov	r4, r5, d0
 800b33e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800b342:	4606      	mov	r6, r0
 800b344:	462b      	mov	r3, r5
 800b346:	b991      	cbnz	r1, 800b36e <scalbn+0x36>
 800b348:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b34c:	4323      	orrs	r3, r4
 800b34e:	d03d      	beq.n	800b3cc <scalbn+0x94>
 800b350:	4b35      	ldr	r3, [pc, #212]	@ (800b428 <scalbn+0xf0>)
 800b352:	4620      	mov	r0, r4
 800b354:	4629      	mov	r1, r5
 800b356:	2200      	movs	r2, #0
 800b358:	f7f5 f96e 	bl	8000638 <__aeabi_dmul>
 800b35c:	4b33      	ldr	r3, [pc, #204]	@ (800b42c <scalbn+0xf4>)
 800b35e:	429e      	cmp	r6, r3
 800b360:	4604      	mov	r4, r0
 800b362:	460d      	mov	r5, r1
 800b364:	da0f      	bge.n	800b386 <scalbn+0x4e>
 800b366:	a328      	add	r3, pc, #160	@ (adr r3, 800b408 <scalbn+0xd0>)
 800b368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b36c:	e01e      	b.n	800b3ac <scalbn+0x74>
 800b36e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800b372:	4291      	cmp	r1, r2
 800b374:	d10b      	bne.n	800b38e <scalbn+0x56>
 800b376:	4622      	mov	r2, r4
 800b378:	4620      	mov	r0, r4
 800b37a:	4629      	mov	r1, r5
 800b37c:	f7f4 ffa6 	bl	80002cc <__adddf3>
 800b380:	4604      	mov	r4, r0
 800b382:	460d      	mov	r5, r1
 800b384:	e022      	b.n	800b3cc <scalbn+0x94>
 800b386:	460b      	mov	r3, r1
 800b388:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b38c:	3936      	subs	r1, #54	@ 0x36
 800b38e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800b392:	4296      	cmp	r6, r2
 800b394:	dd0d      	ble.n	800b3b2 <scalbn+0x7a>
 800b396:	2d00      	cmp	r5, #0
 800b398:	a11d      	add	r1, pc, #116	@ (adr r1, 800b410 <scalbn+0xd8>)
 800b39a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b39e:	da02      	bge.n	800b3a6 <scalbn+0x6e>
 800b3a0:	a11d      	add	r1, pc, #116	@ (adr r1, 800b418 <scalbn+0xe0>)
 800b3a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3a6:	a31a      	add	r3, pc, #104	@ (adr r3, 800b410 <scalbn+0xd8>)
 800b3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ac:	f7f5 f944 	bl	8000638 <__aeabi_dmul>
 800b3b0:	e7e6      	b.n	800b380 <scalbn+0x48>
 800b3b2:	1872      	adds	r2, r6, r1
 800b3b4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800b3b8:	428a      	cmp	r2, r1
 800b3ba:	dcec      	bgt.n	800b396 <scalbn+0x5e>
 800b3bc:	2a00      	cmp	r2, #0
 800b3be:	dd08      	ble.n	800b3d2 <scalbn+0x9a>
 800b3c0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b3c4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b3c8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b3cc:	ec45 4b10 	vmov	d0, r4, r5
 800b3d0:	bd70      	pop	{r4, r5, r6, pc}
 800b3d2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800b3d6:	da08      	bge.n	800b3ea <scalbn+0xb2>
 800b3d8:	2d00      	cmp	r5, #0
 800b3da:	a10b      	add	r1, pc, #44	@ (adr r1, 800b408 <scalbn+0xd0>)
 800b3dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3e0:	dac1      	bge.n	800b366 <scalbn+0x2e>
 800b3e2:	a10f      	add	r1, pc, #60	@ (adr r1, 800b420 <scalbn+0xe8>)
 800b3e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3e8:	e7bd      	b.n	800b366 <scalbn+0x2e>
 800b3ea:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b3ee:	3236      	adds	r2, #54	@ 0x36
 800b3f0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b3f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	4b0d      	ldr	r3, [pc, #52]	@ (800b430 <scalbn+0xf8>)
 800b3fc:	4629      	mov	r1, r5
 800b3fe:	2200      	movs	r2, #0
 800b400:	e7d4      	b.n	800b3ac <scalbn+0x74>
 800b402:	bf00      	nop
 800b404:	f3af 8000 	nop.w
 800b408:	c2f8f359 	.word	0xc2f8f359
 800b40c:	01a56e1f 	.word	0x01a56e1f
 800b410:	8800759c 	.word	0x8800759c
 800b414:	7e37e43c 	.word	0x7e37e43c
 800b418:	8800759c 	.word	0x8800759c
 800b41c:	fe37e43c 	.word	0xfe37e43c
 800b420:	c2f8f359 	.word	0xc2f8f359
 800b424:	81a56e1f 	.word	0x81a56e1f
 800b428:	43500000 	.word	0x43500000
 800b42c:	ffff3cb0 	.word	0xffff3cb0
 800b430:	3c900000 	.word	0x3c900000
 800b434:	00000000 	.word	0x00000000

0800b438 <floor>:
 800b438:	ec51 0b10 	vmov	r0, r1, d0
 800b43c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b444:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800b448:	2e13      	cmp	r6, #19
 800b44a:	460c      	mov	r4, r1
 800b44c:	4605      	mov	r5, r0
 800b44e:	4680      	mov	r8, r0
 800b450:	dc34      	bgt.n	800b4bc <floor+0x84>
 800b452:	2e00      	cmp	r6, #0
 800b454:	da17      	bge.n	800b486 <floor+0x4e>
 800b456:	a332      	add	r3, pc, #200	@ (adr r3, 800b520 <floor+0xe8>)
 800b458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45c:	f7f4 ff36 	bl	80002cc <__adddf3>
 800b460:	2200      	movs	r2, #0
 800b462:	2300      	movs	r3, #0
 800b464:	f7f5 fb78 	bl	8000b58 <__aeabi_dcmpgt>
 800b468:	b150      	cbz	r0, 800b480 <floor+0x48>
 800b46a:	2c00      	cmp	r4, #0
 800b46c:	da55      	bge.n	800b51a <floor+0xe2>
 800b46e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800b472:	432c      	orrs	r4, r5
 800b474:	2500      	movs	r5, #0
 800b476:	42ac      	cmp	r4, r5
 800b478:	4c2b      	ldr	r4, [pc, #172]	@ (800b528 <floor+0xf0>)
 800b47a:	bf08      	it	eq
 800b47c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800b480:	4621      	mov	r1, r4
 800b482:	4628      	mov	r0, r5
 800b484:	e023      	b.n	800b4ce <floor+0x96>
 800b486:	4f29      	ldr	r7, [pc, #164]	@ (800b52c <floor+0xf4>)
 800b488:	4137      	asrs	r7, r6
 800b48a:	ea01 0307 	and.w	r3, r1, r7
 800b48e:	4303      	orrs	r3, r0
 800b490:	d01d      	beq.n	800b4ce <floor+0x96>
 800b492:	a323      	add	r3, pc, #140	@ (adr r3, 800b520 <floor+0xe8>)
 800b494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b498:	f7f4 ff18 	bl	80002cc <__adddf3>
 800b49c:	2200      	movs	r2, #0
 800b49e:	2300      	movs	r3, #0
 800b4a0:	f7f5 fb5a 	bl	8000b58 <__aeabi_dcmpgt>
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	d0eb      	beq.n	800b480 <floor+0x48>
 800b4a8:	2c00      	cmp	r4, #0
 800b4aa:	bfbe      	ittt	lt
 800b4ac:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800b4b0:	4133      	asrlt	r3, r6
 800b4b2:	18e4      	addlt	r4, r4, r3
 800b4b4:	ea24 0407 	bic.w	r4, r4, r7
 800b4b8:	2500      	movs	r5, #0
 800b4ba:	e7e1      	b.n	800b480 <floor+0x48>
 800b4bc:	2e33      	cmp	r6, #51	@ 0x33
 800b4be:	dd0a      	ble.n	800b4d6 <floor+0x9e>
 800b4c0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800b4c4:	d103      	bne.n	800b4ce <floor+0x96>
 800b4c6:	4602      	mov	r2, r0
 800b4c8:	460b      	mov	r3, r1
 800b4ca:	f7f4 feff 	bl	80002cc <__adddf3>
 800b4ce:	ec41 0b10 	vmov	d0, r0, r1
 800b4d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4d6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800b4da:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b4de:	40df      	lsrs	r7, r3
 800b4e0:	4207      	tst	r7, r0
 800b4e2:	d0f4      	beq.n	800b4ce <floor+0x96>
 800b4e4:	a30e      	add	r3, pc, #56	@ (adr r3, 800b520 <floor+0xe8>)
 800b4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ea:	f7f4 feef 	bl	80002cc <__adddf3>
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	f7f5 fb31 	bl	8000b58 <__aeabi_dcmpgt>
 800b4f6:	2800      	cmp	r0, #0
 800b4f8:	d0c2      	beq.n	800b480 <floor+0x48>
 800b4fa:	2c00      	cmp	r4, #0
 800b4fc:	da0a      	bge.n	800b514 <floor+0xdc>
 800b4fe:	2e14      	cmp	r6, #20
 800b500:	d101      	bne.n	800b506 <floor+0xce>
 800b502:	3401      	adds	r4, #1
 800b504:	e006      	b.n	800b514 <floor+0xdc>
 800b506:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800b50a:	2301      	movs	r3, #1
 800b50c:	40b3      	lsls	r3, r6
 800b50e:	441d      	add	r5, r3
 800b510:	4545      	cmp	r5, r8
 800b512:	d3f6      	bcc.n	800b502 <floor+0xca>
 800b514:	ea25 0507 	bic.w	r5, r5, r7
 800b518:	e7b2      	b.n	800b480 <floor+0x48>
 800b51a:	2500      	movs	r5, #0
 800b51c:	462c      	mov	r4, r5
 800b51e:	e7af      	b.n	800b480 <floor+0x48>
 800b520:	8800759c 	.word	0x8800759c
 800b524:	7e37e43c 	.word	0x7e37e43c
 800b528:	bff00000 	.word	0xbff00000
 800b52c:	000fffff 	.word	0x000fffff

0800b530 <_init>:
 800b530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b532:	bf00      	nop
 800b534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b536:	bc08      	pop	{r3}
 800b538:	469e      	mov	lr, r3
 800b53a:	4770      	bx	lr

0800b53c <_fini>:
 800b53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b53e:	bf00      	nop
 800b540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b542:	bc08      	pop	{r3}
 800b544:	469e      	mov	lr, r3
 800b546:	4770      	bx	lr
